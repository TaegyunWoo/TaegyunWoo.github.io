I"kO<p><br/><br/></p>
<ul>
<li>이전 게시글
<ol>
<li><a href="https://taegyunwoo.github.io/spring-mvc/SPRING_MVC_LoginBasicProject">로그인처리 - 기본 프로젝트 설정</a></li>
<li><a href="https://taegyunwoo.github.io/spring-mvc/SPRING_MVC_LoginSession">로그인처리 - 쿠키와 세션</a></li>
<li><a href="https://taegyunwoo.github.io/spring-mvc/SPRING_MVC_LoginFilter">로그인처리 - 필터</a></li>
</ol>
</li>
</ul>
<br/>
<h1 id="section">인터셉터</h1>
<h2 id="section-1">개요</h2>
<ul>
<li>스프링 인터셉터는 서블릿 필터와 같이 웹과 관련된 공통 관심 사항을 효과적으로 해결할 수 있는 기술이다.</li>
</ul>
<br/>
<h2 id="section-2">스프링 인터셉터의 흐름들</h2>
<h3 id="section-3">스프링 인터셉터 흐름</h3>
<pre><code>HTTP요청 -&gt; WAS -&gt; 필터 -&gt; 서블릿 -&gt; 인터셉터 -&gt; 컨트롤러
</code></pre>
<ul>
<li>스프링 인터셉터는 <strong>디스패처 서블릿과 컨트롤러 사이에서 컨트롤러 호출 직전에 호출된다.</strong></li>
<li>스프링 인터셉터에는 URL 패턴을 보다 정밀하게 설정할 수 있다.</li>
</ul>
<br/>
<h3 id="section-4">스프링 인터셉터 제한</h3>
<pre><code>로그인O: HTTP요청 -&gt; WAS -&gt; 필터 -&gt; 서블릿 -&gt; 인터셉터 -&gt; 컨트롤러
로그인X: HTTP요청 -&gt; WAS -&gt; 필터 -&gt; 서블릿 -&gt; 인터셉터 -&gt; (비정상적인 요청이라고 판단, 서블릿 호출X)
</code></pre>
<br/>
<h3 id="section-5">스프링 인터셉터 체인</h3>
<pre><code>HTTP요청 -&gt; WAS -&gt; 필터 -&gt; 서블릿 -&gt; 인터셉터1 -&gt; 인터셉터2 -&gt; .. -&gt; 컨트롤러
</code></pre>
<ul>
<li>스프링 인터셉터는 체인으로 구성된다.</li>
<li>중간에 인터셉터를 자유롭게 추가할 수 있다.</li>
</ul>
<p><br/><br/></p>
<h2 id="section-6">스프링 인터셉터 호출 흐름</h2>
<p><img src="/assets/img/2021-08-15-SPRING_MVC_LoginInterceptor/Untitled%2044.png" alt="스프링 인터셉터 호출 흐름" /></p>
<blockquote>
<p>스프링의 구조에 대해서는 <a href="https://taegyunwoo.github.io/spring-mvc/SPRING_MVC_Structure#0">이전 게시글</a>을 참고하자.</p>
</blockquote>
<br/>
<h3 id="section-7">정상 흐름</h3>
<ul>
<li><strong><code>preHandle</code></strong>
<ul>
<li>핸들러 어댑터 호출 전에 호출된다.</li>
<li><code>preHandle</code> 의 응답값이 <code>true</code> 인 경우
<ul>
<li>다음으로 진행한다.</li>
</ul>
</li>
<li><code>preHandle</code> 의 응답값이 <code>false</code> 인 경우
<ul>
<li>더이상 진행하지 않는다.</li>
</ul>
</li>
</ul>
</li>
<li><strong><code>postHandle</code></strong>
<ul>
<li>핸들러 어댑터 호출 이후에 호출된다.</li>
</ul>
</li>
<li><strong><code>afterCompletion</code></strong>
<ul>
<li>뷰가 렌더링 된 이후에 호출된다.</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-8">인터셉터 예외 흐름</h3>
<p><img src="/assets/img/2021-08-15-SPRING_MVC_LoginInterceptor/Untitled%2045.png" alt="인터셉터 예외 흐름" /></p>
<ul>
<li><strong>예외 발생시</strong>
<ul>
<li><code>preHandle</code>
<ul>
<li>핸들러 어댑터 호출 전에 호출된다.</li>
</ul>
</li>
<li><code>postHandle</code>
<ul>
<li><strong>컨트롤러(핸들러)에서 예외가 발생하면 호출되지 않는다.</strong></li>
</ul>
</li>
<li><code>afterCompletion</code>
<ul>
<li><strong>항상 호출된다. (따라서, 예외와 무관한 로직이 필요할 때 사용할 수 있다)</strong></li>
<li>이 경우 예외를 파라미터로 받아서 어떤 예외가 발생했는지 로그로 출력할 수 있다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-9">인증 체크 인터셉터 구현</h2>
<h3 id="codelogincheckinterceptorcode-">인증 체크 인터셉터: <code>LoginCheckInterceptor</code> 클래스</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginCheckInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>
<p><span class="cm">/**</p>
<ul>
<li>
<p>핸들러 어댑터 호출 전, 실행되는 메서드
*/</span>
<span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
<span class="nc">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">requestURL</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span></p>
<p><span class="k">if</span> <span class="o">(</span><span class="n">session</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">“loginUser”</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">”/member/login?redirectURL=”</span> <span class="o">+</span> <span class="n">requestURL</span><span class="o">);</span>
<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span></p>
</li>
</ul>
<pre><code>&lt;span class=&quot;cm&quot;&gt;/**
 * 핸들러 호출 후, 실행되는 메서드
 */&lt;/span&gt;
</code></pre>
<p><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">“postHandle 호출”</span><span class="o">);</span>
<span class="o">}</span></p>
<pre><code>&lt;span class=&quot;cm&quot;&gt;/**
 * 항상 실행되는 메서드
 */&lt;/span&gt;
</code></pre>
<p><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">“afterCompletion 호출”</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div></p>
<ul>
<li><code>implements HandlerInterceptor</code>
<ul>
<li>인터셉터를 구현하기 위해 <code>HandlerInterceptor</code> 를 <code>implements</code> 해야한다.</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li><code>preHandle()</code> 의 반환값
<ul>
<li><code>true</code> : 계속 진행 (핸들러 호출)</li>
<li><code>false</code> : 중단 (핸들러 호출 X)</li>
</ul>
</li>
</ul>
<br/>
<h3 id="codewebconfigcode-">인터셉터 등록: <code>WebConfig</code> 클래스</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">...</span>
<p><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addInterceptors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterceptorRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//아래 코드는 규격화된(문법과 같이) 패턴이다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginCheckInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addPathPatterns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;excludePathPatterns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/member/add&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/member/login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/member/logout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
</code></pre>
<p><span class="o">}</span>
</code></pre></div></div></p>
<ul>
<li><code>implements WebMvcConfigurer</code>
<ul>
<li>인터셉터를 등록하기 위해, Configuration 클래스에 <code>WebMvcConfigurer</code> 를 <code>implements</code> 해야한다.</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li><code>addInterceptors(InterceptorRegistry registry)</code>
<ul>
<li>인터셉터를 등록하는 메서드이다.</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li><code>addInterceptor(new LoginCheckInterceptor())</code>
<ul>
<li><code>LoginCheckInterceptor</code> 를 인터셉터로 등록한다.</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li><code>order(1)</code>
<ul>
<li>인터셉터의 호출 순서이다.</li>
<li>첫 번째로 호출된다.</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li><code>addPathPatterns(&quot;/**&quot;)</code>
<ul>
<li>인터셉터를 적용할 URL 패턴을 지정한다.</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li><code>excludePathPatterns(&quot;/&quot;, &quot;/member/add&quot;, &quot;/member/login&quot;, &quot;/member/logout&quot;)</code>
<ul>
<li>인터셉터 적용을 제외할 패턴을 지정한다.</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>스프링의 URL 경로
<ul>
<li>
<p>서블릿과는 다르게 세밀하게 설정할 수 있다.</p>
</li>
<li>
<p>대표적인 문법</p>
<pre><code>? 한 개의 문자 일치
* 경로 안에서 0개 이상의 경로 일치
** 경로 끝까지 0개 이상의 경로 일치
</code></pre></li>
<li>
<p><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/util/pattern/PathPattern.html">PathPattern 공식 문서</a></p>
</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-10">결과</h3>
<ul>
<li>
<p><strong>로그인X, 바로 URL(<code>http://localhost:8080/service</code>) 접근</strong></p>
<p><img src="/assets/img/2021-08-15-SPRING_MVC_LoginInterceptor/Untitled%2042.png" alt="로그인X, 바로 URL" /></p>
</li>
<li>
<p><strong>로그인 완료</strong></p>
<p><img src="/assets/img/2021-08-15-SPRING_MVC_LoginInterceptor/Untitled%2043.png" alt="로그인 완료" /></p>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-11">스프링 인터셉터 부가 설명</h2>
<h3 id="codeprehandlecode--codeposthandlecode--codeaftercompletioncode--"><code>preHandle</code> , <code>postHandle</code> , <code>afterCompletion</code> 공동 값</h3>
<ul>
<li><code>preHandle</code> , <code>postHandle</code> , <code>afterCompletion</code> 에서 공통으로 사용할 값이 있다면, <strong><code>HttpServletRequest객체.addAttribute()</code> 를 사용해서 담아두어야 한다.</strong>
<ul>
<li>일반 지역변수(메서드 내부에 선언된 변수)로 해결할 수 없다.</li>
<li>멤버 변수(클래스 내부에 선언된 변수)를 사용하기에도 위험하다. (싱글톤 문제)</li>
<li><strong>왜냐하면, <code>preHandle</code> , <code>postHandle</code> , <code>afterCompletion</code> 의 호출시점이 모두 다르고, 인터셉터 객체가 싱글톤으로 사용되기 때문이다.</strong></li>
<li><strong>호출시점이 다르더라도, <code>HttpServletRequest객체</code> 는 공통적으로 사용한다.</strong></li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p>예시 코드</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>
<p><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
<span class="nc">String</span> <span class="n">myValue</span> <span class="o">=</span> <span class="s">“공용으로 사용하고 싶은 값”</span><span class="o">;</span>
<span class="n">request</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">“myVar”</span><span class="o">,</span> <span class="n">myValue</span><span class="o">);</span>
<span class="o">}</span></p>
<pre><code>&lt;span class=&quot;cm&quot;&gt;/**
 * 핸들러 호출 후, 실행되는 메서드
 */&lt;/span&gt;
</code></pre>
<p><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
<span class="n">request</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">“myVar”</span><span class="o">,</span> <span class="n">myValue</span><span class="o">);</span>
<span class="o">}</span></p>
<pre><code>&lt;span class=&quot;cm&quot;&gt;/**
 * 항상 실행되는 메서드
 */&lt;/span&gt;
</code></pre>
<p><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
<span class="n">request</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">“myVar”</span><span class="o">,</span> <span class="n">myValue</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div></p>
</li>
</ul>
<br/>
<h3 id="section-12">핸들러 정보</h3>
<ul>
<li>
<p><strong><code>HandlerMethod</code> 객체</strong></p>
<ul>
<li>
<p><code>@Controller</code> 와 <code>@RequestMapping</code> 을 사용하는 핸들러(컨트롤러 메서드)에 대한 모든 정보가 담겨있다.</p>
</li>
<li>
<p>예시 코드</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>
<p><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
<span class="k">if</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="nc">HandlerMethod</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">HandlerMethod</span> <span class="n">hm</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HandlerMethod</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span> <span class="c1">//호출할 컨트롤러 메서드의 모든 정보가 담겨있음</span>
<span class="o">}</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div></p>
</li>
</ul>
</li>
<li>
<p><strong><code>ResourceHttpRequestHandler</code> 객체</strong></p>
<ul>
<li><code>/resources/static</code> 와 같은 정적 리소스가 호출되는 경우에 사용되는 핸들러(컨트롤러 메서드)에 대한 모든 정보가 담겨있다.</li>
</ul>
</li>
</ul>
<br>
<hr />
<br>
<p><a href="https://inf.run/YPER"><img src="/assets/img/Inflearn_Spring_MVC2/logo.png" width="400px" height="300px"></a></p>
<ul>
<li><em>본 게시글은 김영한님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET