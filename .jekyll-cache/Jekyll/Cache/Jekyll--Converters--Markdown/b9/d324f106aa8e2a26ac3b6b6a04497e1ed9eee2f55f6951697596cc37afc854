I"1,<p><br/><br/></p>
<h1 id="section">개요</h1>
<h2 id="section-1">운영체제란?</h2>
<h3 id="section-2">운영체제 정의</h3>
<p>운영체제는 바라보는 관점에 따라 다르게 정의될 수 있다.</p>
<ul>
<li>
<p><strong>시스템 관점에서의 정의</strong></p>
<ul>
<li>운영체제는 <strong>자원 할당자</strong>이다.
<ul>
<li>모든 자원을 관리한다. (CPU, Memory 등)</li>
<li>자원의 공정하고 효율적인 사용을 위해 상충하는 요청을 조정한다.</li>
</ul>
</li>
<li>운영체제는 <strong>제어 프로그램</strong>이다.
<ul>
<li>에러를 방지하고 컴퓨터의 부적절한 사용을 방지하기 위해 프로그램의 실행을 제어한다.</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>일반적인 관점에서의 정의</strong></p>
<ul>
<li>
<p>운영체제는 컴퓨터에서 항상 실행하는 한 개의 프로그램으로 **커널(Kernel)**이라 한다.</p>
<ul>
<li>커널: 운영체제의 핵심 요소</li>
</ul>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled.png" alt="Untitled" /></p>
</li>
</ul>
</li>
<li>
<p>운영체제는 응용 프로그램을 로딩시켜주는 로더이다.</p>
</li>
</ul>
<br/>
<h3 id="section-3">운영체제 목표</h3>
<ul>
<li>사용자 프로그램을 실행하고 사용자 문제를 쉽게 해결하는 것</li>
<li>컴퓨터 시스템을 사용하기 쉽게 만드는 것</li>
<li>컴퓨터 하드웨어를 효율적으로 사용하기</li>
</ul>
<p><br/><br/></p>
<h2 id="section-4">컴퓨터 시스템</h2>
<h3 id="section-5">컴퓨터 시스템의 구성 요소</h3>
<ul>
<li>하드웨어</li>
<li>운영체제</li>
<li>응용(Application) 프로그램</li>
<li>사용자</li>
</ul>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%201.png" alt="Untitled" /></p>
<br/>
<h3 id="section-6">컴퓨터 시작과정</h3>
<ul>
<li>부트스트랩 프로그램 (bootstrap program)을 통해, 컴퓨터가 시작된다.</li>
<li><strong>부트스트랩 프로그램</strong>
<ul>
<li>전원을 키거나 재부팅 될 때, 가장 먼저 실행되는 프로그램</li>
<li>보통 ROM이나 EPROM에 저장되는 Firmware이다.</li>
<li>시스템의 모든 장치를 초기화한다.</li>
<li>운영체제의 <strong>커널</strong>을 메모리에 적재하고 실행한다.</li>
</ul>
</li>
</ul>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%202.png" alt="Untitled" /></p>
<br/>
<h3 id="section-7">컴퓨터 시스템 동작</h3>
<ul>
<li>
<p>한 개 이상의 CPU와 장치제어기가 <strong>공유 메모리에 접근 할 수 있는 공통 버스</strong>를 통해 연결되어 있다.</p>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%203.png" alt="Untitled" /></p>
</li>
<li>
<p>메모리 사이클을 얻고자 경쟁하는 CPU와 디바이스가 동시에 실행한다.</p>
</li>
</ul>
<br/>
<h3 id="section-8">입출력 장치와 컴퓨터 시스템 동작</h3>
<ul>
<li>입출력 장치
<ul>
<li>입출력 장치도 하나의 컴퓨터로 생각할 수 있다. (실제로 작은 CPU를 가지고 있다.)</li>
<li><strong>따라서, 입출력 장치도 하나의 독립 객체이다.</strong>
<ul>
<li>즉, 컴퓨터의 CPU에 종속되지 않는다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>장치제어기
<ul>
<li>해당 장치를 관리한다.</li>
<li>지역 버퍼를 가지고 있다.</li>
<li><strong>입출력 작업을 마친 후, 인터럽트를 발생시켜 CPU에게 작업 종료를 알린다.</strong></li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p>입출력 장치와 CPU는 동시에 실행이 가능하다.</p>
<blockquote>
<p>위에서 설명했듯이, 입출력 장치도 하나의 독립 객체이므로</p>
</blockquote>
</li>
</ul>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%204.png" alt="Untitled" /></p>
<ul>
<li><strong>CPU</strong>
<ul>
<li>‘주저장장치’와 ‘장치제어기의 지역버퍼’ 간의 자료 이송</li>
</ul>
</li>
<li><strong>입출력 장치</strong>
<ul>
<li>‘입출력장치’와 ‘장치제어기의 지역버퍼’ 간의 자료 이송</li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-9">인터럽트</h2>
<h3 id="section-10">인터럽트란?</h3>
<ul>
<li>운영체제는 인터럽트(Interrupt) 기반으로 동작한다.</li>
<li>H/W 나 S/W 에서 어떤 사건(Event)가 발생하면, 인터럽트를 사용하여 시스템에 알린다.</li>
<li><strong>CPU가 인터럽트되면, CPU는 하던 일을 멈추고 즉시 고정된 위치로 실행을 옮겨 인터럽트를 처리한다.</strong></li>
</ul>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%205.png" alt="Untitled" /></p>
<br/>
<h3 id="section-11">인터럽트 핸들링</h3>
<ul>
<li>
<p>인터럽트는 <strong>인터럽트 벡터</strong>를 사용하여 제어를 인터럽트 서비스 루틴으로 넘긴다.</p>
<ul>
<li><strong>인터럽트 벡터</strong>: 인터럽트를 요청한 서비스(ex. 프린터, HDD 등) 처리의 주소를 저장하는 곳
<ul>
<li>인터럽트 벡터는 모든 서비스 루틴의 주소를 가지고 있다.</li>
</ul>
</li>
</ul>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%206.png" alt="Untitled" /></p>
</li>
</ul>
<br/>
<h3 id="section-12">인터럽트 원리</h3>
<ul>
<li>인터럽트 구조에서 ‘인터럽트 당한 명령의 주소’는 저장되어야 한다.</li>
<li><strong>인터럽트 처리가 끝나면 ‘인털버트 당한 명령어’로 실행이 다시 옮겨갈 수 있다.</strong></li>
</ul>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%207.png" alt="Untitled" /></p>
<br/>
<h3 id="cpu--">인터럽트와 CPU 상세 원리</h3>
<ul>
<li>인터럽트가 처리되고 있는 동안에는 인터럽트의 유실을 방지하기 위해 다른 인터럽트는 억제된다.</li>
<li>트랩(응용 App 개발자의 실수) 또는 예외(Exception)는 ‘에러’나 ‘사용자 요청에 의해 발생한 소프트웨어’가 생성한 인터럽트이다.</li>
<li>운영체제는 인터럽트에 의해 구동된다.</li>
</ul>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%208.png" alt="Untitled" /></p>
<br/>
<h3 id="section-13">인터럽트 처리</h3>
<ul>
<li>운영체제는 인터럽트를 처리하기 이전에, 현재 CPU의 상태(레지스터와 프로그램 카운터 등)를 보존한다.</li>
<li>CPU 상태를 보존한 후, 인터럽트 서비스를 수행한다.</li>
<li><strong>Context</strong>
<ul>
<li>CPU 상태를 의미한다.</li>
</ul>
</li>
<li><strong>Context Switching</strong>
<ul>
<li>Context 저장 후, 인터럽트 서비스를 수행하는 것을 의미한다.</li>
</ul>
</li>
</ul>
<br/>
<h3 id="timeline">인터럽트 TimeLine</h3>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%209.png" alt="Untitled" /></p>
<p><br/><br/></p>
<h2 id="section-14">저장장치</h2>
<h3 id="section-15">주 저장장치</h3>
<ul>
<li>Main Memory</li>
<li>CPU가 직접 접근할 수 있는 유일한 채형 저장장치</li>
<li>RAM(휘발성)</li>
<li>ROM(비휘발성)</li>
</ul>
<br/>
<h3 id="section-16">보조 저장장치</h3>
<ul>
<li><strong>자기 디스크</strong>
<ul>
<li>
<p>자기 기록 물질을 입힌 금속 또는 유리판으로 구성</p>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%2010.png" alt="Untitled" /></p>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%2011.png" alt="Untitled" /></p>
</li>
<li>
<p><strong>반도체 디스크(SSD: Solid-State Disks)</strong></p>
<ul>
<li>반도체를 사용하여 자기 디스크보다 빠르다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-17">저장장치 계층구조</h3>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%2012.png" alt="Untitled" /></p>
<ul>
<li>
<p><strong>캐싱</strong></p>
<ul>
<li>빠른 저장장치에 정보를 복사하는 일을 말한다.</li>
<li>주저장장치는 보조저장장치의 캐시로 볼 수 있다.</li>
</ul>
</li>
<li>
<p><strong>장치 구동기</strong></p>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%2013.png" alt="Untitled" /></p>
<ul>
<li>장치 제어기(device controller) 마다 있으며 입출력을 관리한다.</li>
<li>제어기(controller)와 커널(kernel) 간에 일관된 인터페이스를 제공한다.</li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h2 id="dma">메모리 직접 접근(DMA)</h2>
<h3 id="dma-1">DMA란?</h3>
<ul>
<li>Direct Memory Access 의 약자</li>
<li>고속의 입출력 장치가 메모리 속도에 근접하는 속도로 정보를 전송할 때 사용한다.</li>
<li>장치 제어기가 버퍼 스토리지에서 주저장 장치에 직접 데이터 블록을 전송한다. 이때 <strong>CPU 관여는 없다.</strong></li>
</ul>
<br/>
<h3 id="section-18">구조</h3>
<ul>
<li>
<p><strong>기존 방식 (PIO)</strong></p>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%2014.png" alt="Untitled" /></p>
<ul>
<li>HDD와 CPU간의 속도 차이가 크다. 따라서, 성능이 낮다.</li>
</ul>
</li>
<li>
<p><strong>DMA</strong></p>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%2015.png" alt="Untitled" /></p>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-19">처리기 구조</h2>
<h3 id="section-20">단일 처리기 시스템</h3>
<ul>
<li>옛날에 사용되던 시스템으로, 한 개의 범용 프로세서를 사용한다.</li>
</ul>
<br/>
<h3 id="section-21">다중 처리기 시스템</h3>
<ul>
<li>다중 처리기 시스템 = 병렬시스템 = 강결합 시스템</li>
</ul>
<br/>
<ul>
<li>주요 장점
<ul>
<li><strong>향상된 처리량</strong></li>
<li><strong>경제적</strong></li>
<li><strong>향상된 신뢰성</strong>
<ul>
<li><strong>우아한 성능저하</strong>: CPU 코어 하나가 문제여도, 나머지 CPU 코어가 커버한다.</li>
<li><strong>결함 허용</strong>: 그렇기 때문에, 결함이 생겨도 시스템 유지가 가능하다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>종류
<ul>
<li><strong>비대칭적 다중처리</strong>
<ul>
<li>주 처리기가 시스템 제어한다.</li>
<li>주 처리기가 나머지 처리기에 특정 테스크를 할당한다.</li>
<li>주종관계</li>
</ul>
</li>
<li><strong>대칭적 다중처리(SMP: Symmetric Multiprocessiong)</strong>
<ul>
<li>모든 처리기가 대등하다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<h3 id="smp-">대칭적 다중처리 구조 (SMP 구조)</h3>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%2016.png" alt="Untitled" /></p>
<ul>
<li>구조가 모두 동일하며, 모두 독립적인 객체로서 활동한다.</li>
</ul>
<br/>
<h3 id="section-22">다중처리기 칩</h3>
<ul>
<li>
<p>최근 경향으로 하나의 칩에 여러 개의 코어(core)를 포함시킨다.</p>
</li>
<li>
<p>단일-코어 칩</p>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%2017.png" alt="Untitled" /></p>
</li>
<li>
<p>이중-코어 칩</p>
<p><img src="/assets/img/2021-09-10-OS_Summary/Untitled%2018.png" alt="Untitled" /></p>
</li>
</ul>
<p><br><br></p>
<hr />
<br>
<div style="font-style: italic;color: gray;">
  <ul>
    <li>성결대학교 컴퓨터 공학과 강영명 교수님 (2021)</li>
    <li>Siberschatz et. al., 『Operating System Concepts 10th Ed.』</li>
  </ul>
  본 게시글은 위 강의 및 교재를 기반으로 정리한 글입니다.
</div>
:ET