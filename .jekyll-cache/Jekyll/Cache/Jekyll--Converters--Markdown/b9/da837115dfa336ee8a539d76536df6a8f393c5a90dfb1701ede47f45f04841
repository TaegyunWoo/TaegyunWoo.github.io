I"ڶ<p><br/><br/></p>
<p>본 게시글은 테스트 코드만을 다룬다. 이미 작성된 코드들 (<code>AppConfig</code> , <code>MemberService</code> , <code>MemberServiceImpl</code> 등)은 <a href="https://taegyunwoo.github.io/spring/SPRING_OCP_DIP">이전 게시글</a>을 참고하면 된다.</p>
<p>또한, JUnit 프레임워크를 통해 테스트 코드를 작성하므로, 관련 지식이 부족하다면 자료를 찾아보시길 바란다.</p>
<p><br><br></p>
<h1 id="section">기본적인 방법으로 조회</h1>
<h2 id="getbean-">getBean() 메서드</h2>
<h3 id="section-1">빈 이름으로 조회하기</h3>
<ul>
<li><code>getBean(빈이름, 빈타입)</code>
<ul>
<li>빈이름: 조회할 빈의 이름을 뜻한다.</li>
<li>빈타입: 조회할 빈의 타입을 뜻한다. 다형성을 활용하기 위해 보통 인터페이스 타입으로 조회한다.</li>
</ul>
</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.AppConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberServiceImpl</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Assertions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.DisplayName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.NoSuchBeanDefinitionException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.*;</span>

<span class="kd">class</span> <span class="nc">ApplicationContextBasicFindTest</span> <span class="o">{</span>
	
	<span class="nc">AnnotationConfigApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"빈 이름으로 조회"</span><span class="o">)</span>
	<span class="kt">void</span> <span class="nf">findBeanByName</span><span class="o">()</span> <span class="o">{</span>
		
		<span class="c1">//빈 이름으로 조회하기</span>
		<span class="nc">MemberService</span> <span class="n">memberService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"memberService"</span><span class="o">,</span> <span class="nc">MemberService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

		<span class="n">assertThat</span><span class="o">(</span><span class="n">memberService</span><span class="o">).</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="nc">MemberServiceImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<h3 id="section-2">빈 타입만으로 조회하기</h3>
<ul>
<li><code>getBean(빈타입)</code>
<ul>
<li>해당 타입을 가지는 빈 객체를 반환한다.</li>
</ul>
</li>
<li>타입으로 조회시 같은 타입의 스프링 빈이 둘 이상이면 오류가 발생한다.
<ul>
<li>따라서, 빈이름을 지정해야한다.</li>
</ul>
</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.AppConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberServiceImpl</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Assertions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.DisplayName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.NoSuchBeanDefinitionException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.*;</span>

<span class="kd">class</span> <span class="nc">ApplicationContextBasicFindTest</span> <span class="o">{</span>
	
	<span class="nc">AnnotationConfigApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"이름없이 타입만으로 조회"</span><span class="o">)</span>
	<span class="kt">void</span> <span class="nf">findBeanByType</span><span class="o">()</span> <span class="o">{</span>
		
		<span class="c1">//빈 타입만으로 조회하기</span>
		<span class="nc">MemberService</span> <span class="n">memberService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">MemberService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

		<span class="n">assertThat</span><span class="o">(</span><span class="n">memberService</span><span class="o">).</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="nc">MemberServiceImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<h3 id="section-3">빈 구체 타입으로 조회하기</h3>
<ul>
<li><code>getBean(빈이름, 구체타입)</code>
<ul>
<li>인터페이스 타입이 아닌 구체 타입으로 조회한다.</li>
<li>보통 이런 방식으로 사용하지는 않는다.</li>
<li>왜냐하면, 다형성을 사용할 수 없기 때문에 변경시 유연성이 떨어지기 때문이다.</li>
</ul>
</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.AppConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberServiceImpl</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Assertions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.DisplayName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.NoSuchBeanDefinitionException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.*;</span>

<span class="kd">class</span> <span class="nc">ApplicationContextBasicFindTest</span> <span class="o">{</span>
	
	<span class="nc">AnnotationConfigApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"이름과 구체 타입으로 조회"</span><span class="o">)</span>
	<span class="kt">void</span> <span class="nf">findBeanByName2</span><span class="o">()</span> <span class="o">{</span>
		
		<span class="c1">//빈 구체타입으로 조회하기</span>
		<span class="nc">MemberService</span> <span class="n">memberService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"memberService"</span><span class="o">,</span> <span class="nc">MemberServiceImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

		<span class="n">assertThat</span><span class="o">(</span><span class="n">memberService</span><span class="o">).</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="nc">MemberServiceImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<h3 id="section-4">존재하지 않는 빈 조회하기</h3>
<ul>
<li><code>NoSuchBeanDefinitionException</code> 예외
<ul>
<li>존재하지 않는 빈 이름을 조회하면 해당 예외가 발생한다.</li>
</ul>
</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.AppConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberServiceImpl</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Assertions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.DisplayName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.NoSuchBeanDefinitionException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.*;</span>

<span class="kd">class</span> <span class="nc">ApplicationContextBasicFindTest</span> <span class="o">{</span>
	
	<span class="nc">AnnotationConfigApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"존재하지 않는 빈 조회"</span><span class="o">)</span>
	<span class="kt">void</span> <span class="nf">findBeanByNameX</span><span class="o">()</span> <span class="o">{</span>
		
		<span class="c1">//빈 조회</span>
		<span class="nc">Assertions</span><span class="o">.</span><span class="na">assertThrows</span><span class="o">(</span><span class="nc">NoSuchBeanDefinitionException</span><span class="o">.</span><span class="na">class</span> <span class="o">,</span>
				<span class="o">()</span> <span class="o">-&gt;</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"Xxxx"</span><span class="o">,</span> <span class="nc">MemberService</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<p><br><br></p>
<h1 id="section-5">동일한 타입이 둘 이상일때 조회</h1>
<h2 id="section-6">전제</h2>
<ul>
<li>
<p><code>MemberRepository</code> 라는 인터페이스의 구현 클래스가 <code>MemoryMemberRepository</code> 클래스와 <code>DbMemberRepository</code> 클래스라고 하자.</p>
</li>
<li>
<p><code>MemoryMemberRepository</code></p>
<ul>
<li>memberRepository1 라는 이름으로 빈 등록되었다고 가정한다.</li>
</ul>
</li>
<li>
<p><code>DbMemberRepository</code></p>
<ul>
<li>memberRepository2 라는 이름으로 빈 등록되었다고 가정한다.</li>
</ul>
</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">SameBeanConfig</span> <span class="o">{</span>
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository1</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MemoryMemberRepository</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository2</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">DbMemberRepository</span><span class="o">();</span>
	<span class="o">}</span>	
<span class="o">}</span>
</code></pre></div></div>
<p><br><br></p>
<h2 id="getbean--1">getBean() 메서드</h2>
<h3 id="section-7">타입만으로 조회하기</h3>
<ul>
<li><code>NoUniqueBeanDefinitionException</code> 예외
<ul>
<li>타입만으로 조회시 같은 타입이 둘 이상 있으면, 중복 오류가 발생한다.</li>
</ul>
</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.member.MemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemoryMemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.DisplayName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.NoUniqueBeanDefinitionException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThrows</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ApplicationContextSameBeanFindTest</span> <span class="o">{</span>
	
	<span class="nc">AnnotationConfigApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">SameBeanConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"타입으로 조회시 같은 타입이 둘 이상 있으면, 중복 오류가 발생한다"</span><span class="o">)</span>
	<span class="kt">void</span> <span class="nf">findBeanByTypeDuplicate</span><span class="o">()</span> <span class="o">{</span>
		<span class="c1">//예외 발생 코드</span>
		<span class="c1">//DiscountPolicy bean = ac.getBean(MemberRepository.class);</span>
		
		<span class="n">assertThrows</span><span class="o">(</span><span class="nc">NoUniqueBeanDefinitionException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span>
		<span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">MemberRepository</span><span class="o">.</span><span class="na">class</span><span class="o">));</span> <span class="c1">//인터페이스 타입으로 조회</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<h3 id="section-8">빈 이름, 빈 타입으로 조회하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.member.MemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemoryMemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.DisplayName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.NoUniqueBeanDefinitionException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThrows</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ApplicationContextSameBeanFindTest</span> <span class="o">{</span>
	
	<span class="nc">AnnotationConfigApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">SameBeanConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"타입으로 조회시 같은 타입이 둘 이상 있으면, 빈 이름을 지정하면 된다."</span><span class="o">)</span>
	<span class="kt">void</span> <span class="nf">findBeanByName</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"memberRepository1"</span><span class="o">,</span> <span class="nc">MemberRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		
		<span class="n">assertThat</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">).</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="nc">MemberRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<h2 id="getbeansoftype-">getBeansOfType() 메서드</h2>
<h3 id="section-9">특정 타입을 모두 조회하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.member.MemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemoryMemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.DisplayName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.NoUniqueBeanDefinitionException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThrows</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ApplicationContextSameBeanFindTest</span> <span class="o">{</span>
	
	<span class="nc">AnnotationConfigApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">SameBeanConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	
	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"특정 타입을 모두 조회하기"</span><span class="o">)</span>
	<span class="kt">void</span> <span class="nf">findAllBeanByType</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">MemberRepository</span><span class="o">&gt;</span> <span class="n">beansOfType</span> <span class="o">=</span> 
				<span class="n">ac</span><span class="o">.</span><span class="na">getBeansOfType</span><span class="o">(</span><span class="nc">MemberRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

		<span class="c1">// beansOfType 에 담긴 모든 요소 출력</span>
		<span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">beansOfType</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"key = "</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">" value = "</span> <span class="o">+</span> <span class="n">beansOfType</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
		<span class="o">}</span>
		
		<span class="n">assertThat</span><span class="o">(</span><span class="n">beansOfType</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<p><br><br></p>
<h1 id="section-10">상속 관계 조회</h1>
<ul>
<li>부모 타입으로 조회하면, 자식 타입도 함께 조회한다.</li>
<li><code>Object</code> 타입으로 조회하면, 모든 스프링 빈을 조회하게 된다.
<ul>
<li><code>Object</code> 는 모든 자바 객체의 최고 부모이기 때문이다.</li>
</ul>
</li>
</ul>
<br>
<h2 id="section-11">전제</h2>
<ul>
<li><code>MemberRepository</code> 라는 인터페이스의 구현 클래스가 <code>MemoryMemberRepository</code> 클래스와 <code>DbMemberRepository</code> 클래스라고 하자.</li>
<li><code>MemoryMemberRepository</code>
<ul>
<li>memberRepository1 라는 이름으로 빈 등록되었다고 가정한다.</li>
</ul>
</li>
<li><code>DbMemberRepository</code>
<ul>
<li>memberRepository2 라는 이름으로 빈 등록되었다고 가정한다.</li>
</ul>
</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">SameBeanConfig</span> <span class="o">{</span>
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository1</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MemoryMemberRepository</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository2</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">DbMemberRepository</span><span class="o">();</span>
	<span class="o">}</span>	
<span class="o">}</span>
</code></pre></div></div>
<p><br><br></p>
<h2 id="section-12">부모 타입으로 조회</h2>
<h3 id="with-codegetbeancode">타입으로만 조회 with <code>getBean()</code></h3>
<ul>
<li>부모 타입으로 조회시, 자식이 둘 이상 있으면, 중복 오류가 발생한다.</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.discount.DiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.discount.FixDiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.discount.RateDiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberServiceImpl</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.DisplayName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.NoUniqueBeanDefinitionException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThrows</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ApplicationContextExtendsFindTest</span> <span class="o">{</span>

	<span class="nc">AnnotationConfigApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">TestConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"부모 타입으로 조회시, 자식이 둘 이상 있으면, 중복 오류가 발생한다"</span><span class="o">)</span>
	<span class="kt">void</span> <span class="nf">findBeanByParentTypeDuplicate</span><span class="o">()</span> <span class="o">{</span>
		<span class="c1">//DiscountPolicy bean = ac.getBean(DiscountPolicy.class);</span>
		
		<span class="n">assertThrows</span><span class="o">(</span><span class="nc">NoUniqueBeanDefinitionException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span>
		<span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">DiscountPolicy</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<h3 id="with-codegetbeancode-1">빈 이름과 타입으로 조회 with <code>getBean()</code></h3>
<ul>
<li>부모 타입으로 조회시, 자식이 둘 이상 있으면, 빈 이름까지 지정하면 된다.</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.discount.DiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.discount.FixDiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.discount.RateDiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberServiceImpl</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.DisplayName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.NoUniqueBeanDefinitionException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThrows</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ApplicationContextExtendsFindTest</span> <span class="o">{</span>

	<span class="nc">AnnotationConfigApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">TestConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"부모 타입으로 조회시, 자식이 둘 이상 있으면, 이름 지정하면 된다."</span><span class="o">)</span>
	<span class="kt">void</span> <span class="nf">findBeanByParentTypeBeanName</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"memberRepository1"</span><span class="o">,</span> <span class="nc">MemberRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">).</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="nc">MemberRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<h3 id="with-codegetbeansoftypecode">부모 타입으로 모두 조회 with <code>getBeansOfType()</code></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.discount.DiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.discount.FixDiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.discount.RateDiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberServiceImpl</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.DisplayName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.NoUniqueBeanDefinitionException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThrows</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ApplicationContextExtendsFindTest</span> <span class="o">{</span>

	<span class="nc">AnnotationConfigApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">TestConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"부모 타입으로 조회시, 자식이 둘 이상 있으면, 이름 지정하면 된다."</span><span class="o">)</span>
	<span class="kt">void</span> <span class="nf">findAllBeanByParentType</span><span class="o">()</span> <span class="o">{</span>

		<span class="c1">//MemberRepository 타입을 갖는 모든 빈 객체를 Map으로 반환받음</span>
		<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">MemberRepository</span><span class="o">&gt;</span> <span class="n">beansOfType</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBeansOfType</span><span class="o">(</span><span class="nc">MemberRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

		<span class="c1">//beansOfType에 들어있는 모든 요소 출력</span>
		<span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">beansOfType</span><span class="o">.</span><span class="na">keySet</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"key = "</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">" value = "</span> <span class="o">+</span> <span class="n">beansOfType</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
		<span class="o">}</span>

		<span class="n">assertThat</span><span class="o">(</span><span class="n">beansOfType</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<p><br><br></p>
<h2 id="section-13">특정 하위 타입으로 조회</h2>
<h3 id="with-codegetbeancode-2">특정 하위 타입으로 조회 with <code>getBean()</code></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.discount.DiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.discount.FixDiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.discount.RateDiscountPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.member.MemberServiceImpl</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.DisplayName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.NoUniqueBeanDefinitionException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThrows</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ApplicationContextExtendsFindTest</span> <span class="o">{</span>

	<span class="nc">AnnotationConfigApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">TestConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"부모 타입으로 조회시, 자식이 둘 이상 있으면, 이름 지정하면 된다."</span><span class="o">)</span>
	<span class="kt">void</span> <span class="nf">findBeanBySubType</span><span class="o">()</span> <span class="o">{</span>

		<span class="c1">//MemoryMemberRepository 타입으로 조회함</span>
		<span class="nc">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"memberRepository1"</span><span class="o">,</span> <span class="nc">MemoryMemberRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">).</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="nc">MemberRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<hr />
<br>
<p><a href="https://inf.run/pcN8"><img src="/assets/img/Inflearn_Spring_SpringCore/Logo.png" width="400px" height="250px"></a></p>
<ul>
<li><em>본 게시글은 김영한님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET