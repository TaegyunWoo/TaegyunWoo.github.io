I"ku<p><br/><br/></p>
<blockquote>
<p><a href="https://github.com/TaegyunWoo/algorithm-study/blob/main/src/main/java/dfs_bfs/DFS_MatrixGraph.java">소스코드: 인접행렬 방식</a><br />
<a href="https://github.com/TaegyunWoo/algorithm-study/blob/main/src/main/java/dfs_bfs/DFS_ListGraph.java">소스코드: 인접리스트 방식</a></p>
</blockquote>
<br/>
<h1 id="dfs--">DFS : 개념</h1>
<h2 id="section">개요</h2>
<h3 id="dfs">DFS란?</h3>
<ul>
<li>Depth First Search의 약자로, 깊이 우선 탐색 알고리즘이다.</li>
<li>그래프 구조에서 탐색을 위해 사용되는 탐색 알고리즘이다.</li>
<li>그래프의 모든 노드들을 방문(탐색)해야 한다.</li>
<li>특정한 경로로 탐색을 하다가 특정한 상황에서 최대한 깊숙이 들어가 노드를 방문한 후, 다시 돌아가 다른 경로로 탐색하는 알고리즘이다.</li>
</ul>
<h3 id="dfs---1">DFS 동작 과정</h3>
<ol>
<li>탐색 시작 노드를 스택에 삽입하고 방문 처리를 한다.</li>
<li>스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면 그 인접 노드를 스택에 넣고 방문 처리를 한다.<br />
방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다.</li>
<li>2번 과정을 더 이상 수행할 수 없을 때까지 반복한다.</li>
</ol>
<blockquote>
<p>DFS에서 인접 노드를 선택할 땐, 가장 낮은 번호를 갖는 노드를 최우선으로 선택하는 것이 좋다.</p>
</blockquote>
<h2 id="section-1">예시</h2>
<h3 id="section-2">예시에서 사용할 그래프 형태</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled14.jpg" alt="" /></p>
<blockquote>
<p><strong>8번 노드가 1번 노드가 아닌 2번 노드와 인접함에 주의하자!</strong><br />
(교재와 다르다.)</p>
</blockquote>
<h3 id="step-01">Step 01</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled01.jpg" alt="" /></p>
<h3 id="step-02">Step 02</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled.jpg" alt="" /></p>
<h3 id="step-03">Step 03</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled13.jpg" alt="" /></p>
<h3 id="step-04">Step 04</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled11.jpg" alt="" /></p>
<h3 id="step-05">Step 05</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled10.jpg" alt="" /></p>
<h3 id="step-06">Step 06</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled09.jpg" alt="" /></p>
<h3 id="step-07">Step 07</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled08.jpg" alt="" /></p>
<h3 id="step-08">Step 08</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled07.jpg" alt="" /></p>
<h3 id="step-09">Step 09</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled06.jpg" alt="" /></p>
<h3 id="step-10">Step 10</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled05.jpg" alt="" /></p>
<h3 id="step-11">Step 11</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled04.jpg" alt="" /></p>
<h3 id="step-12">Step 12</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled03.jpg" alt="" /></p>
<h3 id="step-13">Step 13</h3>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitled02.jpg" alt="" /></p>
<h3 id="section-3">결과</h3>
<ul>
<li>DFS 수행 결과, 아래 순서대로 탐색되었다.</li>
</ul>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 -&gt; 2 -&gt; 7 -&gt; 6 -&gt; 8 -&gt; 3 -&gt; 4 -&gt; 5
</code></pre></div></div>
<h3 id="section-4">특징</h3>
<ul>
<li>stack 대신 재귀 함수를 이용하여, DFS를 구현할 수 있다.</li>
</ul>
<h2 id="section-5">소스코드 - 인접리스트</h2>
<h3 id="dfs-">DFS 알고리즘</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DFS_ListGraph</span> <span class="o">{</span>
  <span class="c1">//리스트형 그래프</span>
  <span class="kd">private</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">graph</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visitedNode</span><span class="o">;</span> <span class="c1">//배열의 index == 노드번호</span>

  <span class="kd">private</span> <span class="nf">DFS_ListGraph</span><span class="o">()</span> <span class="o">{</span>

  <span class="o">}</span>

  <span class="kd">public</span> <span class="nf">DFS_ListGraph</span><span class="o">(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">graph</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numbersOfNode</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="o">;</span>
    <span class="n">visitedNode</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">numbersOfNode</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span> <span class="c1">//0번 index를 갖는 노드는 생략할 것이기 때문에</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">indexOfNowNode</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">//현재 방문한 노드(indexOfNowNode)를 방문 처리</span>
    <span class="n">visitedNode</span><span class="o">[</span><span class="n">indexOfNowNode</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

    <span class="c1">//현재 방문한 노드 출력</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">indexOfNowNode</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>

    <span class="c1">//현재 방문한 노드(indexOfNowNode)의 인접노드들</span>
    <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">nearNodesOfNowNode</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">indexOfNowNode</span><span class="o">);</span>

    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nearNodesOfNowNode</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="kt">int</span> <span class="n">indexOfNearNode</span> <span class="o">=</span> <span class="n">nearNodesOfNowNode</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
      <span class="k">if</span> <span class="o">(!</span><span class="n">visitedNode</span><span class="o">[</span><span class="n">indexOfNearNode</span><span class="o">])</span> <span class="o">{</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">indexOfNearNode</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>

  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<br/>
<h3 id="dfs---2">DFS 알고리즘 실행</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="cm">/**
   * DFS 실행 메서드
   */</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">numbersOfNode</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span> <span class="c1">//노드 총 개수</span>
    <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="c1">//그래프 초기화</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">numbersOfNode</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="n">graph</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
    <span class="o">}</span>

    <span class="c1">//------- 그래프 만들기 (노드는 1번부터 시작한다.) -----</span>
    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span> <span class="c1">//'1번 노드'와 인접한(연결된) 노드로 '2번 노드' 등록</span>
    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">//'1번 노드'와 인접한(연결된) 노드로 '3번 노드' 등록</span>

    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">//'2번 노드'와 인접한(연결된) 노드로 '1번 노드' 등록</span>
    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">7</span><span class="o">);</span> <span class="c1">//'2번 노드'와 인접한(연결된) 노드로 '7번 노드' 등록</span>
    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">8</span><span class="o">);</span> <span class="c1">//'2번 노드'와 인접한(연결된) 노드로 '8번 노드' 등록</span>

    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">3</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">//'3번 노드'와 인접한(연결된) 노드로 '1번 노드' 등록</span>
    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">3</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span> <span class="c1">//'3번 노드'와 인접한(연결된) 노드로 '4번 노드' 등록</span>
    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">3</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span> <span class="c1">//'3번 노드'와 인접한(연결된) 노드로 '5번 노드' 등록</span>

    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">4</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">//'4번 노드'와 인접한(연결된) 노드로 '3번 노드' 등록</span>
    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">4</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span> <span class="c1">//'4번 노드'와 인접한(연결된) 노드로 '5번 노드' 등록</span>

    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">5</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">//'5번 노드'와 인접한(연결된) 노드로 '3번 노드' 등록</span>
    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">5</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span> <span class="c1">//'5번 노드'와 인접한(연결된) 노드로 '4번 노드' 등록</span>

    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">6</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">7</span><span class="o">);</span> <span class="c1">//'6번 노드'와 인접한(연결된) 노드로 '7번 노드' 등록</span>

    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">7</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span> <span class="c1">//'7번 노드'와 인접한(연결된) 노드로 '2번 노드' 등록</span>
    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">7</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">6</span><span class="o">);</span> <span class="c1">//'7번 노드'와 인접한(연결된) 노드로 '6번 노드' 등록</span>
    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">7</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">8</span><span class="o">);</span> <span class="c1">//'7번 노드'와 인접한(연결된) 노드로 '8번 노드' 등록</span>

    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">8</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span> <span class="c1">//'8번 노드'와 인접한(연결된) 노드로 '2번 노드' 등록</span>
    <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">8</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="mi">7</span><span class="o">);</span> <span class="c1">//'8번 노드'와 인접한(연결된) 노드로 '7번 노드' 등록</span>

    <span class="c1">//----- 그래프 만들기 끝 -----</span>
    
    <span class="c1">//DFS 알고리즘 시작</span>
    <span class="n">DFS_ListGraph</span> <span class="n">dfs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DFS_ListGraph</span><span class="o">(</span><span class="n">graph</span><span class="o">,</span> <span class="n">numbersOfNode</span><span class="o">);</span>
    <span class="n">dfs</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">//루트 노드부터 시작</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<blockquote>
<p>본 소스코드의 <code>graph</code> 는 위 그림 예시에서 사용한 그래프와 동일한 것이다.</p>
</blockquote>
<br/>
<h3 id="section-6">출력결과</h3>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 2 7 6 8 3 4 5
</code></pre></div></div>
<br/>
<h3 id="section-7">소스코드 흐름</h3>
<ul>
<li>함수 호출스택을 통해, 소스코드가 어떻게 동작하는지 알아보자.</li>
</ul>
<p><img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitle15.jpg" alt="" />
<img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitle16.jpg" alt="" />
<img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitle17.jpg" alt="" />
<img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitle18.jpg" alt="" />
<img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitle25.jpg" alt="" />
<img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitle19.jpg" alt="" />
<img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitle20.jpg" alt="" />
<img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitle21.jpg" alt="" />
<img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitle22.jpg" alt="" />
<img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitle23.jpg" alt="" />
<img src="/assets/img/2022-01-07-ALGORITHM_DFSBFS_DFS/Untitle24.jpg" alt="" /></p>
<h2 id="section-8">소스코드 - 인접행렬</h2>
<h3 id="dfs--1">DFS 알고리즘</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DFS_MatrixGraph</span> <span class="o">{</span>
 <span class="kd">private</span> <span class="kt">int</span> <span class="n">numberOfNode</span><span class="o">;</span>
 <span class="kd">private</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">graph</span><span class="o">;</span> <span class="c1">//0행과 0열은 건너뛴다. (인접하다면 true)</span>
 <span class="kd">private</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visitedNode</span><span class="o">;</span>

 <span class="kd">private</span> <span class="nf">DFS_MatrixGraph</span><span class="o">()</span> <span class="o">{</span>
 <span class="o">}</span>

 <span class="kd">public</span> <span class="nf">DFS_MatrixGraph</span><span class="o">(</span><span class="kt">int</span> <span class="n">numberOfNode</span><span class="o">,</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">graph</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">this</span><span class="o">.</span><span class="na">numberOfNode</span> <span class="o">=</span> <span class="n">numberOfNode</span><span class="o">;</span>
  <span class="k">this</span><span class="o">.</span><span class="na">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="o">;</span> <span class="c1">//0행은 비어있어야 한다.</span>
  <span class="n">visitedNode</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">numberOfNode</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
 <span class="o">}</span>

 <span class="kd">public</span> <span class="kt">void</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">indexOfNowNode</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">//노드 방문</span>
  <span class="n">visitedNode</span><span class="o">[</span><span class="n">indexOfNowNode</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

  <span class="c1">//방문한 노드 출력</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">indexOfNowNode</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>

  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">numberOfNode</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
   <span class="c1">//현재 노드(indexOfNow)와 인접한(연결된) 노드라면</span>
   <span class="k">if</span> <span class="o">(</span><span class="n">graph</span><span class="o">[</span><span class="n">indexOfNowNode</span><span class="o">][</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
    <span class="c1">//방문하지 않은 노드라면</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">visitedNode</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
     <span class="n">solution</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
   <span class="o">}</span>
  <span class="o">}</span><span class="c1">//for문 종료</span>
  
 <span class="o">}</span>
 
<span class="o">}</span>
</code></pre></div></div>
<br/>
<h3 id="dfs---3">DFS 알고리즘 실행</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="cm">/**
   * DFS 실행 메서드
   */</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
   <span class="kt">int</span> <span class="n">numberOfNode</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>

   <span class="c1">//graph (true면 인접)</span>
   <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="o">{</span>
           <span class="o">{</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">},</span>
           <span class="o">{</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">},</span>
           <span class="o">{</span><span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">},</span>
           <span class="o">{</span><span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">},</span>
           <span class="o">{</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">},</span>
           <span class="o">{</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">},</span>
           <span class="o">{</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">},</span>
           <span class="o">{</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">},</span>
           <span class="o">{</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">}</span>
   <span class="o">};</span>

   <span class="n">DFS_MatrixGraph</span> <span class="n">dfs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DFS_MatrixGraph</span><span class="o">(</span><span class="n">numberOfNode</span><span class="o">,</span> <span class="n">graph</span><span class="o">);</span>
   <span class="n">dfs</span><span class="o">.</span><span class="na">solution</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<blockquote>
<p>본 소스코드의 <code>graph</code> 는 위 그림 예시에서 사용한 그래프와 동일한 것이다.</p>
</blockquote>
<ul>
<li>모든 첫번째 행과, 모든 첫번째 열은 false로 처리했다. (노드가 1부터 시작하므로)</li>
<li><code>graph[A][A]</code> 와 같이 자기자신을 의미하는 index의 경우, false로 처리했다.</li>
<li>true: 해당 노드끼리 인접한다.</li>
<li>false: 해당 노드끼리 인접하지 않는다.</li>
<li>예시
<ul>
<li><code>graph[4][5] = true</code> : ‘노드4’와 ‘노드5’가 인접한다.</li>
<li><code>graph[7][1] = false</code> : ‘노드7’과 ‘노드1’은 인접하지 않는다.</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-9">출력결과</h3>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 2 7 6 8 3 4 5
</code></pre></div></div>
<h3 id="section-10">소스코드 흐름</h3>
<blockquote>
<p>인접리스트 방식과 동일하다.</p>
</blockquote>
<h2 id="tip">Tip</h2>
<ul>
<li>그래프 탐색 문제가 <strong>인접</strong> 이 핵심 내용이라면, 주로 DFS를 사용한다.</li>
</ul>
<p><br><br></p>
<hr />
<br>
<div style="font-style: italic;color: gray;">
  <ul>
    <li>나동빈, 『이것이 코딩 테스트다』</li>
  </ul>
  본 게시글은 위 교재를 기반으로 정리한 글입니다.
</div>
:ET