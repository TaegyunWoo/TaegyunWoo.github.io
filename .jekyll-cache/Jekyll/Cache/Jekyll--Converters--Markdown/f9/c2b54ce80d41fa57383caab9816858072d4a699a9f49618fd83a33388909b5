I"<p><br/><br/></p>
<ul>
<li><strong><a href="https://github.com/TaegyunWoo/Spring-Test-Code-Example">예시 프로젝트 다운로드</a></strong></li>
<li>이전 게시글
<ul>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_JUnit5_SummaryAndBasicAnnotation">[JUnit 5] 개요 및 기본 애너테이션</a></li>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_JUnit5_BasicAssertions">[JUnit 5] 기본 Assertions</a></li>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_JUnit5_TimeAssertions">[JUnit 5] 시간에 따른 테스트</a></li>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_JUnit5_ConditionalAssertions">[JUnit 5] 조건에 따른 테스트</a></li>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_JUnit5_Tagging">[JUnit 5] 태깅과 필터링</a></li>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_JUnit5_CustomTag">[JUnit 5] 커스텀 태그</a></li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h1 id="section">테스트 반복하기</h1>
<h2 id="section-1">개요</h2>
<ul>
<li>JUnit 5에서 특정 테스트 메서드를 반복하여 실행할 수 있다.</li>
<li>반복 횟수 등을 지정할 수 있다.</li>
</ul>
<p><br/><br/></p>
<h2 id="coderepeatedtestcode-"><code>@RepeatedTest</code> 애너테이션</h2>
<h3 id="section-2">애너테이션 형식</h3>
<p><code>@RepeatedTest(name=&quot;반복테스트명&quot;, value=반복횟수)</code></p>
<br/>
<h3 id="section-3">속성</h3>
<ul>
<li><code>name</code>
<ul>
<li><strong>{displayName}</strong>
<ul>
<li><code>@DisplayName</code> 으로 설정한 이름을 출력한다.</li>
</ul>
</li>
<li><strong>{currentRepetition}</strong>
<ul>
<li>현재 반복횟수를 출력한다.</li>
</ul>
</li>
<li><strong>{totalRepetitions}</strong>
<ul>
<li>전체 반복횟수를 출력한다.</li>
</ul>
</li>
</ul>
</li>
<li><code>value</code>
<ul>
<li>반복 횟수를 설정한다.</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-4">기능</h3>
<ul>
<li>반복 횟수와 반복 테스트 이름을 설정한다.</li>
<li><strong><code>RepetitionInfo</code> 타입의 객체을 테스트 메서드의 매개변수로 받을 수 있다.</strong>
<ul>
<li><code>RepetitionInfo</code> 객체: 반복관련 정보가 담긴 객체</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-5">예시 코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;테스트 반복&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
</code></pre>
<p><span class="nd">@RepeatedTest</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">”{displayName}: 전체 {totalRepetitions} 중 {currentRepetition}번”</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">5</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">repeatTest</span><span class="o">(</span><span class="nc">RepetitionInfo</span> <span class="n">info</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“StudyTest.repeatTest”</span> <span class="o">+</span> <span class="n">info</span><span class="o">.</span><span class="na">getCurrentRepetition</span><span class="o">());</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div>
<br/></p>
<ul>
<li>
<p>출력결과</p>
<p><img src="/assets/img/2021-09-16-TestFramework_JUnit5_RepeatTest/Untitled%206.png" alt="Untitled" /></p>
</li>
</ul>
<p><br/><br/></p>
<h2 id="codeparameterizedtestcode--codevaluesourcecode-"><code>@ParameterizedTest</code> + <code>@ValueSource</code> 애너테이션</h2>
<h3 id="section-6">애너테이션 형식</h3>
<ul>
<li><code>@ParameterizedTest(name=&quot;반복테스트명&quot;)</code></li>
<li><code>@ValueSource(데이터타입s={값1, 값2, ...})</code></li>
</ul>
<br/>
<h3 id="section-7">속성</h3>
<ul>
<li><code>name</code>
<ul>
<li><strong>{displayName}</strong>
<ul>
<li><code>@DisplayName</code> 으로 설정한 이름을 출력한다.</li>
</ul>
</li>
<li><strong>{index}</strong>
<ul>
<li>현재 반복횟수를 출력한다.</li>
</ul>
</li>
<li><strong>{0}, {1}, …</strong>
<ul>
<li>매개변수로 전달받은 것들 중 해당되는 값</li>
<li>여러 종류의 매개변수를 전달받는다면 {n}으로 처리한다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-8">기능</h3>
<ul>
<li><code>@ValueSource</code> 로 설정한 값의 개수만큼 반복한다.</li>
<li><code>@ValueSource</code> 로 설정한 값을 테스트 메서드의 매개변수로 전달받는다.</li>
</ul>
<br/>
<h3 id="section-9">예시 코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;커스텀 타입 컨버터 + 매개변수 반복 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
</code></pre>
<p><span class="nd">@ParameterizedTest</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">”{displayName} 현재반복횟수={index}, 전달받은 매개변수값={0}”</span><span class="o">)</span>
<span class="nd">@ValueSource</span><span class="o">(</span><span class="n">strings</span> <span class="o">=</span> <span class="o">{</span><span class="s">“A”</span><span class="o">,</span> <span class="s">“B”</span><span class="o">,</span> <span class="s">“C”</span><span class="o">})</span>
<span class="kt">void</span> <span class="nf">paramRepeat</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“s = “</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div>
<br/></p>
<ul>
<li>
<p>출력결과</p>
<p><img src="/assets/img/2021-09-16-TestFramework_JUnit5_RepeatTest/Untitled%207.png" alt="Untitled" /></p>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-10">인자로 전달할 수 있는 소스 애너테이션</h2>
<ul>
<li>위 경우처럼, <code>@ValueSource</code> 애너테이션을 통해 매개변수에 값을 전달하는 방법 뿐만 아니라, 다른 애너테이션을 사용할 수 있다.</li>
<li>소스 애너테이션 종류
<ul>
<li><code>@ValueSource</code>
<ul>
<li>오직 한 종류의 인자만 전달할 수 있다.</li>
</ul>
</li>
<li><code>@NullSource</code>
<ul>
<li>매개변수에 <strong>null</strong> 을 넣은 테스트를 수행한다.</li>
<li>다른 소스 애너테이션과 조합하여 사용할 수 있다.</li>
</ul>
</li>
<li><code>@EmptySource</code>
<ul>
<li>매개변수에 <strong>빈 문자열</strong> 을 넣은 테스트를 수행한다.</li>
<li>다른 소스 애너테이션과 조합하여 사용할 수 있다.</li>
</ul>
</li>
<li><code>@NullAndEmptySource</code>
<ul>
<li>매개변수에 <strong>null과 빈 문자열</strong> 을 넣은 테스트를 수행한다.</li>
<li>다른 소스 애너테이션과 조합하여 사용할 수 있다.</li>
</ul>
</li>
<li><code>@CsvSource</code>
<ul>
<li><code>@CsvSource</code> 는 배열 형태의 문자열을 배열 형태로 받아서 여러 종류의 매개변수를 처리할 수 있다.</li>
<li><code>@CsvSource</code> + <code>ArgumentsAccessor 객체</code> 으로 사용하거나</li>
<li><code>@CsvSource</code> + <code>@AggregateWith</code> 으로 사용할 수 있다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<h3 id="codevaluesourcecode-"><code>@ValueSource</code> 애너테이션</h3>
<ul>
<li>
<p>오직 한 종류의 인자만 전달할 수 있다.</p>
</li>
<li>
<p>사용 예시</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;커스텀 타입 컨버터 + 매개변수 반복 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
</code></pre>
<p><span class="nd">@ParameterizedTest</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">”{displayName} 현재반복횟수={index}, 전달받은 매개변수값={0}”</span><span class="o">)</span>
<span class="nd">@ValueSource</span><span class="o">(</span><span class="n">strings</span> <span class="o">=</span> <span class="o">{</span><span class="s">“A”</span><span class="o">,</span> <span class="s">“B”</span><span class="o">,</span> <span class="s">“C”</span><span class="o">})</span>
<span class="kt">void</span> <span class="nf">paramRepeat</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“s = “</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div></p>
</li>
<li>
<p>결과</p>
<p><img src="/assets/img/2021-09-16-TestFramework_JUnit5_RepeatTest/Untitled%207.png" alt="Untitled" /></p>
</li>
</ul>
<br/>
<h3 id="codenullsourcecode-"><code>@NullSource</code> 애너테이션</h3>
<ul>
<li>
<p>매개변수에 <strong>null</strong> 을 넣은 테스트를 수행한다.</p>
</li>
<li>
<p>다른 소스 애너테이션과 조합하여 사용할 수 있다.</p>
</li>
<li>
<p>사용 예시</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
</code></pre>
<p><span class="nd">@ParameterizedTest</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">”{index}번째”</span><span class="o">)</span>
<span class="nd">@ValueSource</span><span class="o">(</span><span class="n">strings</span> <span class="o">=</span> <span class="o">{</span><span class="s">“A”</span><span class="o">,</span> <span class="s">“B”</span><span class="o">,</span> <span class="s">“C”</span><span class="o">})</span>
<span class="nd">@NullSource</span>
<span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
<span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“s = null”</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“s = “</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div></p>
</li>
<li>
<p>결과</p>
<p><img src="/assets/img/2021-09-16-TestFramework_JUnit5_RepeatTest/Untitled%208.png" alt="Untitled" /></p>
</li>
</ul>
<br/>
<h3 id="codeemptysourcecode-"><code>@EmptySource</code> 애너테이션</h3>
<ul>
<li>
<p>매개변수에 <strong>빈 문자열</strong> 을 넣은 테스트를 수행한다.</p>
</li>
<li>
<p>다른 소스 애너테이션과 조합하여 사용할 수 있다.</p>
</li>
<li>
<p>사용 예시</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
</code></pre>
<p><span class="nd">@ParameterizedTest</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">”{index}번째”</span><span class="o">)</span>
<span class="nd">@ValueSource</span><span class="o">(</span><span class="n">strings</span> <span class="o">=</span> <span class="o">{</span><span class="s">“A”</span><span class="o">,</span> <span class="s">“B”</span><span class="o">,</span> <span class="s">“C”</span><span class="o">})</span>
<span class="nd">@EmptySource</span>
<span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“s = “</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div></p>
</li>
<li>
<p>결과</p>
<p><img src="/assets/img/2021-09-16-TestFramework_JUnit5_RepeatTest/Untitled%209.png" alt="Untitled" /></p>
</li>
</ul>
<br/>
<h3 id="codenullandemptysourcecode-"><code>@NullAndEmptySource</code> 애너테이션</h3>
<ul>
<li>
<p>매개변수에 <strong>null과 빈 문자열</strong> 을 넣은 테스트를 수행한다.</p>
</li>
<li>
<p>다른 소스 애너테이션과 조합하여 사용할 수 있다.</p>
</li>
<li>
<p>사용 예시</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
</code></pre>
<p><span class="nd">@ParameterizedTest</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">”{index}번째”</span><span class="o">)</span>
<span class="nd">@ValueSource</span><span class="o">(</span><span class="n">strings</span> <span class="o">=</span> <span class="o">{</span><span class="s">“A”</span><span class="o">,</span> <span class="s">“B”</span><span class="o">,</span> <span class="s">“C”</span><span class="o">})</span>
<span class="nd">@NullAndEmptySource</span>
<span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
<span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“s = null”</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“s = “</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div></p>
</li>
<li>
<p>결과</p>
<p><img src="/assets/img/2021-09-16-TestFramework_JUnit5_RepeatTest/Untitled%2010.png" alt="Untitled" /></p>
</li>
</ul>
<br/>
<h3 id="codenullandemptysourcecode--1"><code>@NullAndEmptySource</code> 애너테이션</h3>
<ul>
<li>
<p>사용 예시</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
</code></pre>
<p><span class="nd">@ParameterizedTest</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">”{index}번째”</span><span class="o">)</span>
<span class="nd">@ValueSource</span><span class="o">(</span><span class="n">strings</span> <span class="o">=</span> <span class="o">{</span><span class="s">“A”</span><span class="o">,</span> <span class="s">“B”</span><span class="o">,</span> <span class="s">“C”</span><span class="o">})</span>
<span class="nd">@NullAndEmptySource</span>
<span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
<span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“s = null”</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“s = “</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div></p>
</li>
<li>
<p>결과</p>
<p><img src="/assets/img/2021-09-16-TestFramework_JUnit5_RepeatTest/Untitled%2010.png" alt="Untitled" /></p>
</li>
</ul>
<br/>
<h3 id="codecsvsourcecode--codeargumentsaccessorcode"><code>@CsvSource</code> 애너테이션, <code>ArgumentsAccessor객체</code></h3>
<ul>
<li><code>@CsvSource</code> 는 배열 형태의 문자열을 배열 형태로 받아서 여러 종류의 매개변수를 처리할 수 있다. 즉, 아래와 같다.
<ul>
<li><code>@CsvSource({&quot;1, '첫번째 반복'&quot;, &quot;2, '두번째 반복'&quot;, &quot;3, '세번째 반복'&quot;})</code></li>
</ul>
</li>
<li><strong><code>ArgumentsAccessor</code> 객체를 매개변수로 전달받아서, <code>@CsvSource</code> 로 전달한 값에 접근할 수 있다.</strong></li>
</ul>
<br/>
<ul>
<li>
<p>사용 예시</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;커스텀 타입 컨버터 + 매개변수 반복 4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
</code></pre>
<p><span class="nd">@ParameterizedTest</span>
<span class="nd">@CsvSource</span><span class="o">({</span><span class="s">“10, ‘자바’”</span><span class="o">,</span> <span class="s">“20, ‘공부’”</span><span class="o">})</span>
<span class="kt">void</span> <span class="nf">paramRepeatWithCsv2</span><span class="o">(</span><span class="nc">ArgumentsAccessor</span> <span class="n">argumentsAccessor</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">Study</span> <span class="n">study</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Study</span><span class="o">(</span><span class="n">argumentsAccessor</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">argumentsAccessor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“study = “</span> <span class="o">+</span> <span class="n">study</span><span class="o">);</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div></p>
<blockquote>
<p><code>Study</code> 클래스는 <a href="https://taegyunwoo.github.io/test-framework/TestFramework_JUnit5_SummaryAndBasicAnnotation#8">이전 게시글</a>이나 예시 프로젝트 참고</p>
</blockquote>
</li>
<li>
<p>결과</p>
<p><img src="/assets/img/2021-09-16-TestFramework_JUnit5_RepeatTest/Untitled%2011.png" alt="Untitled" /></p>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-11">인자 값 타입 변환</h2>
<h3 id="section-12">암묵적인 타입 변환</h3>
<ul>
<li>JUnit 5가 기본적으로 제공하는 타입 컨버터가 제공하는 기능이다.</li>
<li>어떤 타입을 어떻게 변환해줄까? <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-argument-conversion-implicit">(레퍼런스 참고)</a></li>
</ul>
<br/>
<h3 id="section-13">명시적인 타입 변환</h3>
<ul>
<li><code>SimpleArgumentConverter</code> 를 상속 받은 구현체를 만들어서 커스텀 타입 컨버트가 가능하다.</li>
<li><code>@ConvertWith</code> 애너테이션을 활용한다.</li>
</ul>
<br/>
<ul>
<li>
<p>예시) int → Study객체</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;커스텀 타입 컨버터 + 매개변수 반복 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
</code></pre>
<p><span class="nd">@ParameterizedTest</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">”{displayName}: 현재반복횟수={index}, 전달받은 매개변수값={0}”</span><span class="o">)</span>
<span class="nd">@ValueSource</span><span class="o">(</span><span class="n">ints</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">40</span><span class="o">})</span>
<span class="kt">void</span> <span class="nf">paramRepeatWithCustomTypeConvert</span><span class="o">(</span><span class="nd">@ConvertWith</span><span class="o">(</span><span class="nc">StudyConverter</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="nc">Study</span> <span class="n">study</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“study.getLimit() = “</span> <span class="o">+</span> <span class="n">study</span><span class="o">.</span><span class="na">getLimit</span><span class="o">());</span>
<span class="o">}</span></p>
<pre><code>&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StudyConverter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleArgumentConverter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentConversionException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Study&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;study&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Study&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
</code></pre>
<p><span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div></p>
<blockquote>
<p><code>Study</code> 클래스는 <a href="https://taegyunwoo.github.io/test-framework/TestFramework_JUnit5_SummaryAndBasicAnnotation#8">이전 게시글</a>이나 예시 프로젝트 참고</p>
</blockquote>
</li>
<li>
<p>결과</p>
<p><img src="/assets/img/2021-09-16-TestFramework_JUnit5_RepeatTest/Untitled%2012.png" alt="Untitled" /></p>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-14">인자 값 조합</h2>
<h3 id="section-15">기존 방식</h3>
<ul>
<li>기존에는 <code>ArgumentsAccessor객체</code> 를 매개변수로 전달받아서 인자값에 접근하였다.</li>
</ul>
<br/>
<h3 id="section-16">인자 값 조합 분리하기</h3>
<ul>
<li><code>@AggregateWith</code> 애너테이션과 <code>ArgumentsAggregator</code> 인터페이스를 사용하면 따로 조합할 수 있다.</li>
<li><strong>즉, <code>@AggregateWith</code> 를 사용하면 직접 ArgumentsAccessor 객체를 사용하지 않고, 원하는 타입으로 변환할 수 있다.</strong>
<ul>
<li>어떤 객체로 변환할 것인지는 static class에 따로 정의해야한다.</li>
<li>해당 static class는 <code>ArgumentsAggregator</code> 인터페이스를 implements 한다.</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p>사용 예시</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;커스텀 타입 컨버터 + 매개변수 반복 5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
</code></pre>
<p><span class="nd">@ParameterizedTest</span>
<span class="nd">@CsvSource</span><span class="o">({</span><span class="s">“10, ‘자바’”</span><span class="o">,</span> <span class="s">“20, ‘공부’”</span><span class="o">})</span>
<span class="kt">void</span> <span class="nf">paramRepeatWithCsv3</span><span class="o">(</span><span class="nd">@AggregateWith</span><span class="o">(</span><span class="nc">StudyAggregator</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="nc">Study</span> <span class="n">study</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">“study = “</span> <span class="o">+</span> <span class="n">study</span><span class="o">);</span>
<span class="o">}</span></p>
<pre><code>&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StudyAggregator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentsAggregator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aggregateArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArgumentsAccessor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParameterContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgumentsAggregationException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Study&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;study&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Study&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
</code></pre>
<p><span class="o">}</span>
</code></pre></div></div></p>
<blockquote>
<p><code>Study</code> 클래스는 <a href="https://taegyunwoo.github.io/test-framework/TestFramework_JUnit5_SummaryAndBasicAnnotation#8">이전 게시글</a>이나 예시 프로젝트 참고</p>
</blockquote>
</li>
<li>
<p>결과</p>
<p><img src="/assets/img/2021-09-16-TestFramework_JUnit5_RepeatTest/Untitled%2013.png" alt="Untitled" /></p>
</li>
</ul>
<br>
<hr />
<br>
<p><a href="https://inf.run/htNB"><img src="/assets/img/Inflearn_Java_Test/logo.png" width="400px" height="300px"></a></p>
<ul>
<li><em>본 게시글은 백기선님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET