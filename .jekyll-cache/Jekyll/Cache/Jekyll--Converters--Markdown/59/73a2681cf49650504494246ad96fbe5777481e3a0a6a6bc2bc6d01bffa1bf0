I"[0<p><br/><br/></p>
<h1 id="codespringboottestcode"><code>@SpringBootTest</code></h1>
<h2 id="section">개요</h2>
<h3 id="codespringboottestcode-"><code>@SpringBootTest</code> 애너테이션이란?</h3>
<ul>
<li>
<p><code>@SpringBootTest</code>는 통합 테스트를 제공하는 기본적인 스프링 부트 테스트 어노테이션이다.</p>
<blockquote>
<p>통합 테스트: DB 접근 등 복합적인 동작을 수행하는 행위에 대한 테스트</p>
</blockquote>
</li>
<li>
<p><code>@SpringBootTest</code> 어노테이션을 통해 스프링부트 어플리케이션 테스트에 필요한 거의 모든 의존성을 제공받을 수 있다.</p>
</li>
</ul>
<br/>
<h3 id="junit-4-codespringboottestcode-">JUnit 4에서 <code>@SpringBootTest</code> 사용하기</h3>
<ul>
<li>JUnit 4에서 <code>@SpringBootTest</code> 를 사용할 땐, <strong>반드시 <code>@RunWith(SpringRunner.class)</code> 를 사용해야한다.</strong></li>
</ul>
<br/>
<h3 id="junit-5-codespringboottestcode-">JUnit 5에서 <code>@SpringBootTest</code> 사용하기</h3>
<ul>
<li>JUnit 4의 경우와는 다르게, <code>@SpringBootTest</code> 만 사용해도 된다.</li>
<li>즉, <code>@ExtendWith(SpringExtension.class)</code> 를 작성할 필요가 없다.</li>
</ul>
<p><br/><br/></p>
<h2 id="codespringboottestcode--"><code>@SpringBootTest</code> 의 기능</h2>
<h3 id="section-1">프로퍼티 직접 추가</h3>
<ul>
<li><strong><code>@SpringBootTest</code> 가 제공하는 속성 <code>properties</code> 를 통해, 테스트 클래스에 특정 값을 전달해줄 수 있다.</strong></li>
<li>“key=value” 형식으로 설정한다.</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span><span class="o">(</span>
	<span class="n">properties</span> <span class="o">=</span> <span class="o">{</span>
		<span class="s">"my.value=MY_VALUE"</span><span class="o">,</span>
		<span class="s">"test=TEST"</span>
	<span class="o">}</span>
<span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
  <span class="nd">@Value</span><span class="o">(</span><span class="s">"${my.value}"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">a</span><span class="o">;</span> <span class="c1">// =&gt; MY_VALUE</span>

  <span class="nd">@Value</span><span class="o">(</span><span class="s">"${test}"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">b</span><span class="o">;</span> <span class="c1">// =&gt; TEST</span>

  <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"값 확인"</span><span class="o">)</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
	  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"a = "</span> <span class="o">+</span> <span class="n">a</span><span class="o">);</span>
	  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"b = "</span> <span class="o">+</span> <span class="n">b</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<br/>
<h3 id="section-2">스프링 설정 파일 변경</h3>
<ul>
<li>테스트 클래스는 기본적으로 <code>/src/main/resources/application.properties</code> 을 설정으로 사용한다.</li>
<li><strong><code>properties</code> 속성을 통해, 스프링의 설정파일을 <code>application.properties</code> 가 아닌 다른 것으로 설정할 수 있다.</strong></li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span><span class="o">(</span>
  <span class="n">properties</span> <span class="o">=</span> <span class="o">{</span>
    <span class="s">"spring.config.location=classpath:application-test.properties"</span>
	<span class="o">}</span>
<span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div>
<br/>
<h3 id="section-3">웹 테스트 환경 선택</h3>
<ul>
<li>테스트 클래스는 기본적으로 Mock 서블릿을 테스트 환경으로 선택한다.
<ul>
<li>Mock 서블릿이란
<ul>
<li>내장된 실제 서블릿 컨테이너가 아닌 가짜 서블릿</li>
</ul>
</li>
<li>Mock 서블릿을 사용하는 이유
<ul>
<li><strong>브라우저에서 요청과 응답을 의미하는 객체로서 Controller 테스트을 용이하게 해준다.</strong></li>
</ul>
</li>
<li><code>@AutoConfigureMockMvc</code>
<ul>
<li><code>@AutoConfigureMockMvc</code> 과 MockMvc을 함께 사용하면, 별도의 설정없이 MockMvc를 사용할 수 있다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li><strong><code>webEnviroment</code> 속성을 통해, 테스트 코드를 MockMvc로 구동할 것인지, 실제 MVC로 구동할 것인지 선택할 수 있다.</strong>
<ul>
<li><code>webEnviroment=WebEnvironment.Mock</code> ⇒ MockMvc</li>
<li><code>SpringBootTest.WebEnvironment.RANDOM_PORT</code> ⇒ 실제 내장 서블릿</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li><code>MockMvc</code> 객체의 메서드
<ul>
<li><code>perform()</code>
<ul>
<li>해당 메서드를 통해, 브라우저에서 서버에 URL 요청을 하듯 컨트롤러를 실행시킬 수 있다.</li>
<li><code>RequestBuilder</code> 객체를 인자로 받는다.</li>
<li><code>RequestBuilder</code> 객체는 <code>MockMvcRequestBuilder</code>의 정적 메소드를 이용해서 생성한다.</li>
<li><code>MockMvcRequestBuilder</code> 은 GET, POST, PUT, DELETE 요청 방식과 매핑되는 <code>get()</code>, <code>post()</code>, <code>put()</code>, <code>delete()</code> 메소드를 제공한다.</li>
</ul>
</li>
<li><code>andExpect()</code>
<ul>
<li><code>perform()</code> 을 통해 전송한 요청에 대한 응답을 검증한다.</li>
<li>응답 상태 코드 검증: <code>status()</code></li>
<li>뷰/리다이렉트 검증: <code>view()</code></li>
<li>모델 정보 검증: <code>model()</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><strong>테스트 환경을 MockMvc로 선택</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@AutoConfigureMockMvc</span>
<span class="nd">@SpringBootTest</span><span class="o">(</span>
  <span class="n">webEnvironment</span> <span class="o">=</span> <span class="nc">SpringBootTest</span><span class="o">.</span><span class="na">WebEnvironment</span><span class="o">.</span><span class="na">MOCK</span>
<span class="o">)</span>
<span class="kd">class</span> <span class="nc">ArticleMapperTest</span> <span class="o">{</span>

  <span class="nd">@Autowired</span>
  <span class="kd">private</span> <span class="nc">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/board/1"</span><span class="o">))</span>
        <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">());</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
</li>
</ul>
<br/>
<ul>
<li>
<p><strong>테스트 환경을 내부 서블릿(실제 MVC)로 선택</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span><span class="o">(</span>
  <span class="n">webEnvironment</span> <span class="o">=</span> <span class="nc">SpringBootTest</span><span class="o">.</span><span class="na">WebEnvironment</span><span class="o">.</span><span class="na">RANDOM_PORT</span>
<span class="o">)</span>
<span class="kd">class</span> <span class="nc">ArticleMapperTest</span> <span class="o">{</span>

  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="c1">//테스트코드</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
</li>
</ul>
<p><br/><br/></p>
<h2 id="codetransactionalcode-">참고: <code>@Transactional</code> 애너테이션</h2>
<h3 id="codetransactionalcode--1"><code>@Transactional</code> 애너테이션이란?</h3>
<ul>
<li>트랜잭션 테스트시, 테스트 데이터를 DB서버에 남기지 않도록 Rollback 시키는 애너테이션이다.</li>
<li><strong>RAMDOM_PORT 등을 통해 테스트 실행시, 별도의 쓰레드에서 작동하기 때문에 Rollback되지 않는다.</strong></li>
</ul>
<br/>
<h3 id="section-4">적용 코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@AutoConfigureMybatis</span>
<span class="nd">@SpringBootTest</span>
<span class="kd">class</span> <span class="nc">ArticleMapperTest</span> <span class="o">{</span>

  <span class="nd">@Autowired</span>
  <span class="kd">private</span> <span class="nc">ArticleMapper</span> <span class="n">articleMapper</span><span class="o">;</span>

  <span class="nd">@Transactional</span>
  <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"Insert &amp; Select 테스트"</span><span class="o">)</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Article</span> <span class="n">article</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Article</span><span class="o">();</span>
    <span class="n">article</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">"Test"</span><span class="o">);</span>
    <span class="n">article</span><span class="o">.</span><span class="na">setDateTime</span><span class="o">(</span><span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
    <span class="n">article</span><span class="o">.</span><span class="na">setWriter</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
    <span class="n">article</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="s">"Test Content"</span><span class="o">);</span>
    <span class="n">articleMapper</span><span class="o">.</span><span class="na">insertArticle</span><span class="o">(</span><span class="n">article</span><span class="o">);</span>

    <span class="nc">Article</span> <span class="n">selectArticle</span> <span class="o">=</span> <span class="n">articleMapper</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">article</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>

    <span class="n">assertEquals</span><span class="o">(</span><span class="n">article</span><span class="o">,</span> <span class="n">selectArticle</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<br>
<hr />
<br>
<ul>
<li><em>본 게시글은 갓대희님의 포스팅을 참고하여 작성한 글입니다.</em><br />
<a href="https://goddaehee.tistory.com/211">갓대희의 작은공간</a></li>
</ul>
:ET