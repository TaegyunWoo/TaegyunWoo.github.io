I"
!<p><br/><br/></p>
<h1 id="section">컴퓨터 기능</h1>
<h2 id="section-1">컴퓨터 구성 요소</h2>
<h3 id="section-2">컴퓨터 구성 요소와 상호 작용</h3>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2011.png" alt="Untitled" /></p>
<ul>
<li>Register
<ul>
<li><strong>PC</strong>
<ul>
<li>Program Counter</li>
<li>다음에 실행할 명령어의 주소를 저장하는 공간이다.</li>
</ul>
</li>
<li><strong>IR</strong>
<ul>
<li>Instruction Register</li>
<li>현재 실행 중인 명령어 자체를 저장하는 공간이다.</li>
</ul>
</li>
<li><strong>MAR</strong>
<ul>
<li>Memory Address Register</li>
<li>PC를 통해, 가져와야할 명령어의 주소나 단어(word)의 주소를 저장하는 공간이다.</li>
</ul>
</li>
<li><strong>MBR</strong>
<ul>
<li>Memory Buffer Register</li>
<li>MAR로 가져온 명령어 자체나 단어(word)를 저장하는 공간이다.</li>
</ul>
</li>
<li><strong>I/O AR</strong>
<ul>
<li>Input/Output Address Register</li>
<li>입출력 주소를 저장하는 공간이다.</li>
</ul>
</li>
<li><strong>I/O BR</strong>
<ul>
<li>Input/Output Buffer Register</li>
<li>입출력 버퍼이다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><strong>명령어 가져오는 과정</strong></p>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2012.png" alt="Untitled" /></p>
</li>
</ul>
<blockquote>
<p>시스템 버스 구분: ‘주소버스’, ‘데이터버스’, ‘제어버스’<br />
자세한 것은 나중에 설명한다.</p>
</blockquote>
<p><br/><br/></p>
<h2 id="section-3">컴퓨터의 기능</h2>
<h3 id="section-4">컴퓨터의 기본 기능</h3>
<ul>
<li>프로그램 실행 기능
<ul>
<li>프로그램은 기억장치에 저장된 기계명령어들로 구성되어 있다.</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-5">명령어 처리</h3>
<ul>
<li>
<p>명령어 사이클</p>
<ul>
<li><strong>인출 (Fetch)</strong>: 명령어 가져오기</li>
<li><strong>실행 (Execute)</strong>: 명령어 실행하기</li>
</ul>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2013.png" alt="Untitled" /></p>
</li>
</ul>
<br/>
<h3 id="section-6">명령어 인출과 실행 과정</h3>
<ol>
<li><strong>프로세서가 기억장치로부터 명령어를 인출한다.</strong>
<ul>
<li>PC(프로그램 카운터)가 다음에 인출할 명령어의 주소를 가지고 있다.</li>
<li>프로세서가 명령어를 인출한 뒤에, PC의 내용을 증가시켜 다음 명령어를 인출할 준비를 한다.</li>
</ul>
</li>
<li><strong>인출된 명령어를 프로세서 내부 레지스터에 적재한다.</strong>
<ul>
<li>내부 레지스터 == 명령어 레지스터 (IR: Instruction Register)</li>
</ul>
</li>
<li><strong>프로세서는 명령어를 해석하고, 그 결과에 따라 필요한 동작을 수행한다.</strong></li>
</ol>
<br/>
<h3 id="section-7">프로그램 실행 예시</h3>
<ul>
<li>
<p><strong>명령어 형식</strong></p>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2014.png" alt="Untitled" /></p>
<ul>
<li><strong>opcode</strong> : 명령어</li>
<li><strong>address</strong> : 연산될 데이터 주소</li>
<li><strong>operand</strong> : 연산될 데이터</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li><strong>프로그램 실행 예시</strong>
<ul>
<li>주어진 연산 코드
<ul>
<li>아래와 같이 연산 코드에 대한 명령어가 주어졌다고 가정하자.</li>
<li><strong>‘0001’</strong> or <strong>‘1’</strong>
<ul>
<li>메모리에서 데이터를 가져와 AC(누산기)에 로드한다.</li>
</ul>
</li>
<li><strong>‘0101’</strong> or <strong>‘5’</strong>
<ul>
<li>메모리에서 데이터를 가져와 AC(누산기)와 더하기 연산을 한다.</li>
</ul>
</li>
</ul>
</li>
<li><strong>실행 순서</strong>
<ol>
<li>
<p>Step 1</p>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2015.png" alt="Untitled" /></p>
<blockquote>
<p>AC : Accumulator (임시저장공간, 누산기)</p>
</blockquote>
</li>
<li>
<p>Step 2</p>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2016.png" alt="Untitled" /></p>
</li>
<li>
<p>Step 3</p>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2017.png" alt="Untitled" /></p>
</li>
<li>
<p>Step 4</p>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2018.png" alt="Untitled" /></p>
</li>
<li>
<p>Step 5</p>
<ul>
<li>생략..</li>
</ul>
</li>
<li>
<p>Step 6</p>
<ul>
<li>생략..</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-8">명령어 상태도</h3>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2019.png" alt="Untitled" /></p>
<ul>
<li><strong>Multiple Operands</strong>
<ul>
<li>명령어에 여러 operand의 주소가 있을 수 있다.</li>
<li>이것을 처리하는 것을 의미한다.</li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-9">인터럽트</h2>
<h3 id="section-10">인터럽트란?</h3>
<ul>
<li>프로세서를 일시적으로 방해하는 것이다.</li>
<li>인터럽트를 통해 프로세서의 처리 효율을 향상시킬 수 있다.</li>
</ul>
<br/>
<h3 id="section-11">인터럽트의 효용성</h3>
<ul>
<li>
<p>인터럽트가 없는 경우</p>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2020.png" alt="Untitled" /></p>
</li>
<li>
<p>인터럽트가 있는 경우</p>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2021.png" alt="Untitled" /></p>
</li>
</ul>
<br/>
<h3 id="section-12">인터럽트에 의한 제어권 이동 순서</h3>
<ol>
<li>현재 수행 중인 프로그램 실행을 중단하고, <strong>그 문맥(context)</strong> 를 저장한다.
<ul>
<li>다음 명령어의 주소(Program Counter의 현재 내용) 와 현재 동작과 관련된 데이터를 저장한다.</li>
</ul>
</li>
<li>프로그램 카운터(PC)에 인터럽트 처리기 루틴(ISR)의 시작주소를 세팅한다.
<ul>
<li>PC에는 항상 다음 명령어의 주소가 저장된다.</li>
<li>인터럽트 처리 명령어가 다음에 수행되어야한다.</li>
<li>따라서, PC에 인터럽트 처리 명령어의 주소(ISR의 시작주소)를 세팅한다.</li>
</ul>
</li>
<li>인터럽트를 처리한다.</li>
<li>문맥을 복원하고 인터럽트된 기존 프로그램을 다시 수행한다.</li>
</ol>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2022.png" alt="Untitled" /></p>
<br/>
<h3 id="section-13">인터럽트가 포함된 명령어 사이클 상태도</h3>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2023.png" alt="Untitled" /></p>
<br/>
<h3 id="section-14">다중 인터럽트</h3>
<ul>
<li>
<p>인터럽트 처리 중 다른 인터럽트가 발생하면 어떻게 처리할까?</p>
</li>
<li>
<p><strong>순차적 인터럽트 처리</strong></p>
<ul>
<li>인터럽트를 처리하고 있는 중에는 추가적인 인터럽트가 불가능하다.</li>
<li>나중에 발생한 인터럽트는 대기하다가, 프로세서가 인터럽트 가능 상태로 변경되면 처리된다.</li>
<li>장점
<ul>
<li>간단 명료하다</li>
<li>인터럽트들이 순차적으로 처리된다.</li>
</ul>
</li>
<li>단점
<ul>
<li>상대적 우선순위 또는 시간적 위급성을 고려하지 않는다.</li>
</ul>
</li>
</ul>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2024.png" alt="Untitled" /></p>
</li>
</ul>
<br/>
<ul>
<li>
<p><strong>우선 순위에 따른 인터럽트 처리</strong></p>
<ul>
<li>인터럽트의 우선 순위를 정하고, 그 순위가 높은 인터럽트를 먼저 처리한다.</li>
</ul>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2025.png" alt="Untitled" /></p>
<ul>
<li>
<p>예시</p>
<p><img src="/assets/img/2021-09-16-ComputerStructure_ComputerFunction/Untitled%2026.png" alt="Untitled" /></p>
</li>
</ul>
</li>
</ul>
<p><br><br></p>
<hr />
<br>
<div style="font-style: italic;color: gray;">
  <ul>
    <li>성결대학교 컴퓨터 공학과 최정열 교수님 (2021)</li>
    <li>William Stalling, 『컴퓨터시스템구조론(10판)』</li>
  </ul>
  본 게시글은 위 강의 및 교재를 기반으로 정리한 글입니다.
</div>
:ET