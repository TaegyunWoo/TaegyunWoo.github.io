I"W<p><br/><br/></p>
<h1 id="section">개요</h1>
<h2 id="section-1">스프링 컨테이너 생성 코드</h2>
<h3 id="section-2">생성 코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//스프링 컨테이너 생성</span>
<span class="nc">ApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>
<h3 id="section-3">설명</h3>
<ul>
<li>
<p><code>ApplicationContext</code></p>
<ul>
<li>이것을 스프링 컨테이너라 한다.</li>
<li>인터페이스이다.</li>
<li>스프링 컨테이너는 XML을 기반으로 만들 수 있고, 애노테이션 기반의 자바 설정 클래스로 만들 수 있다.</li>
</ul>
</li>
<li>
<p><code>AppConfig</code></p>
<ul>
<li>자바 설정 클래스를 의미한다.</li>
</ul>
<blockquote>
<p>자세한 것은 <a href="https://taegyunwoo.github.io/spring/SPRING_OCP_DIP">이전 게시글</a> 참고</p>
</blockquote>
</li>
<li>
<p><code>AnnotationConfigApplicationContext(AppConfig.class)</code></p>
<ul>
<li><code>AnnotationConfigApplicationContext</code> 는 <code>ApplicationContext</code> 의 구현체이다.</li>
<li>즉, <code>AppConfig</code> 클래스가 자바 설정 클래스의 역할을 수행하기 때문에, 자바 설정 클래스를 기반으로 스프링 컨테이너를 만들었다고 할 수 있다.</li>
</ul>
</li>
</ul>
<h1 id="section-4">스프링 컨테이너의 생성 과정</h1>
<h2 id="section-5">스프링 컨테이너 생성</h2>
<p><img src="/assets/img/2021-07-24-SPRING_Contatiner_Construct/Untitled%204.png" alt="스프링 컨테이너 생성" /></p>
<ul>
<li><code>new AnnotationConfigApplicationContext(AppConfig.class)</code></li>
<li>스프링 컨테이너를 생성할 때는 구성 정보를 지정해주어야 한다.</li>
<li><code>AppConfig.class</code> 를 구성 정보로 지정했다.</li>
</ul>
<h2 id="section-6">스프링 빈 등록</h2>
<p><img src="/assets/img/2021-07-24-SPRING_Contatiner_Construct/Untitled%205.png" alt="스프링 빈 등록" /></p>
<ul>
<li>스프링 컨테이너는 파라미터로 넘어온 <strong>설정 클래스 정보를 사용해서 스프링 빈을 등록</strong> 한다.</li>
<li>빈 이름
<ul>
<li>빈 이름은 메서드 이름을 사용한다.
<ul>
<li><code>@Bean</code> 을 사용하면 빈이름이 자동으로 메서드 이름으로 설정된다.</li>
</ul>
</li>
<li>빈 이름을 직접 부여할 수 도 있다.
<ul>
<li><code>@Bean(name=&quot;memberService&quot;)</code> 를 사용하면 빈이름을 직접 설정할 수 있다.</li>
</ul>
</li>
<li><strong>빈 이름은 항상 다른 이름을 부여해야 한다.</strong>
<ul>
<li>같은 이름 부여시, 다른 빈이 무시되거나, 기존 빈을 덮어버리는 등의 문제가 발생한다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="section-7">스프링 빈 의존관계 설정</h2>
<ul>
<li>
<p>준비</p>
<p><img src="/assets/img/2021-07-24-SPRING_Contatiner_Construct/Untitled%206.png" alt="준비" /></p>
</li>
<li>
<p>완료</p>
<p><img src="/assets/img/2021-07-24-SPRING_Contatiner_Construct/Untitled%207.png" alt="완료" /></p>
<ul>
<li>스프링 컨테이너는 설정 정보 (<code>AppConfig.class</code> ) 를 참고해서 의존관계를 주입한다. (<strong>DI</strong>)</li>
</ul>
<blockquote>
<p>스프링 자체는 원래 ‘빈생성’, ‘의존관계 주입’ 단계가 나누어져 있지만,<br />
자바 코드로 스프링 빈을 등록하면 생성자를 호출하면서 의존관계 주입도 한번에 처리된다.<br />
( <code>return new MemberServiceImpl( memberRepository() )</code> 에서 <code>MemberServiceImpl</code> 생성자와 <code>memberRepository()</code> 메서드가 같이 호출되기 때문에 )</p>
</blockquote>
</li>
</ul>
<br>
<hr />
<br>
<p><a href="https://inf.run/pcN8"><img src="/assets/img/Inflearn_Spring_SpringCore/Logo.png" width="400px" height="250px"></a></p>
<ul>
<li><em>본 게시글은 김영한님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET