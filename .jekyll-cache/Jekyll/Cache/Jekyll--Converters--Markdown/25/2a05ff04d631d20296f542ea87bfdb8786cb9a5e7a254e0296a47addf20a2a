I"ok<p><br/><br/></p>
<ul>
<li>이전 게시글
<ul>
<li><a href="https://taegyunwoo.github.io/jpa/JPA_Persistence1">[JPA] 영속성 관리 - 1</a></li>
</ul>
</li>
</ul>
<p>본 게시글은 직전 게시글인 ‘[JPA] 영속성 관리 - 1’ 게시글에 이어지는 내용을 설명합니다. 따라서, 해당 게시글을 아직 읽지 않으신 분은 해당 게시글을 먼저 읽어주시기 바랍니다.</p>
<p><br/><br/><br/></p>
<h1 id="section">영속성 관리</h1>
<h2 id="section-1">플러시</h2>
<h3 id="section-2">플러시란?</h3>
<ul>
<li><strong>플러시(Flush)는 영속성 컨텍스트의 변경 내용을 데이터베이스에 반영한다.</strong></li>
</ul>
<br/>
<h3 id="vs-">플러시 vs 커밋</h3>
<p>플러시에 대해 설명하기 전에, 커밋과의 차이점에 대해 간단히 알아보자.</p>
<ul>
<li><strong>Flush</strong>
<ul>
<li>영속성 컨텍스트의 변경 내용을 DB에 반영한다.</li>
<li><strong>아직 반영된 사항이 DB에서 확정된 것은 아니다!</strong></li>
<li><strong>즉, 어떤 것을 어떻게 변경할 것인지 DB에 알려주는 기능을 한다.</strong></li>
<li>따라서, 트랜잭션 중 Flush를 하는 것은 자연스러운 것이며, Flush해도 트랜잭션이 마무리되지 않는다.
<ul>
<li>그저 DB에 변경 내용을 알려주기만 하는 것이기 때문에, 트랜잭션은 아직 끝나지 않는다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li><strong>Commit</strong>
<ul>
<li>DB에 반영된 변경사항이 확정된다.</li>
<li><strong>즉, Flush를 통해 반영된 변경사항을 DB가 실제로 수행하도록 한다.</strong></li>
<li>트랜잭션을 Commit 하는 것은 트랜잭션을 DB에 적용하고, 트랜잭션을 끝낸다는 의미이다.</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-3">플러시 작동</h3>
<ol>
<li><strong>변경 감지(Dirty Checking)이 동작</strong>해서, 영속성 컨텍스트에 있는 모든 엔티티를 스냅샷과 비교하요 수정된 엔티티를 찾는다. 수정된 엔티티는 수정 쿼리를 만들어 ‘쓰기 지연 SQL 저장소’에 등록한다.</li>
<li>‘쓰기 지연 SQL 저장소’의 쿼리를 DB에 전송한다. <em>(등록, 수정, 삭제 쿼리)</em></li>
</ol>
<br/>
<h3 id="section-4">영속성 컨텍스트를 플러시하는 방법</h3>
<p>영속성 컨텍스트를 플러시하는 방법으로 아래 3가지가 존재한다.</p>
<ul>
<li><code>em.flush()</code> 를 직접 호출한다.</li>
<li>트랜잭션 커밋 시 플러시가 자동 호출된다.</li>
<li>JPQL 쿼리 실행 시 플러시가 자동 호출된다.</li>
</ul>
<p>지금부터 하나씩 자세히 알아보자</p>
<br/>
<h3 id="section-5">플러시 직접 호출</h3>
<ul>
<li>엔티티 매니저의 <code>flush()</code> 메서드를 직접 호출해서 영속성 컨텍스트를 강제로 플러시한다.</li>
<li>하지만, 아래 경우를 제외하고 거의 사용되지 않는다.
<ul>
<li>테스트</li>
<li>타 프레임워크 + JPA 사용시</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-6">트랜잭션 커밋 시 플러시 자동 호출</h3>
<ul>
<li>SQL 쿼리를 DB에 전달하지 않고, 커밋(commit)을 하면 어떠한 동작도 이루어지지 않는다.
<ul>
<li>변경 사항을 DB에 알려주지도 않고 변경 확정만 하는 꼴이다.</li>
</ul>
</li>
<li><strong>따라서, 트랜잭션을 커밋하기 전에, 꼭 플러시를 호출해서 영속성 컨텍스트의 변경 내용을 DB에 반영해야 한다.</strong></li>
<li><strong>JPA는 이런 문제를 예방하기 위해, 트랜잭션을 커밋할 때 플러시를 자동으로 호출한다.</strong></li>
</ul>
<br/>
<h3 id="jpql------">JPQL 쿼리 실행 시 플러시 자동 호출</h3>
<ul>
<li>
<p>JPQL이나 Criteria(추후 포스팅 예정) 같은 객체지향 쿼리를 호출할 때도 플러시가 실행된다.</p>
</li>
<li>
<p>왜 그럴까? 아래 예시코드를 보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">memberA</span><span class="o">);</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">memberB</span><span class="o">);</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">memberC</span><span class="o">);</span>

<span class="c1">//중간에 JPQL 실행</span>
<span class="n">query</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"select m from Member m"</span><span class="o">,</span> <span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
</code></pre></div></div>
<ul>
<li>엔티티 <code>memberA</code> , <code>memberB</code> , <code>memberC</code> 를 영속 상태로 만들었다.</li>
<li>해당 엔티티들은 영속성 컨텍스트에는 존재하지만, DB에는 아직 반영되지 않았다.</li>
<li><strong>이 상태에서 JPQL을 실행하면, JPQL이 SQL로 변환되어 DB에서 엔티티를 조회한다.</strong></li>
<li>그런데 <code>memberA</code>, <code>memberB</code> , <code>memberC</code> 는 아직 DB에 반영되지 않아 존재하지 않으므로, 쿼리 결과로 조회되지 않는다!</li>
<li><strong>따라서 쿼리를 실행하기 직전에 영속성 컨텍스트를 플러시해서 변경 내용을 DB에 반영해야 한다.</strong></li>
<li>JPA는 이런 문제를 예방하기 위해, JPQL을 실행할 때도 플러시를 자동 호출한다.</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-7">플러시 모드 옵션</h3>
<ul>
<li>
<p>엔티티 매니저에 플러시 모드를 직접 지정하려면 <code>javax.persistence.FlushModeType</code> 을 사용하면 된다.</p>
<ul>
<li><code>FlushModeType.AUTO</code>
<ul>
<li>커밋이나 쿼리를 실행할 때 플러시한다.</li>
<li>기본값이다.</li>
</ul>
</li>
<li><code>FlushModeType.COMMIT</code>
<ul>
<li>커밋할 때만 플러시한다.</li>
</ul>
</li>
</ul>
</li>
<li>
<p>플러시 모드 변경 예시</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">EntityManager</span> <span class="n">em</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
<span class="n">em</span><span class="o">.</span><span class="na">setFlushMode</span><span class="o">(</span><span class="nc">FlushModeType</span><span class="o">.</span><span class="na">COMMIT</span><span class="o">);</span> <span class="c1">//플러시 모드 직접 설정</span>
</code></pre></div></div>
</li>
<li>
<p><strong>하지만 대부분 AUTO 기본 설정을 그대로 사용한다.</strong></p>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-8">준영속</h2>
<h3 id="section-9">알아볼 내용</h3>
<ul>
<li>과거에 엔티티의 “비영속 → 영속 → 삭제 상태 변화”에 대해 자세히 알아보았었다.</li>
<li>이제, “영속 → 준영속 상태 변화”에 대해 알아보자.</li>
</ul>
<br/>
<h3 id="section-10">준영속이란?</h3>
<ul>
<li>영속 상태의 엔티티가 영속성 컨텍스트에서 분리된 것을 준영속 상태라고 한다.</li>
<li>따라서, 준영속 상태의 엔티티는 영속성 컨텍스트가 제공하는 기능을 사용할 수 없다.</li>
</ul>
<br/>
<h3 id="section-11">준영속 상태로 만드는 방법</h3>
<p>영속 상태의 엔티티를 준영속 상태로 만드는 방법에는 아래처럼 3가지의 방법이 존재한다.</p>
<ul>
<li><strong><code>em.detach(entity)</code></strong>
<ul>
<li>특정 엔티티만 준영속 상태로 전환한다.</li>
</ul>
</li>
<li><strong><code>em.clear()</code></strong>
<ul>
<li>영속성 컨텍스트를 완전히 초기화한다.</li>
</ul>
</li>
<li><strong><code>em.close()</code></strong>
<ul>
<li>영속성 컨텍스트를 종료한다.</li>
</ul>
</li>
</ul>
<p>지금부터 하나씩 자세히 알아보자.</p>
<br/>
<h3 id="codedetachcode">준영속 상태로 전환하기: <code>detach()</code></h3>
<ul>
<li>
<p><code>em.detach()</code> 메서드는 특정 엔티티를 준영속 상태로 만든다.</p>
</li>
<li>
<p>메서드 형식</p>
<ul>
<li><code>detach(영속상태_엔티티)</code></li>
</ul>
</li>
<li>
<p>예시 코드</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDetached</span><span class="o">()</span> <span class="o">{</span>
	<span class="o">...</span>
	<span class="c1">//회원 엔티티 생성</span>
	<span class="c1">//비영속 상태</span>
	<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
	<span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="s">"memberA"</span><span class="o">);</span>
	<span class="n">member</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"회원A"</span><span class="o">);</span>

	<span class="c1">//회원 엔티티 영속 상태</span>
	<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

	<span class="c1">//회원 엔티티를 영속성 컨텍스트에서 분리한다.</span>
	<span class="c1">//준영속 상태</span>
	<span class="n">em</span><span class="o">.</span><span class="na">detach</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

	<span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span> <span class="c1">//[트랜잭션-커밋]</span>
<span class="o">}</span>
</code></pre></div></div>
</li>
</ul>
<br/>
<ul>
<li>회원 엔티티(<code>member</code>)를 영속화한 다음 <code>em.detach(member)</code>를 호출한다.
<ul>
<li>이것은 <strong>영속성 컨텍스트에게 더는 해당 엔티티를 관리하지 말라는 것</strong>이다.</li>
</ul>
</li>
<li>해당 메서드를 호출하는 순간 1차 캐시부터 ‘쓰기 지연 SQL 저장소’까지 해당 엔티티를 관리하기 위한 모든 정보가 제거된다.</li>
</ul>
<br/>
<ul>
<li>
<p>영속성 컨텍스트 변화</p>
<ul>
<li>아래 그림이 위 예시코드에서 영속성 컨텍스트가 어떻게 변화하는지 나타낸 것이다.</li>
</ul>
<p><img src="/assets/img/2021-10-09-JPA_Persistence2/Untitled%2014.png" alt="Untitled" /></p>
<p><img src="/assets/img/2021-10-09-JPA_Persistence2/Untitled%2015.png" alt="Untitled" /></p>
</li>
</ul>
<br/>
<ul>
<li><strong>정리</strong>
<ul>
<li>영속상태: 영속성 컨텍스트로부터 관리되는 상태이다.</li>
<li>준영속상태: 영속성 컨텍스트로부터 분리된 상태이다.</li>
</ul>
</li>
</ul>
<br/>
<h3 id="codeclearcode">영속성 컨텍스트 초기화: <code>clear()</code></h3>
<ul>
<li><code>em.clear()</code> 은 영속성 컨텍스트를 초기화해서, 해당 영속성 컨텍스트의 모든 엔티티를 준영속 상태로 만든다.</li>
</ul>
<br/>
<ul>
<li>
<p>예시 코드</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//엔티티 조회</span>
<span class="c1">//영속 상태</span>
<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"memberA"</span><span class="o">);</span>

<span class="n">em</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span> <span class="c1">//영속성 컨텍스트 초기화</span>

<span class="c1">//준영속 상태에서 필드 변경 시도</span>
<span class="n">member</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"changeName"</span><span class="o">);</span>
</code></pre></div></div>
<ul>
<li>준영속 상태인 <code>member</code> 엔티티에 대해 필드 변경을 시도하였으므로, Dirty Checking이 작동하지도 않고, DB에 수정내용이 반영되지도 않는다.</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p>영속성 컨텍스트 변화</p>
<ul>
<li>아래 그림이 위 예시코드에서 영속성 컨텍스트가 어떻게 변화하는지 나타낸 것이다.</li>
</ul>
<p><img src="/assets/img/2021-10-09-JPA_Persistence2/Untitled%2016.png" alt="Untitled" /></p>
<p><img src="/assets/img/2021-10-09-JPA_Persistence2/Untitled%2017.png" alt="Untitled" /></p>
</li>
<li>
<p>영속성 컨텍스트에 있는 모든 것이 초기화되어 버렸다. ⇒ 이것은 영속성 컨텍스트를 제거하고 새로 만든 것과 같다.</p>
</li>
<li>
<p><strong>따라서, <code>memberA</code>, <code>memberB</code> 는 영속성 컨텍스트가 관리하지 않으므로, 준영속 상태이다.</strong></p>
</li>
</ul>
<br/>
<h3 id="codeclosecode">영속성 컨텍스트 종료: <code>close()</code></h3>
<ul>
<li>영속성 컨텍스트를 종료하면, 해당 영속성 컨텍스트가 관리하던 영속 상태의 엔티티가 모두 준영속 상태가 된다.</li>
</ul>
<br/>
<ul>
<li>
<p>예시 코드</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">closeEntityManager</span><span class="o">()</span> <span class="o">{</span>

	<span class="nc">EntityManagerFactory</span> <span class="n">emf</span> <span class="o">=</span> <span class="nc">Persistence</span><span class="o">.</span><span class="na">createEntityManagerFactory</span><span class="o">(</span><span class="s">"jpabook"</span><span class="o">);</span>
	<span class="nc">EntityManager</span> <span class="n">em</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
	<span class="nc">EntityTransaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">();</span>

	<span class="n">transaction</span><span class="o">.</span><span class="na">begin</span><span class="o">();</span> <span class="c1">//[트랜잭션 - 시작]</span>
	
	<span class="nc">Member</span> <span class="n">memberA</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"memberA"</span><span class="o">);</span>
	<span class="nc">Member</span> <span class="n">memberB</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"memberB"</span><span class="o">);</span>

	<span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span> <span class="c1">//[트랜잭션 - 커밋]</span>
	<span class="n">em</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">//영속성 컨텍스트 닫기 (종료)</span>
<span class="o">}</span>
</code></pre></div></div>
</li>
</ul>
<br/>
<ul>
<li>
<p>영속성 컨텍스트 변화</p>
<ul>
<li>아래 그림이 위 예시코드에서 영속성 컨텍스트가 어떻게 변화하는지 나타낸 것이다.</li>
</ul>
<p><img src="/assets/img/2021-10-09-JPA_Persistence2/Untitled%2018.png" alt="Untitled" /></p>
<p><img src="/assets/img/2021-10-09-JPA_Persistence2/Untitled%2019.png" alt="Untitled" /></p>
<ul>
<li>영속성 컨텍스트가 종료되어 더는 <code>memberA</code>, <code>memberB</code>가 관리되지 않는다.</li>
</ul>
</li>
</ul>
<blockquote>
<p>영속 상태의 엔티티는 주로 영속성 컨텍스트가 종료되면서 준영속 상태가 된다.<br />
개발자가 직접 준영속 상태로 만드는 일은 드물다.</p>
</blockquote>
<br/>
<h3 id="section-12">준영속 상태의 특징</h3>
<ul>
<li>
<p><strong>거의 비영속 상태에 가깝다</strong></p>
<ul>
<li>영속성 컨텍스트가 제공하는 어떠한 기능도 동작하지 않는다.</li>
</ul>
</li>
<li>
<p><strong>식별자 값을 가지고 있다</strong></p>
<ul>
<li>비영속 상태의 엔티티는 식별자 값이 없을 수도 있다.
<ul>
<li>예를 들어, <code>new 엔티티클래스()</code> 코드로 엔티티 생성시 <code>@Id</code> 가 적용된 필드의 값이 없는 상태이다.</li>
</ul>
</li>
<li><strong>하지만, 준영속 상태는 이미 한번 영속 상태였으므로 반드시 식별자 값을 가지고 있다.</strong></li>
</ul>
</li>
<li>
<p><strong>지연 로딩을 할 수 없다</strong></p>
<ul>
<li>지연 로딩은 실제 객체 대신 프록시 객체를 로딩해두고 해당 객체를 실제 사용할 때, 영속성 컨텍스트를 통해 데이터를 불러오는 방법이다.</li>
<li>하지만, 준영속 상태는 영속성 컨텍스트가 관리하지 않으므로 지연 로딩 시 문제가 발생한다.</li>
<li>지연 로딩에 대한 자세한 내용은 추후에 포스팅할 예정이다.</li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-13">병합</h2>
<h3 id="codemergecode">병합: <code>merge()</code></h3>
<ul>
<li>준영속 상태의 엔티티를 다시 영속 상태로 변경하려면 병합을 사용하면 된다.</li>
<li><code>merge()</code> 메서드는 준영속 상태의 엔티티를 받아서 그 정보로 <strong>새로운 영속 상태의 엔티티를 반환</strong>한다.</li>
<li>메서드 형식
<ul>
<li><code>merge(준영속_엔티티)</code></li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p>예시 코드</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExamMergeMain</span> <span class="o">{</span>

	<span class="nc">EntityManagerFactory</span> <span class="n">emf</span> <span class="o">=</span> <span class="nc">Persistence</span><span class="o">.</span><span class="na">createEntityManagerFactory</span><span class="o">(</span><span class="s">"jpabook"</span><span class="o">);</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">createMember</span><span class="o">(</span><span class="s">"memberA"</span><span class="o">,</span> <span class="s">"회원1"</span><span class="o">);</span>
		
		<span class="n">member</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"회원명 변경"</span><span class="o">);</span> <span class="c1">//준영속 상태에서 변경 시도</span>

		<span class="n">mergeMember</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">static</span> <span class="nc">Member</span> <span class="nf">createMember</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">EntityManager</span> <span class="n">em1</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
		<span class="nc">EntityTransaction</span> <span class="n">tx1</span> <span class="o">=</span> <span class="n">em1</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">();</span>
	
		<span class="n">tx1</span><span class="o">.</span><span class="na">begin</span><span class="o">();</span> <span class="c1">//[트랜잭션 - 시작]</span>
		
		<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
		<span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
		<span class="n">member</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>

		<span class="n">em1</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
		<span class="n">tx1</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span> <span class="c1">//[트랜잭션 - 커밋]</span>

		<span class="n">em1</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">//영속성 컨텍스트 종료</span>
		<span class="c1">//member는 준영속 상태의 엔티티가 된다. (영속성 컨텍스트가 종료되었으므로)</span>
		
		<span class="k">return</span> <span class="n">member</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">static</span> <span class="nc">Member</span> <span class="nf">mergeMember</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">EntityManager</span> <span class="n">em2</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
		<span class="nc">EntityTransaction</span> <span class="n">tx2</span> <span class="o">=</span> <span class="n">em2</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">();</span>
	
		<span class="n">tx2</span><span class="o">.</span><span class="na">begin</span><span class="o">();</span> <span class="c1">//[트랜잭션 - 시작]</span>
		
		<span class="c1">//전달받은 준영속 상태의 엔티티의 내용을 복사한 새 엔티티를 생성</span>
		<span class="c1">//새 엔티티를 새 영속성 컨텍스트(em2의)에 등록</span>
		<span class="nc">Member</span> <span class="n">mergeMember</span> <span class="o">=</span> <span class="n">em2</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
		
		<span class="n">tx2</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span> <span class="c1">//[트랜잭션 - 커밋]</span>

		<span class="n">em2</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">//영속성 컨텍스트 종료</span>
		<span class="c1">//member는 준영속 상태의 엔티티가 된다. (영속성 컨텍스트가 종료되었으므로)</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ol>
<li><code>member</code> 엔티티는 영속 상태였다가 영속성 컨텍스트1이 종료되면서 준영속 상태가 되었다. 따라서 <code>createMember()</code> 메서드는 준영속 상태의 <code>member</code> 엔티티를 반환한다.</li>
<li>준영속 상태인 <code>member</code> 엔티티를 관리하는 영속성 컨텍스트가 더는 존재하지 않으므로 수정 사항을 DB에 반영할 수 없다.</li>
<li>준영속 상태의 엔티티를 수정하려면 준영속 상태를 다시 영속 상태로 변경해야 한다. 이때 병합(<code>merge()</code>)를 사용한다.
<ul>
<li><strong>그러면 <code>member</code> 엔티티의 정보를 복사한 새로운 영속 상태의 엔티티가 반환된다.</strong></li>
<li><strong>즉, <code>member</code> 엔티티가 준영속 상태에서 영속 상태로 변경되는 것은 아니다.</strong></li>
</ul>
</li>
</ol>
</li>
</ul>
<br/>
<ul>
<li>
<p><code>merge()</code> 의 동작 방식</p>
<p><img src="/assets/img/2021-10-09-JPA_Persistence2/Untitled%2020.png" alt="Untitled" /></p>
<ol>
<li>
<p><code>merge()</code> 를 실행한다.</p>
</li>
<li>
<p>파라미터로 넘어온 <strong>준영속 엔티티의 식별자 값으로 1차 캐시에서 엔티티를 조회</strong>한다.</p>
<p>2-2. 만약 1차 캐시에 엔티티가 없으면 DB에서 엔티티를 조회하고 1차 캐시에 저장한다.</p>
</li>
<li>
<p><strong>조회한 영속 엔티티에 <code>member</code> 엔티티의 값을 채워 넣는다.</strong></p>
<ul>
<li>이때, 회원명이 변경된다!</li>
</ul>
</li>
<li>
<p><code>mergeMember</code> 를 반환한다.</p>
</li>
</ol>
</li>
<li>
<p>병합이 끝나고 <code>tx2.commit()</code> 을 호출해서 트랜잭션을 커밋했다. 이때 변경 감지 기능이 동작해서 변경 내용을 DB에 반영한다.</p>
</li>
<li>
<p><code>merge()</code> 는 파라미터로 넘어온 준영속 엔티티를 사용해서, 새롭게 병합된 영속 상태의 엔티티를 반환한다.</p>
<ul>
<li><strong>파라미터로 넘어온 엔티티(기존의 준영속 상태 엔티티)는 병합 후에도 준영속 상태로 남아있다!!</strong></li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-14">비영속 병합</h3>
<ul>
<li>
<p>병합은 비영속 엔티티도 영속 상태로 만들 수 있다.</p>
</li>
<li>
<p>예시 코드</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
<span class="nc">Member</span> <span class="n">newMember</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">member</span><span class="o">);</span> <span class="c1">//비영속 병합</span>
<span class="n">tx</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</code></pre></div></div>
</li>
</ul>
<p><br><br></p>
<hr />
<br>
<div style="font-style: italic;color: gray;">
  <ul>
    <li>김영한, 『자바 ORM 표준 JPA 프로그래밍』, 에이콘</li>
  </ul>
  본 게시글은 위 교재를 기반으로 정리한 글입니다.
</div>
:ET