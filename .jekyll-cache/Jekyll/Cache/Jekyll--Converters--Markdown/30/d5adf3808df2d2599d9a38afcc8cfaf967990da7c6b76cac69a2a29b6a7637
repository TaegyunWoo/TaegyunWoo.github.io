I"?P<p><br/><br/></p>
<ul>
<li>이전 게시글
<ol>
<li><a href="https://taegyunwoo.github.io/spring-mvc/SPRING_MVC_Validation">검증 - 기초</a></li>
<li><a href="https://taegyunwoo.github.io/spring-mvc/SPRING_MVC_ValidationAndMessage">검증 - 오류코드와 메시지처리</a></li>
<li><a href="https://taegyunwoo.github.io/spring-mvc/SPRING_MVC_ValidationAndController">검증 - 검증 로직과 컨트롤러 분리</a></li>
</ol>
</li>
</ul>
<p><br/><br/></p>
<h1 id="bean-validation">Bean Validation</h1>
<h2 id="section">개요</h2>
<p>검증에 대해 다룬 이전 게시글들에서 작성한 코드는 너무 복잡하다. 사실 따지고 보면, 특정 필드에 대한 검증 로직은 대부분 비어있는 값인지, 특정 크기를 넘는지와 같은 일반적인 로직이다. <strong>이런 일반적인 로직을 굳이 복잡하게 직접 구현해야할까?</strong></p>
<p>Bean Validation을 통해 이러한 문제를 쉽게 해결할 수 있다.</p>
<br/>
<h3 id="bean-validation-">Bean Validation 이란?</h3>
<ul>
<li>Bean Validation 은 특정한 구현체가 아닌, Bean Vaildation 2.0(JSR-380) 이라는 기술 표준이다.</li>
<li>즉, 검증 애너테이션과 여러 인터페이스의 모음이다.</li>
<li>Bean Validation 을 구현한 기술 중, 일반적으로 <strong>하이버네이트 Validator</strong> 를 사용한다. (ORM과는 관련이 없다.)</li>
<li><strong>도메인 모델에서 애너테이션을 통한 필드값 검증을 가능하게 해준다.</strong></li>
</ul>
<blockquote>
<p><a href="https://docs.jboss.org/hibernate/validator/6.2/reference/en-US/">하이버네이트 Validator의 검증 애너테이션 모음</a></p>
</blockquote>
<p><br/><br/></p>
<h2 id="bean-validation--1">Bean Validation 사용하기</h2>
<h3 id="section-1">검증 조건</h3>
<ul>
<li><strong><code>productName</code> 은 비어있으면 안된다. (필드에러)</strong></li>
<li><strong><code>productPrice</code> 는 null이면 안되고, 1000이상 10000이하 이다. (필드에러)</strong></li>
<li><strong><code>productQuantity</code> 는 null이면 안되고, 최대 100이다. (필드에러)</strong></li>
<li><strong><code>productQuantity</code> * <code>productPrice</code> 의 결과 값이 10000 이상여야 한다. (오브젝트에러)</strong></li>
</ul>
<br/>
<h3 id="bean-validation-1">스프링에서의 Bean Validation</h3>
<ul>
<li>
<p>스프링부트는 <code>spring-boot-starter-validation</code> 라이브러리를 넣으면 <strong>자동으로 Bean Validator를 인지하고 스프링에 통합</strong>한다.</p>
</li>
<li>
<p><code>LocalValidatorFactoryBean</code> 은 해당 라이브러리에서 사용되는 검증기 객체이다. <strong><code>@NotNull</code> 등과 같은 애너테이션을 보고 검증을 수행한다.</strong></p>
</li>
<li>
<p>스프링부트는 <code>LocalValidatorFactoryBean</code> 을 <strong>글로벌 검증기</strong>로 등록한다. 그렇기 때문에 모든 컨트롤러에 적용된다.</p>
<blockquote>
<p><a href="https://taegyunwoo.github.io/spring-mvc/SPRING_MVC_ValidationAndController#13">이전 게시글</a>에서, <code>@InitBinder</code> 를 통해 특정 컨트롤러에만 검증기를 적용하는 것과는 상반된다.</p>
</blockquote>
</li>
<li>
<p>글로벌 검증기로 등록되기 때문에 <strong><code>@Valid</code> 나 <code>@Validated</code> 만 적용하면 된다.</strong></p>
</li>
</ul>
<br/>
<h3 id="codebuildgradlecode-">의존관계(라이브러리) 추가: <code>build.gradle</code> 파일</h3>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>implementation 'org.springframework.boot:spring-boot-starter-validation'
</code></pre></div></div>
<blockquote>
<p><a href="https://start.spring.io/">https://start.spring.io/</a> 에서, Dependencies 에 Validation을 추가해도 된다. (새 프로젝트 시작시)</p>
</blockquote>
<br/>
<h3 id="codeerrorspropertiescode">에러 코드와 메시지 작성: <code>errors.properties</code></h3>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>priceAndQuantity=가격 * 수량은 {0}이상이여야 합니다.
</code></pre></div></div>
<br/>
<h3 id="bean-validator--codeproductcode-">Bean Validator 적용: <code>Product</code> 클래스</h3>
<ul>
<li>Bean Validator 는 필드에러를 처리하므로, 도메인 모델 클래스에 애너테이션을 적용해야한다.</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">prac.myPrac.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.hibernate.validator.constraints.Range</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.validation.constraints.Max</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.validation.constraints.NotBlank</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.validation.constraints.NotNull</span><span class="o">;</span>

<span class="cm">/**
 * 상품도메인
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>

    <span class="nd">@NotBlank</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">productName</span><span class="o">;</span>

    <span class="nd">@NotNull</span>
    <span class="nd">@Range</span><span class="o">(</span><span class="n">min</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">10000</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">productPrice</span><span class="o">;</span>

    <span class="nd">@NotNull</span>
    <span class="nd">@Max</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">productQuantity</span><span class="o">;</span>

	<span class="cm">/*
	 * 생성자, getter, setter 생략
	 */</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@NotBlank</code>
<ul>
<li>빈값 + 공백만 있는 경우를 허용하지 않는다.</li>
</ul>
</li>
<li><code>@NotNull</code>
<ul>
<li>null을 허용하지 않는다.</li>
</ul>
</li>
<li><code>@Range(min = 1000, max = 10000)</code>
<ul>
<li>범위 안의 값이어야 한다.</li>
</ul>
</li>
<li><code>@Max(100)</code>
<ul>
<li>최대 100까지만 허용한다.</li>
</ul>
</li>
</ul>
<br/>
<h3 id="codeproductcontrollercode-">컨트롤러: <code>ProductController</code> 클래스</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.validation.BindingResult</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.validation.annotation.Validated</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ModelAttribute</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PostMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">prac.myPrac.domain.Product</span><span class="o">;</span>

<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

	<span class="cm">/**
	 * 상품 폼 템플릿을 호출하는 메서드
	 */</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/product"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">viewForm</span><span class="o">(</span><span class="nd">@ModelAttribute</span><span class="o">(</span><span class="s">"product"</span><span class="o">)</span> <span class="nc">Product</span> <span class="n">product</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"productform"</span><span class="o">;</span>
    <span class="o">}</span>

	<span class="cm">/**
	 * 검증 메서드
	 * @Validated 를 통해 검증
	 */</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/product"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">validate</span><span class="o">(</span><span class="nd">@Validated</span> <span class="nd">@ModelAttribute</span><span class="o">(</span><span class="s">"product"</span><span class="o">)</span> <span class="nc">Product</span> <span class="n">product</span><span class="o">,</span> <span class="nc">BindingResult</span> <span class="n">bindingResult</span><span class="o">)</span> <span class="o">{</span>

		<span class="c1">//오브젝트에러 처리</span>
        <span class="kt">int</span> <span class="n">priceAndQuantity</span> <span class="o">=</span> <span class="n">product</span><span class="o">.</span><span class="na">getProductPrice</span><span class="o">()</span> <span class="o">*</span> <span class="n">product</span><span class="o">.</span><span class="na">getProductQuantity</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">priceAndQuantity</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">bindingResult</span><span class="o">.</span><span class="na">reject</span><span class="o">(</span><span class="s">"priceAndQuantity"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[]</span> <span class="o">{</span><span class="mi">10000</span><span class="o">},</span> <span class="kc">null</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">bindingResult</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="s">"productform"</span><span class="o">;</span>
        <span class="o">}</span>

		<span class="cm">/*
		 * 검증 성공시, 수행할 로직
		 */</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<br/>
<h3 id="codeproductformhtmlcode">뷰 템플릿: <code>productform.html</code></h3>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">xmlns:th=</span><span class="s">"http://www.thymeleaf.org"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;style&gt;</span>
        <span class="nc">.error-class</span> <span class="p">{</span>
            <span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;</span>상품 입력 폼<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;form</span> <span class="na">th:object=</span><span class="s">"${product}"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">th:if=</span><span class="s">"${#fields.hasGlobalErrors()}"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">th:each=</span><span class="s">"error : ${#fields.globalErrors()}"</span> <span class="na">th:text=</span><span class="s">"${error}"</span><span class="nt">&gt;</span>
            글로벌 오류 (오브젝트 오류)시, 출력되는 태그
        <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    상품이름: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">th:field=</span><span class="s">"*{productName}"</span> <span class="na">placeholder=</span><span class="s">"상품이름"</span> <span class="na">th:errorclass=</span><span class="s">"error-class"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">th:errors=</span><span class="s">"*{productName}"</span><span class="nt">&gt;</span>
        상품 이름 오류시, 출력되는 태그
    <span class="nt">&lt;/div&gt;</span> <span class="nt">&lt;br/&gt;</span>

    상품가격: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">th:field=</span><span class="s">"*{productPrice}"</span> <span class="na">placeholder=</span><span class="s">"상품가격"</span> <span class="na">th:errorclass=</span><span class="s">"error-class"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">th:errors=</span><span class="s">"*{productPrice}"</span><span class="nt">&gt;</span>
        상품 가격 오류시, 출력되는 태그
    <span class="nt">&lt;/div&gt;</span> <span class="nt">&lt;br/&gt;</span>

    상품개수: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">th:field=</span><span class="s">"*{productQuantity}"</span> <span class="na">placeholder=</span><span class="s">"상품개수"</span> <span class="na">th:errorclass=</span><span class="s">"error-class"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">th:errors=</span><span class="s">"*{productQuantity}"</span><span class="nt">&gt;</span>
        상품 개수 오류시, 출력되는 태그
    <span class="nt">&lt;/div&gt;</span> <span class="nt">&lt;br/&gt;</span>

    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>
<br/>
<h3 id="section-2">입력과 결과: 필드에러 1</h3>
<ul>
<li>
<p>검증할 조건: <code>productName</code> 은 비어있으면 안된다. (필드에러)</p>
</li>
<li>
<p>입력</p>
<p><img src="/assets/img/2021-08-14-SPRING_MVC_BeanValidation/Untitled%2012.png" alt="필드에러1 입력" /></p>
</li>
<li>
<p>결과</p>
<p><img src="/assets/img/2021-08-14-SPRING_MVC_BeanValidation/Untitled%2013.png" alt="필드에러1 결과" /></p>
</li>
</ul>
<br/>
<h3 id="section-3">입력과 결과: 필드에러 2</h3>
<ul>
<li>
<p>검증할 조건: <code>productPrice</code> 는 null이면 안되고, 1000이상 10000이하 이다. (필드에러)</p>
</li>
<li>
<p>입력</p>
<p><img src="/assets/img/2021-08-14-SPRING_MVC_BeanValidation/Untitled%2014.png" alt="필드에러2 입력" /></p>
</li>
<li>
<p>결과</p>
<p><img src="/assets/img/2021-08-14-SPRING_MVC_BeanValidation/Untitled%2015.png" alt="필드에러2 결과" /></p>
</li>
</ul>
<br/>
<h3 id="section-4">입력과 결과: 필드에러 3</h3>
<ul>
<li>
<p>검증할 조건: <code>productQuantity</code> 는 null이면 안되고, 최대 100이다. (필드에러)</p>
</li>
<li>
<p>입력</p>
<p><img src="/assets/img/2021-08-14-SPRING_MVC_BeanValidation/Untitled%2016.png" alt="필드에러3 입력" /></p>
</li>
<li>
<p>결과</p>
<p><img src="/assets/img/2021-08-14-SPRING_MVC_BeanValidation/Untitled%2017.png" alt="필드에러3 결과" /></p>
</li>
</ul>
<br/>
<h3 id="section-5">입력과 결과: 오브젝트에러</h3>
<ul>
<li>
<p>검증할 조건: <code>productQuantity</code> * <code>productPrice</code> 의 결과 값이 10000 이상여야 한다. (오브젝트에러)</p>
</li>
<li>
<p>입력</p>
<p><img src="/assets/img/2021-08-14-SPRING_MVC_BeanValidation/Untitled%2018.png" alt="오브젝트에러 입력" /></p>
</li>
<li>
<p>결과</p>
<p><img src="/assets/img/2021-08-14-SPRING_MVC_BeanValidation/Untitled%2019.png" alt="오브젝트에러 결과" /></p>
</li>
</ul>
<blockquote>
<p>오브젝트 오류는 컨트롤러에서 자체적으로 처리했다. 그 이유에 대해 따로 설명하도록 하겠다.</p>
</blockquote>
<p><br/><br/></p>
<h2 id="section-6">검증 순서</h2>
<ol>
<li><code>@ModelAttribute</code> : 각각의 필드에 타입 변환을 시도한다.
<ul>
<li>성공하면 다음으로</li>
<li>실패하면 <code>typeMismatch</code> 발생 후, 스프링이 <code>FieldError</code> 를 <code>BindingResult</code> 에 추가</li>
</ul>
</li>
<li>Validator 적용
<ul>
<li>위 예시코드에서는, <code>LocalValidatorFactoryBean</code> 이 적용됐다.</li>
</ul>
</li>
</ol>
<br/>
<h3 id="bean-validation--">Bean Validation 적용 조건</h3>
<ul>
<li>(타입오류 없이) 바인딩에 성공한 필드만 Bean Validation 가 적용된다.</li>
<li>왜냐하면, 일단 값이 정상적으로 들어와야 해당 값을 검증할 수 있기 때문이다.</li>
<li>예시
<ul>
<li><code>productName</code> 에 문자 “A” 입력 ⇒ 타입 변환 성공 ⇒ <code>productName</code> 필드에 beanValidation 적용</li>
<li><code>productPrice</code> 에 문자 “A” 입력 ⇒ (<code>@ModelAttribute</code> 에서) 타입 변환 실패 ⇒ <code>typeMismatch FieldError</code> 추가 ⇒ <code>price</code> 필드는 BeanValidation 적용 안됨</li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h2 id="bean-validation---1">Bean Validation 메시지 변경</h2>
<ul>
<li>Bean Validation을 적용하여 검증시, 기본적으로 제공되는 오류 메시지가 출력된다.</li>
<li>물론 변경할 수 있다.</li>
</ul>
<br/>
<h3 id="messagecodesresolver">MessageCodesResolver</h3>
<ul>
<li>
<p>Bean Validation도 MessageCodesResolver 를 통해 메시지 코드를 생성한다.</p>
</li>
<li>
<p>애너테이션 이름을 가지고 메시지 코드를 생성한다.</p>
</li>
<li>
<p>생성 예시: <code>@NotBlank</code></p>
<ol>
<li>NotBlank.객체이름.필드이름</li>
<li>NotBlank.필드이름</li>
<li>NotBlank.필드타입</li>
<li>NotBlank</li>
</ol>
</li>
<li>
<p>변경 예시</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#errors.properties 파일
NotBlank.product.productName=상품명은 필수입니다!
</code></pre></div></div>
</li>
</ul>
<blockquote>
<p><a href="https://taegyunwoo.github.io/spring-mvc/SPRING_MVC_ValidationAndMessage#17">이전 게시글</a>에서 MessageCodesResolver에 대해 자세히 다뤘으니 참고하자.</p>
</blockquote>
<br/>
<h3 id="beanvalidation---">BeanValidation가 메시지를 찾는 순서</h3>
<ol>
<li>생성된 메시지 코드 순서대로 <code>messageSource</code> 에서 찾기
<ul>
<li><code>messages.properties</code></li>
<li><code>errors.properties</code> 등</li>
</ul>
</li>
<li>애너테이션의 <code>message</code> 속성 사용
<ul>
<li><code>@NotBlank(message = &quot;공백일 수 없습니다!&quot;)</code></li>
</ul>
</li>
<li>라이브러리가 제공하는 기본 값 사용</li>
</ol>
<p><br/><br/></p>
<h2 id="section-7">오브젝트 에러 처리</h2>
<p>위 예시 코드의 컨트롤러 부분을 보자. <code>validate()</code> 메서드가 오브젝트 에러를 처리하는 로직이 들어있는 것을 확인할 수 있다. 보통 오브젝트 에러는 해당 예시처럼 처리한다. 왜냐하면, BeanValidation은 필드에러에 한정되어 검증하기 때문이다.</p>
<ul>
<li>필드에러 처리: BeanValidation</li>
<li>오브젝트에러 처리: 컨트롤러</li>
</ul>
<br>
<hr />
<br>
<p><a href="https://inf.run/YPER"><img src="/assets/img/Inflearn_Spring_MVC2/logo.png" width="400px" height="300px"></a></p>
<ul>
<li><em>본 게시글은 김영한님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET