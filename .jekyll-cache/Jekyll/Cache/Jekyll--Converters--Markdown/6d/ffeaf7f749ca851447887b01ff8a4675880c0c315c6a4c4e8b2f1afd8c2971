I"Ri<p><br/><br/></p>
<ul>
<li><strong><a href="https://github.com/TaegyunWoo/Spring-Test-Code-Example">예시 프로젝트 다운로드</a></strong></li>
</ul>
<blockquote>
<p>위 프로젝트를 참고하여 기본적인 웹 애플리케이션 코드를 꼭 확인하자!</p>
</blockquote>
<ul>
<li>이전 게시글
<ul>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_Mockito_Summary">[Mockito] Mockito 개요</a></li>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_Mockito_CreateMock">[Mockito] Mock 객체 만들기</a></li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h1 id="mock--stubbing-">Mock 객체 행동(stubbing) 제어하기</h1>
<h2 id="mock----">Mock 객체의 기본 행동 전략</h2>
<p>어떠한 행동도 정의되지 않은 Mock 객체의 기본 행동에 대해서 설명하겠다.</p>
<br/>
<h3 id="section">리턴값이 있는 메서드를 호출할 경우</h3>
<ul>
<li><code>mock.리턴값_있는_메서드()</code> 을 호출할 경우</li>
<li><strong><code>null</code> 을 반환한다.</strong></li>
<li><strong>리턴값이 Optional 인 경우, <code>Optional.empty</code> 를 반환한다.</strong></li>
</ul>
<br/>
<h3 id="section-1">리턴값이 없는 메서드를 호출할 경우</h3>
<ul>
<li><code>mock.리턴값_없는_메서드()</code> 을 호출할 경우</li>
<li><strong>예외를 던지지도 않고, 아무런 일도 발생하지 않는다.</strong></li>
</ul>
<h3 id="mock-----">Mock 객체의 프로퍼티 값에 접근할 경우</h3>
<ul>
<li><code>mock.프로퍼티</code> 에 접근할 경우</li>
<li><strong>mock 객체의 프로퍼티 중 기본 타입은 기본 Primitive 값을 갖는다.</strong>
<ul>
<li>String 형 → 빈문자열</li>
<li>int 형 → 0</li>
<li>etc …</li>
</ul>
</li>
<li><strong>mock 객체의 프로퍼티 중 컬렉션 타입은 빈 컬렉션을 갖는다.</strong></li>
</ul>
<p><br/><br/></p>
<h2 id="section-2">리턴값이 있는 메서드 조작</h2>
<h3 id="section-3">특정 매개변수에 따른 행동 조작: 특정 값 리턴하기</h3>
<ul>
<li>
<p><strong>특정한 매개변수를 받은 경우 특정한 값을 리턴하도록 mock 객체의 메서드를 조작할 수 있다.</strong></p>
</li>
<li>
<p>형식</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">when</span><span class="o">(</span><span class="n">mock객체</span><span class="o">.</span><span class="na">메서드</span><span class="o">(</span><span class="n">원하는_매개변수_값</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">원하는_리턴값</span><span class="o">);</span>
</code></pre></div></div>
</li>
<li>
<p>예시 코드</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.*;</span>
<span class="c1">//나머지 import 생략</span>

<span class="kd">class</span> <span class="nc">StudyServiceTest</span> <span class="o">{</span>

  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@Mock</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">,</span>
            <span class="nd">@Mock</span> <span class="nc">StudyRepository</span> <span class="n">studyRepository</span>
            <span class="o">)</span> <span class="o">{</span>
    <span class="nc">StudyService</span> <span class="n">studyService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StudyService</span><span class="o">(</span><span class="n">memberService</span><span class="o">,</span> <span class="n">studyRepository</span><span class="o">);</span>
    <span class="nc">Study</span> <span class="n">study</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Study</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="s">"java"</span><span class="o">);</span>
    <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"test@test.com"</span><span class="o">);</span>

    <span class="c1">//행동 정의</span>
    <span class="n">when</span><span class="o">(</span><span class="n">memberService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">1L</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member</span><span class="o">));</span> <span class="c1">//findByID 메서드의 인수가 1L일 때만 동작</span>
    
    <span class="n">studyService</span><span class="o">.</span><span class="na">createNewStudy</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="n">study</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><strong><code>memberService.findById()</code> 호출시, 매개변수가 <code>1L</code> 어어야만 <code>member</code> 객체를 반환한다.</strong></li>
</ul>
</li>
<li>
<p><strong>흐름</strong></p>
<ol>
<li>
<p><code>studyService.createNewStudy(1L, study)</code> 를 테스트 메서드에서 호출한다면</p>
</li>
<li>
<p>아래 그림의 빨간색 표시된 부분에서 (<code>StudyService</code> 클래스의 <code>createNewStudy</code> 메서드)</p>
<p><img src="/assets/img/2021-09-17-TestFramework_Mockito_Stubbing/Untitled.png" alt="Untitled" /></p>
</li>
<li>
<p>테스트 메서드에서 작성한 <code>member</code> 객체가 반환된다.</p>
</li>
</ol>
</li>
</ul>
<br/>
<h3 id="section-4">특정 매개변수에 국한되지 않는 행동 조작: 특정 값 리턴하기</h3>
<ul>
<li>
<p><strong>모든 매개변수에 대해 특정한 값을 리턴하도록 mock 객체의 메서드를 조작할 수 있다.</strong></p>
</li>
<li>
<p>형식</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">when</span><span class="o">(</span><span class="n">mock객체</span><span class="o">.</span><span class="na">메서드</span><span class="o">(</span><span class="n">any</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">원하는_리턴값</span><span class="o">);</span>
</code></pre></div></div>
</li>
<li>
<p>예시 코드</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.*;</span>
<span class="c1">//나머지 import 생략</span>

<span class="kd">class</span> <span class="nc">StudyServiceTest</span> <span class="o">{</span>

  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@Mock</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">,</span>
            <span class="nd">@Mock</span> <span class="nc">StudyRepository</span> <span class="n">studyRepository</span>
            <span class="o">)</span> <span class="o">{</span>
    <span class="nc">StudyService</span> <span class="n">studyService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StudyService</span><span class="o">(</span><span class="n">memberService</span><span class="o">,</span> <span class="n">studyRepository</span><span class="o">);</span>
    <span class="nc">Study</span> <span class="n">study</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Study</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="s">"java"</span><span class="o">);</span>
    <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"test@test.com"</span><span class="o">);</span>

    <span class="c1">//행동 정의</span>
    <span class="n">when</span><span class="o">(</span><span class="n">memberService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">any</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member</span><span class="o">));</span> <span class="c1">//findByID 메서드의 인수에 관계없이 동작</span>
    
    <span class="n">studyService</span><span class="o">.</span><span class="na">createNewStudy</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="n">study</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><strong><code>memberService.findById()</code> 호출시, 매개변수에 관계없이 <code>member</code> 객체를 반환한다.</strong></li>
</ul>
</li>
<li>
<p><strong>흐름</strong></p>
<ol>
<li>
<p><code>studyService.createNewStudy(1L, study)</code> 를 테스트 메서드에서 호출한다면</p>
</li>
<li>
<p>아래 그림의 빨간색 표시된 부분에서 (<code>StudyService</code> 클래스의 <code>createNewStudy</code> 메서드)</p>
<p><img src="/assets/img/2021-09-17-TestFramework_Mockito_Stubbing/Untitled.png" alt="Untitled" /></p>
</li>
<li>
<p>테스트 메서드에서 작성한 <code>member</code> 객체가 반환된다.</p>
<ul>
<li><strong><code>any()</code> 를 이용하여, 행동을 정의하면 모든 매개변수에 대해 작동한다.</strong></li>
</ul>
</li>
</ol>
</li>
</ul>
<br/>
<h3 id="section-5">특정 매개변수에 따른 행동 조작: 특정 예외 던지기</h3>
<ul>
<li>
<p><strong>특정한 매개변수를 받은 경우 특정 예외를 던지도록 mock 객체의 메서드를 조작할 수 있다.</strong></p>
</li>
<li>
<p>형식</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">when</span><span class="o">(</span><span class="n">mock객체</span><span class="o">.</span><span class="na">메서드</span><span class="o">(</span><span class="n">원하는_매개변수_값</span><span class="o">)).</span><span class="na">thenThrow</span><span class="o">(</span><span class="k">new</span> <span class="n">원하는_예외</span><span class="o">());</span>
</code></pre></div></div>
</li>
<li>
<p>예시 코드</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.*;</span>
<span class="c1">//나머지 import 생략</span>

<span class="kd">class</span> <span class="nc">StudyServiceTest</span> <span class="o">{</span>

  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@Mock</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">,</span>
            <span class="nd">@Mock</span> <span class="nc">StudyRepository</span> <span class="n">studyRepository</span>
            <span class="o">)</span> <span class="o">{</span>
    <span class="nc">StudyService</span> <span class="n">studyService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StudyService</span><span class="o">(</span><span class="n">memberService</span><span class="o">,</span> <span class="n">studyRepository</span><span class="o">);</span>
    <span class="nc">Study</span> <span class="n">study</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Study</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="s">"java"</span><span class="o">);</span>
    <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"test@test.com"</span><span class="o">);</span>

    <span class="c1">//행동 정의</span>
    <span class="n">when</span><span class="o">(</span><span class="n">memberService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">1L</span><span class="o">)).</span><span class="na">thenThrow</span><span class="o">(</span><span class="k">new</span> <span class="nc">RuntimeException</span><span class="o">());</span> <span class="c1">//findByID 메서드의 인수가 1L일 때만 RuntimeException 던지기</span>
    
    <span class="n">studyService</span><span class="o">.</span><span class="na">createNewStudy</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="n">study</span><span class="o">);</span> <span class="c1">//이 코드는 예외가 발생한다.</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><strong><code>memberService.findById()</code> 호출시, 매개변수가 <code>1L</code> 어어야만 <code>RuntimeException</code>를 반환한다.</strong></li>
</ul>
</li>
<li>
<p><strong>흐름</strong></p>
<ol>
<li>
<p><code>studyService.createNewStudy(1L, study)</code> 를 테스트 메서드에서 호출한다면</p>
</li>
<li>
<p>아래 그림의 빨간색 표시된 부분에서 (<code>StudyService</code> 클래스의 <code>createNewStudy</code> 메서드)</p>
<p><img src="/assets/img/2021-09-17-TestFramework_Mockito_Stubbing/Untitled.png" alt="Untitled" /></p>
</li>
<li>
<p>테스트 메서드에서 작성한 <code>RuntimeException</code> 이 발생한다.</p>
</li>
</ol>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-6">리턴값이 없는 메서드 조작</h2>
<h3 id="section-7">특정 예외 던지기</h3>
<ul>
<li>
<p><strong>리턴값이 없는 메서드가 호출되었을 때, 특정 예외를 던지도록 조작할 수 있다.</strong></p>
</li>
<li>
<p>형식</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">doThrow</span><span class="o">(</span><span class="k">new</span> <span class="n">원하는_예외</span><span class="o">()).</span><span class="na">when</span><span class="o">(</span><span class="n">mock객체</span><span class="o">).</span><span class="na">mock객체의_메서드</span><span class="o">(</span><span class="n">원하는_매개변수</span><span class="o">);</span>
</code></pre></div></div>
<blockquote>
<p>물론 <code>any()</code> 를 통해, 매개변수 상관없이 작동시킬 수도 있다.</p>
</blockquote>
</li>
<li>
<p>예시 코드</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.*;</span>
<span class="c1">//나머지 import 생략</span>

<span class="kd">class</span> <span class="nc">StudyServiceTest</span> <span class="o">{</span>

  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@Mock</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">,</span>
            <span class="nd">@Mock</span> <span class="nc">StudyRepository</span> <span class="n">studyRepository</span>
            <span class="o">)</span> <span class="o">{</span>
    <span class="nc">StudyService</span> <span class="n">studyService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StudyService</span><span class="o">(</span><span class="n">memberService</span><span class="o">,</span> <span class="n">studyRepository</span><span class="o">);</span>
    <span class="nc">Study</span> <span class="n">study</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Study</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="s">"java"</span><span class="o">);</span>
    <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"test@test.com"</span><span class="o">);</span>
    <span class="n">when</span><span class="o">(</span><span class="n">memberService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">1L</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member</span><span class="o">));</span> <span class="c1">//createNewStudy() 를 수행하기 위해 필요</span>

    <span class="c1">//행동 정의</span>
    <span class="n">doThrow</span><span class="o">(</span><span class="k">new</span> <span class="nc">RuntimeException</span><span class="o">()).</span><span class="na">when</span><span class="o">(</span><span class="n">memberService</span><span class="o">).</span><span class="na">notify</span><span class="o">(</span><span class="n">any</span><span class="o">());</span> <span class="c1">//notify 메서드의 인수에 상관없이 동작</span>
    
    <span class="n">studyService</span><span class="o">.</span><span class="na">createNewStudy</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="n">study</span><span class="o">);</span> <span class="c1">//이 코드는 예외가 발생한다.</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><strong><code>notify()</code> 메서드는 void형 메서드이다.</strong></li>
<li><strong><code>memberService.notify()</code> 호출시, 매개변수에 상관없이 <code>RuntimeException</code>를 반환한다.</strong></li>
</ul>
</li>
<li>
<p><strong>흐름</strong></p>
<ol>
<li>
<p><code>studyService.createNewStudy(1L, study)</code> 를 테스트 메서드에서 호출한다면</p>
</li>
<li>
<p>아래 그림의 빨간색 표시된 부분에서 (<code>StudyService</code> 클래스의 <code>createNewStudy</code> 메서드)</p>
<p><img src="/assets/img/2021-09-17-TestFramework_Mockito_Stubbing/Untitled%201.png" alt="Untitled" /></p>
</li>
<li>
<p>테스트 메서드에서 작성한 <code>RuntimeException</code> 이 발생한다.</p>
</li>
</ol>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-8">여러번 호출시 각각 다른 행동으로 조작</h2>
<h3 id="section-9">여러번 호출시 다르게 행동하도록 조작</h3>
<ul>
<li>
<p><strong>동일한 매개변수로 여러번 호출될 때, 각기 다르게 행동하도록 조작할 수 있다.</strong></p>
</li>
<li>
<p>형식</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">when</span><span class="o">(</span><span class="n">mock객체</span><span class="o">.</span><span class="na">메서드</span><span class="o">(</span><span class="n">원하는_매개변수_값</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">원하는_리턴값_1</span><span class="o">)</span> <span class="c1">//첫번째 호출시 동작</span>
					<span class="o">.</span><span class="na">thenThrow</span><span class="o">(</span><span class="k">new</span> <span class="n">원하는_예외</span><span class="o">())</span> <span class="c1">//두번째 호출시 동작</span>
					<span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">원하는_리턴값_2</span><span class="o">)</span> <span class="c1">//세번째 호출시 동작</span>
					<span class="o">...</span>
</code></pre></div></div>
</li>
<li>
<p>예시 코드</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.*;</span>
<span class="c1">//나머지 import 생략</span>

<span class="kd">class</span> <span class="nc">StudyServiceTest</span> <span class="o">{</span>

  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@Mock</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">,</span>
            <span class="nd">@Mock</span> <span class="nc">StudyRepository</span> <span class="n">studyRepository</span>
            <span class="o">)</span> <span class="o">{</span>
    <span class="nc">StudyService</span> <span class="n">studyService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StudyService</span><span class="o">(</span><span class="n">memberService</span><span class="o">,</span> <span class="n">studyRepository</span><span class="o">);</span>
    <span class="nc">Study</span> <span class="n">study</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Study</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="s">"java"</span><span class="o">);</span>
    <span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"test1@test.com"</span><span class="o">);</span>
    <span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">2L</span><span class="o">);</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"test2@test.com"</span><span class="o">);</span>

    <span class="c1">//행동 정의</span>
    <span class="n">when</span><span class="o">(</span><span class="n">memberService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">1L</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member1</span><span class="o">))</span> <span class="c1">//첫번째 호출시 동작</span>
                <span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member2</span><span class="o">))</span> <span class="c1">//두번째 호출시 동작</span>
                <span class="o">.</span><span class="na">thenThrow</span><span class="o">(</span><span class="k">new</span> <span class="nc">RuntimeException</span><span class="o">());</span> <span class="c1">//세번째 호출시 동작</span>

    <span class="n">studyService</span><span class="o">.</span><span class="na">createNewStudy</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="n">study</span><span class="o">);</span> <span class="c1">//1번째 동작</span>
    <span class="n">studyService</span><span class="o">.</span><span class="na">createNewStudy</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="n">study</span><span class="o">);</span> <span class="c1">//2번째 동작</span>
    <span class="n">studyService</span><span class="o">.</span><span class="na">createNewStudy</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="n">study</span><span class="o">);</span> <span class="c1">//3번째 동작 =&gt; 예외발생</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li>첫번째 동작: <code>thenReturn(Optional.of(member1))</code></li>
<li>두번째 동작: <code>thenReturn(Optional.of(member2))</code></li>
<li>세번째 동작: <code>thenThrow(new RuntimeException())</code></li>
</ul>
</li>
</ul>
<br>
<hr />
<br>
<p><a href="https://inf.run/htNB"><img src="/assets/img/Inflearn_Java_Test/logo.png" width="400px" height="300px"></a></p>
<ul>
<li><em>본 게시글은 백기선님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET