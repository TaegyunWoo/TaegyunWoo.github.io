I"Mg<p><br/><br/></p>
<h1 id="comparable-comparator">Comparable과 Comparator</h1>
<h2 id="section">개요</h2>
<h3 id="comparable">Comparable이란?</h3>
<ul>
<li>Comparable은 <code>java.lang</code>에 정의된 인터페이스이다.</li>
<li>Comparable은 <code>compareTo(Object o)</code> 메서드를 정의하고 있다.</li>
<li>컬렉션을 정렬하는데 필요한 메서드를 정의하고 있다.</li>
<li>Comparable 인터페이스를 구현하고 있는 클래스들은 같은 타입의 인스턴스끼리 서로 비교할 수 있는 클래스들, 주로 <code>Integer</code>와 같은 wrapper 클래스와 <code>String</code>, <code>Data</code>, <code>File</code> 과 같은 클래스들이 있다.</li>
<li>기본적으로 오름차순, 즉 작은 값에서부터 큰 값의 순으로 정렬되도록 구현되어 있다.</li>
<li><strong>따라서 Comparable 인터페이스를 구현한 클래스는 정렬이 가능하다는 것을 의미한다.</strong></li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparable</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<br/>
<h3 id="comparator">Comparator이란?</h3>
<ul>
<li>Comparator는 <code>java.util</code>에 정의된 인터페이스이다.</li>
<li>Comparator는 <code>compare(Object o1, Object o2)</code> 메서드를 정의하고 있다.</li>
<li>컬렉션을 정렬하는데 필요한 메서드를 정의하고 있다.</li>
<li>Comparable 인터페이스와 동일한 목적(객체 비교)를 갖는다.</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparator</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o1</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">o2</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<br/>
<h3 id="comparable-vs-comparator">Comparable VS Comparator</h3>
<ul>
<li>Comparable 인터페이스
<ul>
<li>기본 정렬기준을 구현하는데 사용한다.</li>
<li>비교할 객체에 기준을 <strong>내장(정의)</strong> 시키기 위한 인터페이스이다.</li>
<li>따라서 비교할 객체(클래스) 자체에 implement 해야한다.</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>Comparator 인터페이스
<ul>
<li>기본 정렬기준 외에 다른 기준으로 정렬하고자할 때 사용한다.</li>
<li>새로운 ‘비교 기준 객체’를 위한 인터페이스이다.</li>
<li>다른 정렬 기준이 필요한 곳에 직접 전달하여, 해당 기준(Comparator 객체)을 적용시킬 수 있다.</li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h2 id="section-1">구현 방법</h2>
<h3 id="section-2">예시 목표</h3>
<ul>
<li>예시를 통해, Comparator와 Comparable을 구현하는 방법을 알아보자.<br />
예시 목표는 아래와 같다.
<ul>
<li>Person 클래스의 인스턴스를 나이 오름차순으로 정렬하고자 한다.</li>
</ul>
</li>
<li>위 목표를 위해, Comparable 인터페이스나 Comparator 인터페이스를 사용할 수 있다.</li>
<li>계속해서 코드를 통해 알아보자.</li>
</ul>
<br/>
<h3 id="comparable--codecomparetoobject-ocode--">Comparable 인터페이스의 <code>compareTo(Object o)</code> 메서드 구현</h3>
<ul>
<li>
<p>Person 클래스의 인스턴스를 나이 오름차순으로 정렬하기 위해, Comparable 인터페이스를 사용하여 아래처럼 구현할 수 있다.</p>
</li>
<li>
<p><code>Person</code> 클래스</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="kd">implements</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
<p><span class="c1">//생성자, getter, setter 생략</span></p>
<p><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Person</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
<span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">&gt;</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="o">{</span>
<span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="o">{</span>
<span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="o">{</span>
<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div></p>
<ul>
<li>’매개변수로 전달받은 객체(<code>Person other</code>)’보다 ’현재 객체(<code>this</code>)’의 age 필드값이 더 크다면 양수를 반환해야 한다.</li>
<li>’매개변수로 전달받은 객체(<code>Person other</code>)’와 ’현재 객체(<code>this</code>)’의 age 필드값이 같다면 0을 반환해야 한다.</li>
<li>’매개변수로 전달받은 객체(<code>Person other</code>)’보다 ’현재 객체(<code>this</code>)’의 age 필드값이 더 작다면 음수를 반환해야 한다.</li>
</ul>
</li>
<li>
<p>결과 출력</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<pre><code>&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;홍길동&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;이순신&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;소년&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//자체 정렬 기준(compareTo 메서드) 사용&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
</code></pre>
<p><span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div></p>
<ul>
<li>결과
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>소년
홍길동
이순신
</code></pre></div></div>
</li>
</ul>
</li>
</ul>
<br/>
<h3 id="comparator--codecompareobject-o1-object-o2code--">Comparator 인터페이스의 <code>compare(Object o1, Object o2)</code> 메서드 구현</h3>
<ul>
<li>
<p>Person 클래스의 인스턴스를 나이 오름차순으로 정렬하기 위해, Comparator 인터페이스를 사용하여 아래처럼 구현할 수 있다.</p>
</li>
<li>
<p><code>Person</code> 클래스</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
<p><span class="c1">//생성자, getter, setter 생략</span>
<span class="o">}</span>
</code></pre></div></div></p>
<ul>
<li>따로 <code>정렬 기준 객체(Comparator 구현체)</code>를 만들어 사용하기 때문에, <code>Person</code> 클래스는 단순하다.</li>
</ul>
</li>
<li>
<p><code>PersonOrder</code> 클래스</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonOrder</span> <span class="kd">implements</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">Person</span> <span class="n">me</span><span class="o">,</span> <span class="nc">Person</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">me</span><span class="o">.</span><span class="na">age</span> <span class="o">&gt;</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">me</span><span class="o">.</span><span class="na">age</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">me</span><span class="o">.</span><span class="na">age</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
<li>구현 내용은 Comparable 인터페이스의 <code>compareTo</code> 메서드와 비슷하다.</li>
</ul>
</li>
<li>
<p>결과 출력</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<pre><code>&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;홍길동&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;이순신&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;소년&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Arrays.sort(ary);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* 위 코드는 오류가 발생한다.
* 왜냐하면, Person 클래스에 정렬 기준이 없기 때문이다.
*/&lt;/span&gt;


&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//새로운 정렬 기준(PersonOrder 클래스의 compare 메서드) 사용&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
</code></pre>
<p><span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div></p>
<ul>
<li>결과
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>소년
홍길동
이순신
</code></pre></div></div>
</li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-3">권장 사항</h3>
<ul>
<li>위에서 <code>Comparable</code> 과 <code>Comparator</code> 를 각각 사용하여, <code>Person</code> 객체를 정렬하였다.</li>
<li><code>Comparable</code> 과 <code>Comparator</code> 중 어떤 것을 사용해서 정렬하여도 상관없지만, 위 경우 <code>Comparable</code> 인터페이스를 구현하여 사용하는 것이 더욱 자연스럽다.</li>
<li><strong>왜냐하면 <code>Comparable</code> 인터페이스는 기본 정렬기준을 구현하는데 사용되기 때문이다.</strong></li>
<li>반면에, 만약 아래와 같이 <code>Comparable</code> 인터페이스를 구현한 상태에서 나이 내림차순으로 정렬을 하고 싶다면 어떻게 할까?
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="kd">implements</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
<p><span class="c1">//생성자, getter, setter 생략</span></p>
<p><span class="cm">/**</p>
<ul>
<li>기본적으로 나이 오름차순 정렬을 하도록 정의함.
*/</span>
<span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Person</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
<span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">&gt;</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="o">{</span>
<span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="o">{</span>
<span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="o">{</span>
<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span></li>
</ul>
<p><span class="o">}</span>
</code></pre></div></div></p>
</li>
<li>바로 이런 경우, <code>Comparator</code> 인터페이스 구현체를 사용하면 된다.
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonOrder</span> <span class="kd">implements</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="cm">/**
  * 나이 내림차순 정렬을 하도록 새로운 기준을 정의함.
  */</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">Person</span> <span class="n">me</span><span class="o">,</span> <span class="nc">Person</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">me</span><span class="o">.</span><span class="na">age</span> <span class="o">&gt;</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">me</span><span class="o">.</span><span class="na">age</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">me</span><span class="o">.</span><span class="na">age</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
</li>
<li>실행 코드
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Person</span> <span class="n">personA</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"홍길동"</span><span class="o">,</span> <span class="mi">15</span><span class="o">);</span>
<span class="nc">Person</span> <span class="n">personB</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"이순신"</span><span class="o">,</span> <span class="mi">29</span><span class="o">);</span>
<span class="nc">Person</span> <span class="n">personC</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"소년"</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">Person</span><span class="o">[]</span> <span class="n">ary</span> <span class="o">=</span> <span class="o">{</span><span class="n">personA</span><span class="o">,</span> <span class="n">personB</span><span class="o">,</span> <span class="n">personC</span><span class="o">};</span>
<p><span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">ary</span><span class="o">);</span> <span class="c1">//나이 오름차순 정렬 (기본 정렬)</span>
<span class="cm">/* 결과</p>
<ul>
<li>personC, personA, personB
*/</span></li>
</ul>
<p><span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">ary</span><span class="o">,</span> <span class="k">new</span> <span class="nc">PersonOrder</span><span class="o">());</span> <span class="c1">//나이 내림차순 정렬</span>
<span class="cm">/* 결과</p>
<ul>
<li>personB, personA, personC
*/</span>
</code></pre></div></div></li>
</ul>
</li>
</ul>
:ET