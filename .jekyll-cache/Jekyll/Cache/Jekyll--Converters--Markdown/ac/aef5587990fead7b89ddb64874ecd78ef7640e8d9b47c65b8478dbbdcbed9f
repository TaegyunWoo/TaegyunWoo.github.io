I"+)<p><br/><br/></p>
<ul>
<li>
<p><strong><a href="https://github.com/TaegyunWoo/Spring-Test-Code-Example">예시 프로젝트 다운로드</a></strong></p>
</li>
<li>
<p>이전 게시글</p>
<ul>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_Mockito_Summary">[Mockito] Mockito 개요</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>위 프로젝트를 참고하여 기본적인 웹 애플리케이션 코드를 꼭 확인하자!<br />
(<code>StudyService</code> , <code>MemberService</code>, <code>StudyRepository</code>)</p>
</blockquote>
<p><br/><br/></p>
<h1 id="mock--">Mock 객체 생성하기</h1>
<h2 id="section">개요</h2>
<h3 id="mock----">Mock 객체 생성 방법의 종류</h3>
<p>Mock 객체를 만드는 방법에는 총 2가지의 방법이 존재한다.</p>
<ul>
<li><code>Mockito.mock()</code> 메서드로 만드는 방법</li>
<li><code>@Mock</code> 애너테이션으로 만드는 방법</li>
</ul>
<br/>
<h3 id="mock---">Mock 객체가 필요한 경우</h3>
<ul>
<li>어떤 인터페이스의 구현체가 필요하지만, 아직 구현체를 작성하지 않은 경우</li>
<li>예시 프로젝트에서의 필요성
<ul>
<li>
<p><code>MemberService</code> 인터페이스만 존재하는 상태 (구현체 존재X)</p>
</li>
<li>
<p><code>StudyRepository</code> 인터페이스만 존재하는 상태 (구현체 존재X)</p>
</li>
<li>
<p><code>StudyService</code> 클래스의 생성자 형태</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StudyService</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">StudyRepository</span> <span class="n">studyRepository</span><span class="o">;</span>

	<span class="c1">//기본 생성자 생략</span>

	<span class="kd">public</span> <span class="nf">StudyService</span><span class="o">(</span><span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">,</span> <span class="nc">StudyRepository</span> <span class="n">studyRepository</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">MemberService</span> <span class="n">memberService</span> <span class="o">=</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">StudyRepository</span> <span class="n">studyRepository</span> <span class="o">=</span> <span class="nc">StudyRepository</span> <span class="n">studyRepository</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
</li>
<li>
<p><strong>이때, <code>StudyService</code> 클래스를 테스트 하고 싶다면?</strong></p>
<ol>
<li><code>StudyService</code> 클래스의 생성자를 통해 객체를 생성해야한다.</li>
<li>하지만, <code>MemberService</code> 와 <code>StudyRepository</code> 인터페이스만 존재하고 구현체가 존재하지 않는다.</li>
<li>이때 Mock 객체를 사용하면 된다! (즉, Mock 객체로 의존성을 주입한다.)</li>
</ol>
</li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h2 id="mock---codemockitomockcode">Mock 객체 생성: <code>Mockito.mock()</code></h2>
<h3 id="section-1">형식</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Mock객체로_만들_인터페이스</span> <span class="n">mock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">Mock객체로_만들_인터페이스</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>
<br/>
<h3 id="section-2">사용 예시</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.*;</span>
<span class="c1">//나머지 import 생략</span>

<span class="kd">class</span> <span class="nc">StudyServiceTest</span> <span class="o">{</span>

  <span class="cm">/**
   * Mockito.mock() 으로 mock 객체 만들기
   */</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">createStudyServiceWithMethod</span><span class="o">()</span> <span class="o">{</span>
    <span class="cm">/*
     StudyService 생성자의 인수로
     'MemberService'객체와, 'StudyRepository' 객체를 넣어야하지만
     현재 인터페이스만 존재하는 상황이다.
     따라서, mock 객체를 통해 StudyService 객체를 생성할 수 있다.
     */</span>
    <span class="nc">MemberService</span> <span class="n">memberService</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="nc">MemberService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="nc">StudyRepository</span> <span class="n">studyRepository</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="nc">StudyRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

		<span class="c1">//Mock 객체로 의존성이 주입되었다.</span>
    <span class="nc">StudyService</span> <span class="n">studyService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StudyService</span><span class="o">(</span><span class="n">memberService</span><span class="o">,</span> <span class="n">studyRepository</span><span class="o">);</span>
    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">studyService</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br/><br/></p>
<h2 id="mock---codemockcode">Mock 객체 생성: <code>@Mock</code></h2>
<h3 id="section-3">형식: 필드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ExtendWith</span><span class="o">(</span><span class="nc">MockitoExtension</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">테스트클래스</span> <span class="o">{</span>
	<span class="c1">//필드</span>
	<span class="nd">@Mock</span> <span class="n">Mock객체로_만들_인터페이스</span> <span class="n">mock</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@ExtendWith(MockitoExtension.class)</code> 로 Mockito 확장모델을 적용해야 <code>@Mock</code> 을 사용할 수 있다.</li>
</ul>
<br/>
<h3 id="section-4">형식: 메서드 매개변수</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ExtendWith</span><span class="o">(</span><span class="nc">MockitoExtension</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">테스트클래스</span> <span class="o">{</span>

	<span class="c1">//메서드 매개변수</span>
	<span class="nd">@Test</span>
	<span class="kt">void</span> <span class="n">테스트메서드</span><span class="o">(</span><span class="nd">@Mock</span> <span class="n">Mock객체로_만들_인터페이스</span> <span class="n">mock</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//테스트코드</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li>이것도 마찬가지로, <code>@ExtendWith(MockitoExtension.class)</code> 로 Mockito 확장모델을 적용해야 <code>@Mock</code> 을 사용할 수 있다.</li>
</ul>
<br/>
<h3 id="section-5">사용 예시</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.*;</span>
<span class="c1">//나머지 import 생략</span>

<span class="kd">class</span> <span class="nc">StudyServiceTest</span> <span class="o">{</span>

  <span class="cm">/**
   * @Mock 애너테이션으로 mock 객체 만들기
   */</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">createStudyServiceWithAnnotaion</span><span class="o">(</span><span class="nd">@Mock</span> <span class="nc">MemberService</span> <span class="n">memberServiceWithAnno</span><span class="o">,</span>
					<span class="nd">@Mock</span> <span class="nc">StudyRepository</span> <span class="n">studyRepositoryWithAnno</span>
									<span class="o">)</span> <span class="o">{</span>

    <span class="cm">/*
     StudyService 생성자의 인수로
     'MemberService'객체와, 'StudyRepository' 객체를 넣어야하지만
     현재 인터페이스만 존재하는 상황이다.
     따라서, mock 객체를 통해 StudyService 객체를 생성할 수 있다.
     */</span>
	<span class="c1">//Mock 객체로 의존성이 주입되었다.</span>
    <span class="nc">StudyService</span> <span class="n">studyService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StudyService</span><span class="o">(</span><span class="n">memberServiceWithAnno</span><span class="o">,</span> <span class="n">studyRepositoryWithAnno</span><span class="o">);</span>
    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">studyService</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<hr />
<br>
<p><a href="https://inf.run/htNB"><img src="/assets/img/Inflearn_Java_Test/logo.png" width="400px" height="300px"></a></p>
<ul>
<li><em>본 게시글은 백기선님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET