I"t2<p><br/><br/></p>
<ul>
<li><strong><a href="https://github.com/TaegyunWoo/Spring-Test-Code-Example">예시 프로젝트 다운로드</a></strong></li>
<li>이전 게시글
<ul>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_JUnit5_SummaryAndBasicAnnotation">[JUnit 5] 개요 및 기본 애너테이션</a></li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h1 id="assertions">기본 Assertions</h1>
<h2 id="section">개요</h2>
<h3 id="section-1">주요 메서드 종류</h3>
<ul>
<li><code>assertEquals(expected, actual)</code></li>
<li><code>assertNotNull(actual)</code></li>
<li><code>assertTrue(boolean)</code></li>
<li><code>assertAll(executables...)</code></li>
<li><code>assertThrows(expectedType, executable)</code></li>
<li><code>assertTimeout(duration, executable)</code></li>
</ul>
<blockquote>
<p><code>executable</code> 은 람다식으로 생각할 수 있다.</p>
</blockquote>
<br/>
<h3 id="message">테스트 실패시 출력할 Message</h3>
<ul>
<li>
<p><strong>각 메서드의 마지막 매개변수에 테스트 실패시 출력할 message를 전달할 수 있다.</strong></p>
</li>
<li>
<p>복잡한 메시지를 생성해야 하는 경우, <strong><code>Supplier&lt;String&gt;</code></strong> 을 사용하면 효율적이다.</p>
<ul>
<li><strong>문자열 연산자 <code>+</code> 를 사용하여 msg 만들기</strong>
<ul>
<li>테스트 실패 여부와 상관없이 무조건 msg에 대해 연산을 수행한다.</li>
</ul>
</li>
<li><strong><code>Supplier&lt;String&gt;</code> 을 사용하여 msg 만들기</strong>
<ul>
<li>테스트 실패시에만 연산된다. (람다식을 이용하므로)</li>
<li>따라서, 실패 msg가 필요할 때만 msg에 대해 연산을 수행한다.</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>Supplier&lt;String&gt;</code> 사용 예시</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">assertEquals</span><span class="o">(</span><span class="s">"A"</span><span class="o">,</span> <span class="n">객체</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
		<span class="c1">//복잡한 문자열 계산 로직</span>
		<span class="k">return</span> <span class="s">"복잡한 문자열"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">})</span>
</code></pre></div></div>
</li>
</ul>
<br/>
<h3 id="section-2">예시 코드 도메인</h3>
<ul>
<li>이제부터 설명할 예제 코드에 대한 전제조건은 이전 게시글을 참고하면 된다.
<ul>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_JUnit5_SummaryAndBasicAnnotation#7">전제조건</a></li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h2 id="codeassertequalscode-"><code>assertEquals</code> 메서드</h2>
<h3 id="section-3">메서드 형식</h3>
<p><code>assertEquals(기대하는값, 실제값)</code></p>
<h3 id="section-4">기능</h3>
<ul>
<li>‘기대하는값’ 과 ‘실제값’ 이 동일한 값을 갖는지 확인한다.</li>
<li>서로 다른 값이라면, 테스트에 실패한다.</li>
<li><strong>완벽히 동일한 객체, 즉 주소값이 같은 객체인지 확인하려면 <code>assertSame()</code> 을 사용해야 한다.</strong></li>
</ul>
<h3 id="section-5">예시 코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
</code></pre>
<p><span class="kt">void</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
<span class="nc">Study</span> <span class="n">study</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Study</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="n">assertEquals</span><span class="o">(</span><span class="nc">StudyStatus</span><span class="o">.</span><span class="na">DRAFT</span><span class="o">,</span> <span class="n">study</span><span class="o">.</span><span class="na">getStudyStatus</span><span class="o">(),</span> <span class="k">new</span> <span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>
<span class="nd">@Override</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
<span class="k">return</span> <span class="s">“study 객체 생성시, 상태는 DRAFT이어야 한다.”</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">);</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div></p>
<p><br/><br/></p>
<h2 id="codeassertnotnullcode-"><code>assertNotNull</code> 메서드</h2>
<h3 id="section-6">메서드 형식</h3>
<p><code>assertNotNull(실제값)</code></p>
<br/>
<h3 id="section-7">기능</h3>
<ul>
<li>‘실제값’ 이 null 이 아닌지 확인한다.</li>
<li>null이라면, 테스트에 실패한다.</li>
</ul>
<br/>
<h3 id="section-8">예시 코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
</code></pre>
<p><span class="kt">void</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
<span class="nc">Study</span> <span class="n">study</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Study</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="n">assertNotNull</span><span class="o">(</span><span class="n">study</span><span class="o">);</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div></p>
<p><br/><br/></p>
<h2 id="codeassertthrowscode-"><code>assertThrows</code> 메서드</h2>
<h3 id="section-9">메서드 형식</h3>
<p><code>assertThrows(예외클래스.class, () -&gt; {예외가 발생하는 코드})</code></p>
<br/>
<h3 id="section-10">기능</h3>
<ul>
<li>람다식이 해당 예외클래스를 던지면 테스트가 성공한다.</li>
<li>람다식이 해당 예외클래스를 던지지 않으면, 테스트가 실패한다.</li>
</ul>
<br/>
<h3 id="section-11">예시 코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
</code></pre>
<p><span class="kt">void</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
<span class="n">assertThrows</span><span class="o">(</span><span class="nc">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
<span class="c1">//RuntimeException이 발생하는 코드</span>
<span class="o">});</span>
<span class="o">}</span></p>
<p><span class="o">}</span>
</code></pre></div></div></p>
<p><br/><br/></p>
<h2 id="codeassertallcode-"><code>assertAll</code> 메서드</h2>
<h3 id="section-12">메서드 형식</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">assertAll</span><span class="o">(</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">assert문_1</span><span class="o">,</span>
			<span class="o">()</span> <span class="o">-&gt;</span> <span class="n">assert문_2</span><span class="o">,</span>
			<span class="o">()</span> <span class="o">-&gt;</span> <span class="n">assert문_3</span><span class="o">,</span> <span class="o">...)</span>
</code></pre></div></div>
<br/>
<h3 id="section-13">기능</h3>
<ul>
<li>매개변수로 전달한 assert문들을 모두 수행한다.</li>
<li>assertAll을 사용하지 않고 여러 assert 문 수행시
<ul>
<li><strong>어떤 assert 문이 실패하면 나머지 assert 문이 수행되지 않는다.</strong></li>
</ul>
</li>
<li>assertAll을 사용하여 여러 assert 문 수행시
<ul>
<li><strong>어떤 assert 문이 실패해도 나머지 assert 문이 수행된다.</strong></li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-14">예시 코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//import 생략</span>
<p><span class="kd">class</span> <span class="nc">StudyTest</span> <span class="o">{</span></p>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
</code></pre>
<p><span class="kt">void</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
<span class="nc">Study</span> <span class="n">study</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Study</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span></p>
<pre><code>	&lt;span class=&quot;n&quot;&gt;assertAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assertNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StudyStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DRAFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStudyStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;study 객체 생성시, 상태는 DRAFT이어야 한다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLimit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;study 객체의 limit 값은 0보다 커야한다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
</code></pre>
<p><span class="o">}</span>
</code></pre></div></div>
<br></p>
<hr />
<br>
<p><a href="https://inf.run/htNB"><img src="/assets/img/Inflearn_Java_Test/logo.png" width="400px" height="300px"></a></p>
<ul>
<li><em>본 게시글은 백기선님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET