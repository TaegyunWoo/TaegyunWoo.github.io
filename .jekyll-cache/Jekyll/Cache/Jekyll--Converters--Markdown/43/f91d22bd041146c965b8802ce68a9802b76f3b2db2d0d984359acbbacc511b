I"xD<p><br/><br/></p>
<p><a href="https://taegyunwoo.github.io/spring/SPRING_BeanScope">이전 글</a>에서 싱글톤과 프로토타입 스코프를 학습했다. 이제 나머지 웹 스코프에 대해 알아보자.</p>
<p><br><br><br></p>
<h1 id="section">웹 스코프</h1>
<h2 id="section-1">웹 스코프의 특징</h2>
<ul>
<li>웹 스코프는 웹 환경에서만 동작한다.</li>
<li>웹 스코프는 프로토타입과 다르게 스프링이 <strong>해당 스코프의 종료시점까지 관리</strong> 한다. 따라서 종료 메서드가 호출된다.</li>
</ul>
<p><br><br></p>
<h2 id="section-2">웹 스코프의 종류</h2>
<ul>
<li><strong>request</strong>
<ul>
<li>HTTP 요청 하나가 들어오고 나갈 때 까지 유지되는 스코프이다.</li>
<li>각각의 HTTP 요청마다 별도의 빈 인스턴스가 생성되고 관리된다.</li>
</ul>
</li>
<li><strong>session</strong>
<ul>
<li>HTTP Session과 동일한 생명주기를 가지는 스코프이다.</li>
</ul>
</li>
<li><strong>application</strong>
<ul>
<li>서블릿 컨텍스트 ( <code>ServletContext</code> )와 동일한 생명주기를 가지는 스코프이다.</li>
</ul>
</li>
<li><strong>websocket</strong>
<ul>
<li>웹 소켓과 동일한 생명주기를 가지는 스코프이다.</li>
</ul>
</li>
</ul>
<p><br><br></p>
<h2 id="request--">request 스코프 예제</h2>
<ul>
<li>동시에 여러 HTTP 요청이 오면, 어떤 요청이 남긴 로그인지 구분하기 어렵다.</li>
<li>이때 사용할 수 있는 것이 바로, request 스코프이다.</li>
</ul>
<br>
<h3 id="section-3">로그 관련 빈</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Scope</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.annotation.PreDestroy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.UUID</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="nd">@Scope</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"request"</span><span class="o">)</span> <span class="c1">//스코프를 request로 지정한다.</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyLogger</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">String</span> <span class="n">uuid</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">requestURL</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRequestURL</span><span class="o">(</span><span class="nc">String</span> <span class="n">requestURL</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">requestURL</span> <span class="o">=</span> <span class="n">requestURL</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"["</span> <span class="o">+</span> <span class="n">uuid</span> <span class="o">+</span> <span class="s">"]"</span> <span class="o">+</span> <span class="s">"["</span> <span class="o">+</span> <span class="n">requestURL</span> <span class="o">+</span> <span class="s">"] "</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@PostConstruct</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">uuid</span> <span class="o">=</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"["</span> <span class="o">+</span> <span class="n">uuid</span> <span class="o">+</span> <span class="s">"] request scope bean create:"</span> <span class="o">+</span> <span class="k">this</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@PreDestroy</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"["</span> <span class="o">+</span> <span class="n">uuid</span> <span class="o">+</span> <span class="s">"] request scope bean close:"</span> <span class="o">+</span> <span class="k">this</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@Scope(value = &quot;request&quot;)</code> 를 사용하여 request 스코프로 지정한다.
<ul>
<li>해당 빈은 HTTP 요청 당 하나씩 생성되고, HTTP 요청이 끝나는 시점에 소멸된다.</li>
</ul>
</li>
</ul>
<br>
<h3 id="section-4">로그 테스트 컨트롤러</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.common.MyLogger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.logdemo.LogDemoService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>

<span class="nd">@Controller</span>
<span class="nd">@RequiredArgsConstructor</span> <span class="c1">//자동으로 생성자를 생성해서 의존관계를 주입해준다.</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogDemoController</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">LogDemoService</span> <span class="n">logDemoService</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">MyLogger</span> <span class="n">myLogger</span><span class="o">;</span>

	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"log-demo"</span><span class="o">)</span>
	<span class="nd">@ResponseBody</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">logDemo</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">String</span> <span class="n">requestURL</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
		<span class="n">myLogger</span><span class="o">.</span><span class="na">setRequestURL</span><span class="o">(</span><span class="n">requestURL</span><span class="o">);</span>
		<span class="n">myLogger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">"controller test"</span><span class="o">);</span>
		<span class="n">logDemoService</span><span class="o">.</span><span class="na">logic</span><span class="o">(</span><span class="s">"testId"</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"OK"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li>로거가 잘 작동하는지 확인하는 테스트용 컨트롤러이다.</li>
</ul>
<br>
<h3 id="section-5">비즈니스 로직 서비스</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.common.MyLogger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="nd">@RequiredArgsConstructor</span> <span class="c1">//자동으로 생성자를 생성해서 의존관계를 주입해준다.</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogDemoService</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">MyLogger</span> <span class="n">myLogger</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">logic</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">myLogger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">"service id = "</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><a href="http://localhost:8080/log-demo">http://localhost:8080/log-demo</a>
<ul>
<li>이제 해당 URL로 테스트해보려고 하는데…</li>
<li>서버가 실행이 안된다. 서버 실행이 안되는 것이 정상이다!</li>
</ul>
</li>
<li>만약, 이 서비스 계층에 로그를 찍는 코드가 들어간다면 유지보수 관점에서 좋지 않다. request 빈을 사용하지 않고 모든 정보를 서비스 계층으로 넘겨서 처리한다면 말이다.<br />
따라서, 이렇게 따로 구분을 해야한다.</li>
</ul>
<p>서버 실행 시점에는 당연히 오류가 뜰 수 밖에 없다. 왜냐하면, request 빈은 실제 사용자의 요청이 와야만 생성되기 때문이다. 그렇기 때문에, <code>LogDemoService</code> <strong>의 멤버변수</strong> <code>myLogger</code> <strong>에 주입할 빈 객체가 존재하지 않는다. (생성자 주입)</strong> 이러한 오류를 한번 해결해보자.</p>
<p><br><br></p>
<h2 id="provider">스코프와 Provider</h2>
<h3 id="section-6">컨트롤러 수정</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.common.MyLogger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.logdemo.LogDemoService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.ObjectProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>

<span class="nd">@Controller</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogDemoController</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">LogDemoService</span> <span class="n">logDemoService</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">ObjectProvider</span><span class="o">&lt;</span><span class="nc">MyLogger</span><span class="o">&gt;</span> <span class="n">myLoggerProvider</span><span class="o">;</span> <span class="c1">//ObjectProvider</span>

	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"log-demo"</span><span class="o">)</span>
	<span class="nd">@ResponseBody</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">logDemo</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">String</span> <span class="n">requestURL</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>

		<span class="c1">//이제서야 myLogger 빈을 가져온다.</span>
		<span class="nc">MyLogger</span> <span class="n">myLogger</span> <span class="o">=</span> <span class="n">myLoggerProvider</span><span class="o">.</span><span class="na">getObject</span><span class="o">();</span>

		<span class="n">myLogger</span><span class="o">.</span><span class="na">setRequestURL</span><span class="o">(</span><span class="n">requestURL</span><span class="o">);</span>
		<span class="n">myLogger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">"controller test"</span><span class="o">);</span>
		<span class="n">logDemoService</span><span class="o">.</span><span class="na">logic</span><span class="o">(</span><span class="s">"testId"</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"OK"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<h3 id="section-7">서비스 수정</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.common.MyLogger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.ObjectProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogDemoService</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">ObjectProvider</span><span class="o">&lt;</span><span class="nc">MyLogger</span><span class="o">&gt;</span> <span class="n">myLoggerProvider</span><span class="o">;</span> <span class="c1">//ObjectProvider</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">logic</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>

		<span class="c1">//이제서야 myLogger 빈을 가져온다.</span>
		<span class="nc">MyLogger</span> <span class="n">myLogger</span> <span class="o">=</span> <span class="n">myLoggerProvider</span><span class="o">.</span><span class="na">getObject</span><span class="o">();</span>

		<span class="n">myLogger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">"service id = "</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>ObjectProvider</code> 덕분에 <code>ObjectProvider.getObject()</code> 를 호출하는 시점까지 <strong>request scope 빈의 생성(조회)를 지연할 수 있다.</strong></li>
<li>이제 서버실행도 정상적으로 되고, <a href="http://localhost:8080/log-demo">http://localhost:8080/log-demo</a> 요청시에도 성공적으로 작동한다.</li>
</ul>
<br>
<hr />
<br>
<p><a href="https://inf.run/pcN8"><img src="/assets/img/Inflearn_Spring_SpringCore/Logo.png" width="400px" height="250px"></a></p>
<ul>
<li><em>본 게시글은 김영한님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET