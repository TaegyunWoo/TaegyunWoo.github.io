I"Br<p><br/><br/></p>
<h1 id="section">개요</h1>
<h2 id="section-1">클라이언트에서 서버로 요청 데이터 전달</h2>
<h3 id="section-2">전달방식</h3>
<ul>
<li><strong>GET - 쿼리 파라미터</strong>
<ul>
<li>/url <strong>?myQuery=myValue</strong></li>
<li>메시지 바디 없이, URL의 쿼리 파라미터에 데이터를 포함해서 전달하는 방식</li>
</ul>
</li>
</ul>
<br>
<ul>
<li><strong>POST - HTML Form</strong>
<ul>
<li>content-type: application/x-www-form-urlencoded</li>
<li><strong>메시지 바디에 쿼리 파라미터 형식으로 전달</strong> 하는 방식
<ul>
<li>예) 바디부분: myParam=myValue</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>
<ul>
<li><strong>HTTP message body에 데이터를 직접 담아서 전달하는 방식</strong></li>
</ul>
<p>클라이언트가 서버에 데이터를 전달하는 방법은 위 세가지가 전부이다.</p>
<p><br><br><br></p>
<h1 id="html-form--">쿼리 파라미터, HTML Form 요청 데이터</h1>
<h2 id="section-3">요청 데이터</h2>
<h3 id="get----">GET, 쿼리 파라미터 요청(전송) 예시</h3>
<p><code>http://localhost:8080/request-param?username=hello&amp;age=20</code></p>
<br>
<h3 id="post-html-form---">POST, HTML Form 요청 메시지 예시</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">POST</span> <span class="o">/</span><span class="n">request</span><span class="o">-</span><span class="n">param</span>
<span class="n">content</span><span class="o">-</span><span class="nl">type:</span> <span class="n">application</span><span class="o">/</span><span class="n">x</span><span class="o">-</span><span class="n">www</span><span class="o">-</span><span class="n">form</span><span class="o">-</span><span class="n">urlencoded</span>

<span class="n">username</span><span class="o">=</span><span class="n">hello</span><span class="o">&amp;</span><span class="n">age</span><span class="o">=</span><span class="mi">20</span>
</code></pre></div></div>
<br>
<h3 id="html-form">쿼리 파라미터와 HTML Form</h3>
<ul>
<li>GET 쿼리 파라미터 전송 방식이든, POST HTML Form 전송 방식이든 <strong>둘다 형식이 같으므로 구분없이 조회</strong> 할 수 있다.
<ul>
<li>즉, 쿼리 파라미터 방식과 Form 방식 모두 조회하는 방법이 같다.</li>
</ul>
</li>
<li>단지 “URL에 담느냐”, “Form을 통해 바디부분에 담느냐” 의 차이이다.</li>
<li>이것을 <strong>요청 파라미터 조회</strong> 라고 한다.</li>
</ul>
<p>지금부터 예제코드를 통해 하나씩 알아보자.</p>
<p><br><br></p>
<h2 id="section-4">요청 파라미터 기본 조회</h2>
<h3 id="section-5">기초적인 방법으로 요청 파라미터 조회하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.springmvc.basic.HelloData</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="nd">@Slf4j</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestParamController</span> <span class="o">{</span>

	<span class="cm">/**
	 * 반환 타입이 없으면서 이렇게 응답에 값을 직접 집어넣으면, view 조회X
	 */</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/request-param-v1"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">requestParamV1</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
		
		<span class="c1">//request.getParameter() 메서드를 통해 파라미터 조회</span>
		<span class="nc">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>
		
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"username={}, age={}"</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
		<span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="s">"ok"</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>request.getParameter(&quot;파라미터이름&quot;)</code>
<ul>
<li>아주 단순하게 HttpServletRequest가 제공하는 방식으로 요청 파라미터를 조회한다.</li>
</ul>
</li>
</ul>
<p><br><br></p>
<h2 id="section-6">애너테이션을 활용한 요청 파라미터 조회</h2>
<h3 id="coderequestparamcode----"><code>@RequestParam</code> 을 사용하여 기본적인 조회하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.springmvc.basic.HelloData</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@Slf4j</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestParamController</span> <span class="o">{</span>

	<span class="cm">/**
	 * @RequestParam 사용
	 * - 파라미터 이름으로 바인딩
	 * @ResponseBody 추가
	 * - View 조회를 무시하고, HTTP message body에 직접 해당 내용 입력
	 */</span>
	<span class="nd">@ResponseBody</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/request-param-v2"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">requestParamV2</span><span class="o">(</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"username"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">memberName</span><span class="o">,</span>
				<span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"age"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">memberAge</span><span class="o">)</span> <span class="o">{</span>

		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"username={}, age={}"</span><span class="o">,</span> <span class="n">memberName</span><span class="o">,</span> <span class="n">memberAge</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@RequestParam(&quot;username&quot;) String memberName</code>
<ul>
<li>요청 메시지의 파라미터 중, ‘username’ 이라는 이름의 파라미터의 값을 <code>memberName</code>에 전달한다.</li>
<li>파라미터 이름으로 바인딩한다.</li>
</ul>
</li>
<li><code>@ResponseBody</code>
<ul>
<li>View 조회를 무시하고, HTTP message body에 직접 해당 내용을 입력한다.</li>
</ul>
</li>
</ul>
<p>위 예시 코드처럼, ‘요청 메시지의 파라미터 이름’ 과 ‘매개변수의 이름’이 같으면 ‘요청 메시지의 파라미터 이름’을 생략할 수 있다. 아래 설명을 보자.</p>
<br>
<h3 id="section-7">파라미터 이름을 생략하여 파라미터 조회하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.springmvc.basic.HelloData</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@Slf4j</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestParamController</span> <span class="o">{</span>

	<span class="nd">@ResponseBody</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/request-param-v2"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">requestParamV2</span><span class="o">(</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"username"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">memberName</span><span class="o">,</span>
				<span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"age"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">memberAge</span><span class="o">)</span> <span class="o">{</span>

		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"username={}, age={}"</span><span class="o">,</span> <span class="n">memberName</span><span class="o">,</span> <span class="n">memberAge</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="cm">/**
	 * @RequestParam 사용
	 * HTTP 파라미터 이름이 변수 이름과 같으면 @RequestParam(name="xx") 생략 가능 
	 */</span>
	<span class="nd">@ResponseBody</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/request-param-v3"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">requestParamV3</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="nd">@RequestParam</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"username={}, age={}"</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@RequestParam</code>
<ul>
<li>매개변수 이름과 요청 파라미터 이름이 같기 때문에, <code>name 속성</code> 을 생략할 수 있다.</li>
</ul>
</li>
</ul>
<p>여기서 <code>@RequestParam</code> 애너테이션 자체를 생략할 수도 있다. 만약, 매개변수의 타입이 단순타입(<code>int</code> , <code>String</code> , <code>Integer</code> 등)이라면 애너테이션 생략이 가능하다!</p>
<br>
<h3 id="coderequestparamcode-----1"><code>@RequestParam</code> 을 생략하여 파라미터 조회하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.springmvc.basic.HelloData</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@Slf4j</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestParamController</span> <span class="o">{</span>

	<span class="nd">@ResponseBody</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/request-param-v2"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">requestParamV2</span><span class="o">(</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"username"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">memberName</span><span class="o">,</span>
				<span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"age"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">memberAge</span><span class="o">)</span> <span class="o">{</span>

		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"username={}, age={}"</span><span class="o">,</span> <span class="n">memberName</span><span class="o">,</span> <span class="n">memberAge</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@ResponseBody</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/request-param-v3"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">requestParamV3</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="nd">@RequestParam</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"username={}, age={}"</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="cm">/**
	 * @RequestParam 자체를 생략했다.
	 */</span>
	<span class="nd">@ResponseBody</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/request-param-v4"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">requestParamV4</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"username={}, age={}"</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<p>이처럼 생략할 수 있지만, 명시성이 감소하는 문제 때문에 보통 많이 쓰이지는 않는다.</p>
<p><br><br></p>
<h2 id="section-8">파라미터 조회 속성</h2>
<p>스프링은 <code>@RequestParam</code> 애너테이션에 사용할 수 있는 다양한 속성을 지원한다. 하나씩 알아보자.</p>
<br>
<h3 id="section-9">파라미터 필수 여부 속성</h3>
<p><code>required</code> 속성을 통해 설정한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.springmvc.basic.HelloData</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@Slf4j</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestParamController</span> <span class="o">{</span>
	
	<span class="cm">/**
	 * @RequestParam.required
	 * /request-param -&gt; username이 없으므로 예외
	 *
	 * 주의!
	 * /request-param?username= -&gt; 빈문자로 통과
	 *
	 * 주의!
	 * /request-param
	 * int age -&gt; null을 int에 입력하는 것은 불가능, 따라서 Integer 변경해야 함(또는 다음에 나오는 defaultValue 사용)
	 */</span>
	<span class="nd">@ResponseBody</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/request-param-required"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">requestParamRequired</span><span class="o">(</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span>
				<span class="nd">@RequestParam</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="nc">Integer</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>

		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"username={}, age={}"</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>
	
<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@RequestParam.required</code>
<ul>
<li>파라미터 필수 여부</li>
<li><strong>required = true</strong>
<ul>
<li>요청 파라미터 값이 반드시 존재해야 한다.</li>
<li>기본값이 true이다.</li>
<li>값이 없으면 400 에러가 발생한다.</li>
</ul>
</li>
<li><strong>required = false</strong>
<ul>
<li>요청 파라미터 값이 없어도 된다.</li>
<li>값이 없으면 null 이 들어가므로, null에 대한 처리가 필요하다.
<ul>
<li>(특히 매개변수가 기본형 데이터타입일 때 주의)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>파라미터 이름만 전달했을때</strong>
<ul>
<li><code>/request-param?username=</code> 과 같이 이름만 전달했을 때</li>
<li>빈문자로 통과한다.</li>
</ul>
</li>
</ul>
<br>
<h3 id="section-10">기본값 적용 속성</h3>
<p><code>defaultValue</code> 속성을 통해 설정한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.springmvc.basic.HelloData</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@Slf4j</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestParamController</span> <span class="o">{</span>
	
	<span class="cm">/**
	 * @RequestParam
	 * - defaultValue 사용
	 *
	 * 참고: defaultValue는 빈 문자의 경우에도 적용
	 * /request-param?username=
	 */</span>
	<span class="nd">@ResponseBody</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/request-param-default"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">requestParamDefault</span><span class="o">(</span>
				<span class="nd">@RequestParam</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">defaultValue</span> <span class="o">=</span> <span class="s">"guest"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span>
				<span class="nd">@RequestParam</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">defaultValue</span> <span class="o">=</span> <span class="s">"-1"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>

		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"username={}, age={}"</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>
	
<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@RequestParam.defaultValue</code>
<ul>
<li>해당 매개변수의 기본 값을 적용한다.</li>
<li>해당 속성이 사용되면, <code>required</code> 속성은 의미가 사라진다.
<ul>
<li>왜냐하면, <code>required=true</code> 이라도 <code>defaultValue</code> 가 있으면 매개변수 생략시, 기본값이라도 들어가기 때문이다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><br><br></p>
<h2 id="map-">전체 파라미터를 Map으로 조회</h2>
<h3 id="map----">Map에 전체 파라미터를 전달받아서 조회하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.springmvc.basic.HelloData</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@Slf4j</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestParamController</span> <span class="o">{</span>
	
	<span class="cm">/**
	 * @RequestParam Map, MultiValueMap
	 * Map(key=value)
	 * MultiValueMap(key=[value1, value2, ...] ex) (key=userIds, value=[id1, id2])
	 */</span>
	<span class="nd">@ResponseBody</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/request-param-map"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">requestParamMap</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"username={}, age={}"</span><span class="o">,</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"username"</span><span class="o">),</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>
	
<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@RequestParam Map&lt;String, Object&gt; paramMap</code>
<ul>
<li>모든 요청 파라미터를 <code>paramMap</code> 에 담는다.</li>
<li>key 중복(파라미터 이름 중복)이 되지 않는다면, <code>Map</code> 을 사용해도 된다.</li>
<li>key 중복(파라미터 이름 중복)이 될 수 있다면, <code>MultiValueMap</code> 을 사용해야한다.</li>
</ul>
</li>
</ul>
<br>
<hr />
<br>
<p><a href="https://inf.run/RfTn"><img src="/assets/img/Inflearn_Spring_MVC1/Logo.png" width="400px" height="300px"></a></p>
<ul>
<li><em>본 게시글은 김영한님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET