I"5<p><br/><br/></p>
<h1 id="section">스택</h1>
<h2 id="section-1">개요</h2>
<h3 id="section-2">스택의 특징</h3>
<ul>
<li><strong>후입선출(LIFO)</strong></li>
</ul>
<h3 id="section-3">구현 방법</h3>
<ul>
<li>1차원 배열</li>
<li>연결리스트</li>
</ul>
<h3 id="section-4">스택의 구조</h3>
<ul>
<li>스택 상단 : top</li>
<li>스택 하단 : 불필요</li>
<li>요소</li>
<li>삽입 연산</li>
<li>삭제 연산</li>
</ul>
<h3 id="section-5">상태</h3>
<ul>
<li>공백 상태 : 요소가 하나도 없는 상태</li>
<li>포화 상태 : 요소가 가득 차있는 상태</li>
</ul>
<p><br/><br/></p>
<h2 id="adt--abstract-data-type">스택 추상 자료형 (ADT : Abstract Data Type)</h2>
<h3 id="section-6">객체</h3>
<p>무엇이든 가능하다.</p>
<h3 id="section-7">연산</h3>
<ul>
<li>새로운 항목을 스택에 삽입</li>
<li>하나의 항목 꺼내기</li>
<li>스택이 비어있는지 살핌</li>
</ul>
<h3 id="section-8">추상 자료형 정의</h3>
<ul>
<li><strong>init()</strong> : 스택 초기화</li>
<li><strong>is_empty()</strong> : 스택이 비어있으면 True, 아니면 False 반환</li>
<li><strong>is_full()</strong> : 스택이 꽉차면 True, 아니면 False 반환</li>
<li><strong>size()</strong> : 스택 내의 모든 요소들의 개수 반환</li>
<li><strong>push(x)</strong> : 주어진 요소 x를 스택의 맨 위에 추가</li>
<li><strong>pop()</strong> : 스택 맨 위에 있는 요소를 삭제하고 반환</li>
<li><strong>peek()</strong> : 스택 맨 위에 있는 요소를 삭제하지 않고 반환</li>
</ul>
<p><br/><br/></p>
<h2 id="section-9">스택의 연산</h2>
<h3 id="push-amp-pop">삽입(push) &amp; 삭제(pop)</h3>
<p><img src="/assets/img/2021-07-02-DATASTRUCTURE_Stack/Untitled_5.png" alt="push&amp;pop" /></p>
<ul>
<li><strong>is_empty()</strong> : 스택이 공백상태인지 검사</li>
<li><strong>is_full()</strong> : 스택이 포화상태인지 검사</li>
<li><strong>peek()</strong> : 요소를 스택에서 삭제하지 않고 보기만 하는 연산</li>
</ul>
<p><br/><br/></p>
<h2 id="section-10">스택 활용 분야</h2>
<h3 id="section-11">개념</h3>
<p><strong>자료의 출력순서가 입력순서의 역순으로 이루어져야 할 경우에 사용</strong></p>
<h3 id="section-12">분야</h3>
<ul>
<li>편집기의 되돌리기</li>
<li>함수호출 스택</li>
<li>Program Counter (PC)</li>
<li>다음에 실행할 명령어의 주소를 저장</li>
</ul>
<p><br/><br/></p>
<h2 id="section-13">스택 구현 방법</h2>
<h3 id="vs-">배열 vs 연결리스트</h3>
<ul>
<li><strong>배열</strong> : 가장 간단하게 구현, 고정된 크기</li>
<li><strong>연결 리스트</strong> : 복잡한 코드, 유연한 크기</li>
</ul>
<p><br/><br/></p>
<h2 id="section-14">배열을 이용한 스택 구현</h2>
<h3 id="section-15">구성 원리</h3>
<p>1차원 배열을 활용하여 구현한다.</p>
<ul>
<li><strong>top</strong> : 가장 최근에 입력된 자료를 가르키는 변수</li>
<li><strong>stack[0] ~ stack[top]</strong> : 먼저 들어온 순으로 저장</li>
<li><strong>공백상태</strong> : top == -1</li>
<li><strong>포화상태</strong> : top == MAX_STACK_SIZE-1</li>
</ul>
<h3 id="isempty">스택 연산 : is_empty()</h3>
<p><img src="/assets/img/2021-07-02-DATASTRUCTURE_Stack/Untitled_6.png" alt="is_empty 연산" /></p>
<h3 id="isfull">스택 연산 : is_full()</h3>
<p><img src="/assets/img/2021-07-02-DATASTRUCTURE_Stack/Untitled_7.png" alt="is_full 연산" /></p>
<h3 id="init">스택 연산 : init()</h3>
<ul>
<li><strong>초기화</strong></li>
<li>스택을 공백상태로 만드는 것</li>
<li>top == -1</li>
</ul>
<p><img src="/assets/img/2021-07-02-DATASTRUCTURE_Stack/Untitled_8.png" alt="초기화 연산" /></p>
<h3 id="size">스택 연산 : size()</h3>
<ul>
<li><strong>요소의 개수</strong></li>
<li>top + 1</li>
</ul>
<p><img src="/assets/img/2021-07-02-DATASTRUCTURE_Stack/Untitled_9.png" alt="size 연산" /></p>
<h3 id="push">스택 연산 : push()</h3>
<ul>
<li><strong>요소 추가</strong></li>
<li>새로운 항목은 스택의 맨 위에 올라가야 함</li>
<li>top을 하나 증가</li>
<li>스택이 포화상태인지 체크</li>
</ul>
<p><img src="/assets/img/2021-07-02-DATASTRUCTURE_Stack/Untitled_10.png" alt="push 연산" /></p>
<h3 id="pop">스택 연산 : pop()</h3>
<ul>
<li><strong>요소를 꺼내서 반환</strong></li>
<li>공백 상태인지 체크</li>
<li>top이 가르키는 값 반환</li>
<li>top이 하나 감소</li>
</ul>
<p><img src="/assets/img/2021-07-02-DATASTRUCTURE_Stack/Untitled_11.png" alt="pop 연산" /></p>
<h3 id="int---">int형 스택 자료형 선언</h3>
<p>스택의 항목의 자료형을 Element이라고 칭하자.</p>
<p><strong>(요소의 데이터타입 선언)</strong></p>
<p><img src="/assets/img/2021-07-02-DATASTRUCTURE_Stack/Untitled_12.png" alt="데이터타입 선언" /></p>
<p><br/><br/></p>
<h2 id="int--">스택 구현 : int형 요소의 스택</h2>
<h3 id="section-16">스택 배열 선언</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//최대 크기 선언</span>
<span class="cp">#define MAX_STACK_SIZE 100 
</span>
<span class="c1">//요소 타입 선언 (int형 요소)</span>
<span class="k">typedef</span> <span class="kt">int</span> <span class="n">Element</span><span class="p">;</span>

<span class="c1">//스택 배열 선언 </span>
<span class="n">Element</span> <span class="n">stack</span><span class="p">[];</span>

<span class="c1">//top 선언 </span>
<span class="kt">int</span> <span class="n">top</span><span class="p">;</span>
</code></pre></div></div>
<p><br/><br/></p>
<h3 id="section-17">스택 주요 함수 선언</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//init 함수</span>
<span class="kt">void</span> <span class="nf">init_stack</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">top</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span> 

<span class="c1">//size 함수</span>
<span class="kt">int</span> <span class="nf">size</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">top</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span> 

<span class="c1">//is_empty 함수</span>
<span class="kt">int</span> <span class="nf">is_empty</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">(</span><span class="n">top</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">//is_full 함수</span>
<span class="kt">int</span> <span class="nf">is_full</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">(</span><span class="n">top</span> <span class="o">==</span> <span class="n">MAX_STACK_SIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span> 

<span class="c1">//push 함수</span>
<span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="n">Element</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">is_full</span><span class="p">())</span> <span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"스택포화에러"</span><span class="p">);</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">stack</span><span class="p">[</span><span class="o">++</span><span class="n">top</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span> 

<span class="c1">//pop 함수</span>
<span class="n">Element</span> <span class="nf">pop</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">is_empty</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"빈 스택"</span><span class="p">);</span>
	<span class="p">}</span>
		<span class="k">return</span> <span class="n">stack</span><span class="p">[</span><span class="n">top</span><span class="o">--</span><span class="p">];</span>
<span class="p">}</span>

<span class="c1">//peek 함수</span>
<span class="n">Element</span> <span class="nf">peek</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">is_empty</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"빈스택"</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">stack</span><span class="p">[</span><span class="n">top</span><span class="p">];</span>
<span class="p">}</span> 

<span class="c1">//print_stack 함수</span>
<span class="kt">void</span> <span class="nf">print_stack</span><span class="p">(</span><span class="kt">char</span> <span class="n">msg</span><span class="p">[])</span> <span class="p">{</span>
	<span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"%s[%2d] = "</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">size</span><span class="p">());</span>
	<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"%2d "</span><span class="p">,</span> <span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
	<span class="p">}</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p><br/><br/></p>
<h3 id="error">error함수</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">error</span><span class="p">(</span><span class="kt">char</span> <span class="n">msg</span><span class="p">[])</span> <span class="p">{</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">msg</span><span class="p">);</span>
	<span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p><br/><br/></p>
<h3 id="main">main</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
	<span class="n">init_stack</span><span class="p">();</span>
	<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">40</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"push i : %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
		<span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
	<span class="p">}</span>

	
	<span class="n">print_stack</span><span class="p">(</span><span class="s">"스택 push 9회"</span><span class="p">);</span>
	
	<span class="n">printf</span><span class="p">(</span><span class="s">"--------------pop---------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"pop() = %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">pop</span><span class="p">());</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"pop() = %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">pop</span><span class="p">());</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"pop() = %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">pop</span><span class="p">());</span>
	
	<span class="n">printf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">stack</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>
:ET