I"_-<p><br/><br/></p>
<p><a href="https://taegyunwoo.github.io/spring/SPRING_WebScope">이전 글</a>에서 request 스코프를 다뤘다. <code>ObjectProvider</code> 를 통해 request 빈의 조회를 지연시켰다. 하지만 보다 더 간편한 방법이 있다. 그것이 바로 프록시를 활용하는 것이다.</p>
<p><br><br><br></p>
<h1 id="section">스코프와 프록시</h1>
<ul>
<li><code>@Scope(value = &quot;request&quot; , proxyMode = ScopedProxyMode.TARGET_CLASS)</code>
<ul>
<li>해당 코드를 통해 프록시를 적용할 수 있다.</li>
<li>적용 대상이 클래스라면, <code>proxyMode = ScopedProxyMode.TARGET_CLASS</code></li>
<li>적용 대상이 인터페이스라면, <code>proxyMode = ScopedProxyMode.TARGET_INTERFACES</code></li>
</ul>
</li>
<li><strong>이렇게 하면 MyLogger의 가짜 프록시 클래스를 만들어두고, HTTP request와 상관 없이 가짜 프록시 클래스를 다른 빈에 미리 주입해 둘 수 있다.</strong></li>
</ul>
<p><br><br></p>
<h2 id="section-1">예시 코드</h2>
<blockquote>
<p>이전 글에서 <code>ObjectProvider</code> 를 제외하고 작성한 부분과 동일하다. (로그 관련 빈 제외)</p>
</blockquote>
<br>
<h3 id="section-2">로그 관련 빈</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Scope</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.annotation.PreDestroy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.UUID</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="nd">@Scope</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"request"</span><span class="o">,</span> <span class="n">proxyMode</span> <span class="o">=</span> <span class="nc">ScopedProxyMode</span><span class="o">.</span><span class="na">TARGET_CLASS</span><span class="o">)</span> <span class="c1">//프록시를 사용한다.</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyLogger</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">String</span> <span class="n">uuid</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">requestURL</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRequestURL</span><span class="o">(</span><span class="nc">String</span> <span class="n">requestURL</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">requestURL</span> <span class="o">=</span> <span class="n">requestURL</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"["</span> <span class="o">+</span> <span class="n">uuid</span> <span class="o">+</span> <span class="s">"]"</span> <span class="o">+</span> <span class="s">"["</span> <span class="o">+</span> <span class="n">requestURL</span> <span class="o">+</span> <span class="s">"] "</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@PostConstruct</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">uuid</span> <span class="o">=</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"["</span> <span class="o">+</span> <span class="n">uuid</span> <span class="o">+</span> <span class="s">"] request scope bean create:"</span> <span class="o">+</span> <span class="k">this</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@PreDestroy</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"["</span> <span class="o">+</span> <span class="n">uuid</span> <span class="o">+</span> <span class="s">"] request scope bean close:"</span> <span class="o">+</span> <span class="k">this</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<h3 id="section-3">로그 테스트 컨트롤러</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hello.core.common.MyLogger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.logdemo.LogDemoService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>

<span class="nd">@Controller</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogDemoController</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">LogDemoService</span> <span class="n">logDemoService</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">MyLogger</span> <span class="n">myLogger</span><span class="o">;</span>

	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"log-demo"</span><span class="o">)</span>
	<span class="nd">@ResponseBody</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">logDemo</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">String</span> <span class="n">requestURL</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
		<span class="n">myLogger</span><span class="o">.</span><span class="na">setRequestURL</span><span class="o">(</span><span class="n">requestURL</span><span class="o">);</span>
		<span class="n">myLogger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">"controller test"</span><span class="o">);</span>
		<span class="n">logDemoService</span><span class="o">.</span><span class="na">logic</span><span class="o">(</span><span class="s">"testId"</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"OK"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<h3 id="section-4">비즈니스 로직 서비스</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.core.logdemo</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.core.common.MyLogger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogDemoService</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">MyLogger</span> <span class="n">myLogger</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">logic</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">myLogger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">"service id = "</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
	<span class="o">}</span>
 
<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>ObjectProvider</code> 를 사용하지 않았는데, 정상적으로 작동한다!</li>
<li>프록시의 정확한 원리를 알아보자.</li>
</ul>
<p><br><br></p>
<h2 id="section-5">프록시</h2>
<ul>
<li><strong>CGLIB라는 라이브러리로 내 클래스를 상속 받은 가짜 객체 (프록시 객체)를 만들어서 주입한다.</strong>
<ul>
<li>위 예시
<ul>
<li>프록시 객체 = ‘로그 관련 빈’( <code>MyLogger</code> )을 상속받은 CGLIB 객체</li>
<li>프록시 객체를 주입받는 빈 = ‘로그 테스트 컨트롤러’( <code>LogDemoController</code> ) , ‘비즈니스 로직 서비스’(<code>LogDemoService</code>)</li>
</ul>
</li>
</ul>
</li>
<li>스프링 컨테이너에 “myLogger”라는 이름으로 진짜(<code>MyLogger</code>) 대신에 프록시 객체가 등록된다.
<ul>
<li>그래서 의존관계 주입도 이 가짜 프록시 객체가 주입된다.</li>
</ul>
</li>
<li><strong>가짜 프록시 객체는 요청이 오면 그때 내부에서 진짜 빈을 요청하는 위임 로직이 들어있다.</strong>
<ul>
<li>가짜 프록시 객체는 내부에 진짜 myLogger를 찾는 방법을 알고 있다.</li>
<li>가짜 프록시 객체는 원본 클래스를 상속 받아서 만들어졌기 때문에 이 객체를 사용하는 클라이언트 입장에서는 사실 원본인지 아닌지도 모르게, 동일하게 사용할 수 있다. (다형성)</li>
</ul>
</li>
</ul>
<br>
<hr />
<br>
<p><a href="https://inf.run/pcN8"><img src="/assets/img/Inflearn_Spring_SpringCore/Logo.png" width="400px" height="250px"></a></p>
<ul>
<li><em>본 게시글은 김영한님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET