I"<j<p><br/><br/></p>
<blockquote>
<p>본 게시글은 로그 라이브러리로 <code>SLF4J</code> 와 <code>LogBack</code> 을 사용한다. 관련 자료는 따로 검색해보길 바란다.<br />
SLF4J - <a href="http://www.slf4j.org/">http://www.slf4j.org/</a><br />
LogBack - <a href="http://logback.qos.ch/">http://logback.qos.ch/</a></p>
</blockquote>
<p><br><br><br></p>
<h1 id="section">요청 매핑</h1>
<p>이번 글에서는 클라이언트(고객)으로부터 들어온 요청을 어떻게 처리하는지 자세히 다루도록 하겠다.</p>
<p><br><br></p>
<h2 id="section-1">기본 매핑</h2>
<p>기본적인 매핑 방식을 예시 코드를 통해 알아보자.</p>
<br>
<h3 id="section-2">기초적인 매핑하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MappingController</span> <span class="o">{</span>

	<span class="c1">//로깅을 위한 변수</span>
	<span class="c1">// @Slf4j 로 대체 가능</span>
	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

	<span class="cm">/**
	 * 기본 요청
	 * /hello-basic, /hello-basic/ 모두 매핑됨.
	 * HTTP 메서드 GET, HEAD, POST, PUT, PATCH, DELETE 모두 허용함.
	 */</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/hello-basic"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">helloBasic</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"helloBasic"</span><span class="o">);</span> <span class="c1">//로깅</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li>
<p><code>@RestController</code></p>
<ul>
<li>
<p><code>@Controller</code></p>
<ul>
<li>메서드의 반환 값이 <code>String</code> 이면 뷰 이름으로 인식된다. 그래서 <strong>뷰를 찾고 뷰가 랜더링</strong> 된다.</li>
</ul>
</li>
<li>
<p><code>@RestController</code></p>
<ul>
<li>메서드의 반환 값이 <strong>HTTP 메시지의 바디부분에 바로 입력</strong> 된다.</li>
<li><strong>즉, 뷰를 찾고 랜더링하는 행위를 하지 않는다.</strong></li>
</ul>
<blockquote>
<p><code>@ResponseBody</code> 애너테이션을 다룰때 자세히 설명하겠다.</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><code>@RequestMapping(&quot;/hello-basic&quot;)</code></p>
<ul>
<li><code>/hello-basic</code> 이나 <code>/hello-basic/</code> URL로 요청이 오면, 해당 메서드가 호출된다.</li>
<li>여러 URL을 매핑하도록 설정할 수 있다.
<ul>
<li>예) <code>@RequestMapping( {&quot;/hello1&quot; , &quot;/hello2&quot;} )</code></li>
</ul>
</li>
<li>method 속성을 사용하여 HTTP 메서드를 지정하지 않으면, 모든 HTTP 메서드를 허용한다.</li>
</ul>
</li>
</ul>
<p><br><br></p>
<h2 id="http--">HTTP 메서드 매핑</h2>
<h3 id="http---">HTTP 메서드를 지정하여 매핑하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MappingController</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

	<span class="cm">/**
	 * method 특정 HTTP 메서드(GET) 요청만 허용
	 */</span>
	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/mapping-get-v1"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">mappingGetV1</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"mappingGetV1"</span><span class="o">);</span>
			<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@RequestMapping(value = &quot;/mapping-get-v1&quot;, method = RequestMethod.GET)</code>
<ul>
<li><code>@RequestMapping</code> 의 method 속성을 통해 특정 HTTP 메서드를 지정하여 매핑할 수 있다.</li>
<li><strong>하지만, 직관성이 떨어진다..</strong></li>
</ul>
</li>
</ul>
<br>
<h3 id="http----">HTTP 메서드 설정을 축약하여 매핑하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MappingController</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/mapping-get-v1"</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">mappingGetV1</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"mappingGetV1"</span><span class="o">);</span>
			<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="cm">/**
	 * 편리한 축약 애노테이션
	 * @GetMapping
	 * @PostMapping
	 * @PutMapping
	 * @DeleteMapping
	 * @PatchMapping
	*/</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/mapping-get-v2"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">mappingGetV2</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"mapping-get-v2"</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@GetMapping(value = &quot;/mapping-get-v2&quot;)</code>
<ul>
<li><code>@GetMapping</code> 은 <code>@RequestMapping(method = &quot;RequestMethod.GET&quot;)</code> 과 동일하다</li>
<li>즉, <code>@GetMapping</code> 애너테이션을 통해 직관적으로 HTTP 메서드를 설정하여 매핑할 수 있다.</li>
<li>value 속성은 매핑할 URL을 의미한다.</li>
</ul>
</li>
</ul>
<p><br><br></p>
<h2 id="pathvariable--">PathVariable(경로 변수) 매핑</h2>
<h3 id="pathvariable---1">PathVariable을 활용하여 매핑하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MappingController</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

	<span class="cm">/**
	 * PathVariable 사용  (변수명이 같으면 생략 가능)
	 * 생략예시) "@PathVariable("userId") String userId" -&gt; "@PathVariable userId"
	*/</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/mapping/{userId}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">mappingPath</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"userId"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"mappingPath userId={}"</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li>
<p><code>@GetMapping(&quot;/mapping/{userId}&quot;)</code></p>
<ul>
<li>사용자가 요청한 URL에서 <code>{userId}</code> 에 해당되는 부분을 추출한다.</li>
<li><code>@PathVariable(&quot;userId&quot;)</code> 애너테이션을 통해 추출된 값을 <code>String data</code> 에 전달한다.</li>
</ul>
</li>
<li>
<p><code>@PathVariable(&quot;userId&quot;) String data</code></p>
<ul>
<li>경로 변수 중 <code>{userId}</code> 에 해당되는 값을 매개변수 <code>data</code> 에 전달한다.</li>
<li>‘매개변수의 이름’ 과 ‘경로 변수의 이름’ 이 같다면 <code>@PathVariable(&quot;userId&quot;)</code> 에서 <code>&quot;userId&quot;</code> 를 생략할 수 있다.
<ul>
<li>예) <code>@PathVariable(&quot;userId&quot;)</code> ⇒ <code>@PathVariable</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>참고로, 최근 HTTP API는 아래와 같이 리소스 경로에 식별자를 넣는 스타일을 선호한다.</p>
<ul>
<li>/mapping/userA</li>
<li>/users/1</li>
</ul>
<br>
<h3 id="pathvariable-----">PathVariable을 여러 개 사용하기, 경로변수명 생략하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MappingController</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/mapping/{userId}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">mappingPath</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"userId"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"mappingPath userId={}"</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="cm">/**
	 * PathVariable 사용 다중
	 */</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/mapping/users/{userId}/orders/{orderId}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">mappingPath</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="nc">Long</span> <span class="n">orderId</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"mappingPath userId={}, orderId={}"</span><span class="o">,</span> <span class="n">userId</span><span class="o">,</span> <span class="n">orderId</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@GetMapping(&quot;/mapping/users/{userId}/orders/{orderId}&quot;)</code>
<ul>
<li>이와 같이, 여러 개의 경로변수를 사용할 수 있다.</li>
</ul>
</li>
<li><code>@PathVariable String userId, @PathVariable Long orderId</code>
<ul>
<li>경로 변수와 매개변수의 이름이 일치하여 <code>@PathVariable</code> 의 속성을 생략할 수 있다.</li>
</ul>
</li>
</ul>
<p><br><br></p>
<h2 id="section-3">특정 파라미터 조건 매핑</h2>
<h3 id="section-4">특정 파라미터와 값으로 매핑하기</h3>
<ul>
<li>클라이언트가 보낸 요청 URL의 <strong>특정한 파라미터의 존재여부와 값을 활용하여 매핑</strong> 한다.</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MappingController</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

	<span class="cm">/**
	 * 파라미터로 추가 매핑
	 * params="mode",
	 * params="!mode"
	 * params="mode=debug"
	 * params="mode!=debug" (! = )
	 * params = {"mode=debug","data=good"}
	 */</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/mapping-param"</span><span class="o">,</span> <span class="n">params</span> <span class="o">=</span> <span class="s">"mode=debug"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">mappingParam</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"mappingParam"</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@GetMapping(value = &quot;/mapping-param&quot;, params = &quot;mode=debug&quot;)</code>
<ul>
<li><code>&quot;/mapping-param&quot;</code> URL로 들어온 GET방식의 요청 중, 요청메시지의 파라미터에서 <code>&quot;mode=debug&quot;</code> 를 갖는 요청과 매핑된다.</li>
<li>즉, 이와 같은 URL와 매핑된다.
<ul>
<li><code>&quot;/mapping-param?mode=debug&quot;</code></li>
</ul>
</li>
</ul>
</li>
<li>하지만, 잘 사용하지는 않는다.</li>
</ul>
<p><br><br></p>
<h2 id="section-5">특정 헤더 조건 매핑</h2>
<h3 id="section-6">특정 헤더와 값으로 매핑하기</h3>
<ul>
<li>클라이언트가 보낸 요청 메시지의 <strong>특정한 헤더의 존재여부와 값을 활용하여 매핑</strong> 한다.</li>
</ul>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MappingController</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

	<span class="cm">/**
	 * 특정 헤더로 추가 매핑
	 * headers="mode",
	 * headers="!mode"
	 * headers="mode=debug"
	 * headers="mode!=debug" (! = )
	 */</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/mapping-header"</span><span class="o">,</span> <span class="n">headers</span> <span class="o">=</span> <span class="s">"mode=debug"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">mappingHeader</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"mappingHeader"</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@GetMapping(value = &quot;/mapping-header&quot;, headers = &quot;mode=debug&quot;)</code>
<ul>
<li>HTTP 요청 메시지의 헤더에서 ‘mode’라는 헤더의 값이 ‘debug’인 것만 매핑한다.</li>
</ul>
</li>
</ul>
<blockquote>
<p>Postman을 활용하여 테스트해보길 권장한다!</p>
</blockquote>
<p><br><br></p>
<h2 id="section-7">미디어 타입 조건 매핑</h2>
<ul>
<li>요청 메시지의 <strong>헤더</strong> <code>content-type</code> <strong>의 값을 활용하여 매핑</strong> 한다. (consumes)</li>
<li>요청 메시지의 <strong>헤더</strong> <code>Accept</code> <strong>의 값을 활용하여 매핑</strong> 한다. (produces)</li>
</ul>
<br>
<h3 id="codecontent-typecode---"><code>content-type</code> 헤더 값으로 매핑하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MappingController</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

	<span class="cm">/**
	 * Content-Type 헤더 기반 추가 매핑 Media Type
	 * consumes="application/json"
	 * consumes="!application/json"
	 * consumes="application/*"
	 * consumes="*\/*"
	 * MediaType.APPLICATION_JSON_VALUE
	 */</span>
	<span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/mapping-consume"</span><span class="o">,</span> <span class="n">consumes</span> <span class="o">=</span> <span class="s">"application/json"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">mappingConsumes</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"mappingConsumes"</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@PostMapping(value = &quot;/mapping-consume&quot;, consumes = &quot;application/json&quot;)</code>
<ul>
<li>요청 헤더 <code>content-type</code> 의 값이 <code>application/json</code> 인 요청과 매핑된다.</li>
</ul>
</li>
<li><code>content-type</code>
<ul>
<li>요청 메시지의 공식 헤더이다.</li>
<li><strong>요청 메시지의 내용(바디) 형식</strong> 을 알려주는 헤더이다.</li>
<li>서버가 요청 메시지의 내용(바디)을 <strong>사용</strong> 한다. ⇒ <strong>consumes</strong></li>
</ul>
</li>
</ul>
<br>
<h3 id="codeacceptcode---"><code>Accept</code> 헤더 값으로 매핑하기</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="o">...</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MappingController</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

	<span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/mapping-consume"</span><span class="o">,</span> <span class="n">consumes</span> <span class="o">=</span> <span class="s">"application/json"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">mappingConsumes</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"mappingConsumes"</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="cm">/**
	 * Accept 헤더 기반 Media Type
	 * produces = "text/html"
	 * produces = "!text/html"
	 * produces = "text/*"
	 * produces = "*\/*"
	 */</span>
	<span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/mapping-produce"</span><span class="o">,</span> <span class="n">produces</span> <span class="o">=</span> <span class="s">"text/html"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">mappingProduces</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"mappingProduces"</span><span class="o">);</span>
		<span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>@PostMapping(value = &quot;/mapping-consume&quot;, produces = &quot;text/html&quot;)</code>
<ul>
<li>요청 헤더 <code>Accept</code> 의 값이 <code>/text/html</code> 인 요청과 매핑된다.</li>
</ul>
</li>
<li><code>Accept</code>
<ul>
<li>요청 메시지의 공식 헤더이다.</li>
<li>요청자가 받을 수 있는 <strong>응답 메시지의 내용(바디) 형식</strong> 을 나타낸다.</li>
<li>서버가 응답 메시지의 내용(바디)을 클라이언트에게 <strong>제공</strong> 한다. ⇒ <strong>produces</strong></li>
</ul>
</li>
</ul>
<br>
<hr />
<br>
<p><a href="https://inf.run/RfTn"><img src="/assets/img/Inflearn_Spring_MVC1/Logo.png" width="400px" height="300px"></a></p>
<ul>
<li><em>본 게시글은 김영한님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET