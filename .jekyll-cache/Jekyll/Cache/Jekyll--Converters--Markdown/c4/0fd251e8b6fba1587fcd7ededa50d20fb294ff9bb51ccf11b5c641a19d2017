I"/"<p><br/><br/></p>
<h1 id="jpa-auditing----">JPA Auditing을 활용한 엔티티 생성·수정시간 자동화</h1>
<h2 id="section">개요</h2>
<h3 id="section-1">문제상황</h3>
<ul>
<li>
<p>기존에는 자바에서 날짜나 시간을 표현하기 위해, <code>java.util.Date</code> 나 <code>java.util.Calendar</code> 등을 사용했다.</p>
</li>
<li>
<p>하지만 자바 8부터 추가된 <code>LocalDate</code> 와 <code>LocalDateTime</code> 을 사용해야 한다. 그 이유는 대표적으로 아래와 같다.</p>
<ul>
<li><code>java.util.Date</code> 와 <code>java.util.Calendar</code> 는 불변객체가 아니다.
<ul>
<li>즉 set 메서드가 존재한다.</li>
<li>따라서 멀티쓰레드 환경에서 문제가 발생할 수 있다.</li>
</ul>
</li>
<li><code>java.util.Calendar</code> 는 월(month) 값 설계가 잘못되었다.
<ul>
<li>10월을 나타내는 <code>Calendar.OCTOBER</code> 의 숫자 값은 ‘9’이다.</li>
</ul>
</li>
<li><code>java.util.Calendar</code> 에 int 상수 필드가 남용되어있다.
<ul>
<li>
<p>2초를 더하는 코드를 예시로 보자. 이는 아래와 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">calendar</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">SECOND</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</code></pre></div></div>
</li>
<li>
<p>만약 이때 실수로 아래와 같이 작성했다고 해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">calendar</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">OCTOBER</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</code></pre></div></div>
</li>
<li>
<p>위 코드처럼 작성하여도 컴파일 시점에서 해당 오류를 찾아낼 수 없다.</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>이외에도 많은 문제가 있다.<br />
자세한 것은 <a href="https://d2.naver.com/helloworld/645609">https://d2.naver.com/helloworld/645609</a> 을 참고하자.</p>
</blockquote>
</li>
</ul>
<br/>
<h3 id="section-2">문제 해결 방안</h3>
<ul>
<li>이러한 문제를 해결하고자 Java8부터 추가된 것이 바로 <code>LocalDate</code> 와 <code>LocalDateTime</code> 이다.
<ul>
<li>또한 Hibernate 5.2.10 버전부터 <code>LocalDate</code> 와 <code>LocalDateTime</code> 을 본격적으로 지원하기 시작했다.</li>
<li>만약 본인이 <code>JPA 2.1</code>을 구현하는 <code>Hibernate 4.3.x</code> 를 사용한다면, <a href="http://blog.eomdev.com/java/2016/01/04/jpa_with_java8.html">http://blog.eomdev.com/java/2016/01/04/jpa_with_java8.html</a> 를 참고하자.</li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h2 id="jpa-auditing">JPA Auditing</h2>
<h3 id="jpa-auditing-1">JPA Auditing이란?</h3>
<br/>
<blockquote>
<p>Audit: 감시하다</p>
</blockquote>
<br/>
<ul>
<li>JPA Auditing 이란, Spring Data JPA에서 시간에 대해, 자동으로 값을 넣어주는 기능이다.
<ul>
<li>도메인을 영속성 컨텍스트에 저장하거나 조회를 수행한 후에 UPDATE를 하는 경우, 매번 시간 데이터를 입력해 주어야 하는 번거로움을 <code>JPA Auditing</code> 기능으로 해결할 수 있다.</li>
</ul>
</li>
</ul>
<br/>
<h3 id="jpa-auditing-">JPA Auditing 사용</h3>
<ul>
<li>Java에서 JPA를 사용하여 도메인을 관계형 데이터베이스 테이블에 매핑할 때, 각 도메인들이 공통적으로 가지고 있는 필드·칼럼이 존재한다.
<ul>
<li>대표적으로 생성일자, 수정일자 등과 같은 필드·칼럼이 존재한다.</li>
</ul>
</li>
<li>따라서 <code>@MappedSuperclass</code> 를 통해, 생성일자나 수정일자와 같은 공통 필드를 묶어서 관리해야 한다.</li>
<li><strong>즉, <code>JPA Auditing</code> 기능과 <code>@MappedSuperclass</code> 를 조합하여 사용해야 한다.</strong></li>
</ul>
<p><br/><br/></p>
<h2 id="section-3">엔티티 생성·수정시간 자동화 예시 코드</h2>
<p>바로 예시 코드를 통해 알아보자.</p>
<h3 id="codebasetimeentitycode-"><code>BaseTimeEntity</code> 클래스</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@MappedSuperclass</span>
<span class="nd">@EntityListeners</span><span class="o">(</span><span class="nc">AuditingEntityListener</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BaseTimeEntity</span> <span class="o">{</span>
	<span class="nd">@CreatedDate</span>
	<span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">createdDate</span><span class="o">;</span>
<pre><code>&lt;span class=&quot;nd&quot;&gt;@LastModifiedDate&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifiedDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
</code></pre>
<p><span class="o">}</span>
</code></pre></div></div></p>
<ul>
<li><code>@MappedSuperclass</code> 애너테이션
<ul>
<li>따라서 <code>BaseTimeEntity</code> 클래스를 상속받는 다른 엔티티 클래스들이 해당 필드들(<code>createdDate</code> , <code>modifiedDate</code>)를 엔티티 필드로서 사용할 수 있다.</li>
</ul>
</li>
<li><code>@EntityListeners(AuditingEntityListener.class)</code>
<ul>
<li>영속성 메커니즘상에서 이벤트(우리의 경우, 엔티티 저장·수정)가 발생할 때 호출해줄 Listener 클래스를 지정한다.</li>
<li>즉, <code>BaseTimeEntity</code> 클래스에 <code>Auditing</code> 기능을 포함시킨다.</li>
</ul>
</li>
<li><code>@CreatedDate</code>
<ul>
<li>Entity가 생성되어 저장될 때 시간이 자동 저장된다.</li>
</ul>
</li>
<li><code>@LastModifiedDate</code>
<ul>
<li>조회한 Entity의 값을 변경할 때 시간이 자동 저장된다.</li>
</ul>
</li>
</ul>
<br/>
<h3 id="codepostcode--"><code>Post</code> 엔티티 클래스</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Post</span> <span class="kd">extends</span> <span class="nc">BaseTimeEntity</span> <span class="o">{</span>
	<span class="c1">//...</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
<li><code>BaseTimeEntity</code> 를 상속받아 <code>createdTime</code> 필드와 <code>modifiedTime</code> 필드를 사용한다.</li>
</ul>
<br/>
<h3 id="codeapplicationcode-"><code>Application</code> 클래스</h3>
<blockquote>
<p>애플리케이션 구동 클래스 (<code>main</code> 메서드 존재 클래스)</p>
</blockquote>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableJpaAuditing</span> <span class="c1">//JPA Auditing 활성화</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span> 
</code></pre></div></div>
<p><br/><br/></p>
<h2 id="reference">REFERENCE</h2>
<ul>
<li><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#auditing">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#auditing</a></li>
<li><a href="https://it-mesung.tistory.com/195">https://it-mesung.tistory.com/195</a></li>
<li><a href="http://blog.eomdev.com/java/2016/01/04/jpa_with_java8.html">http://blog.eomdev.com/java/2016/01/04/jpa_with_java8.html</a></li>
<li><a href="https://webcoding-start.tistory.com/53">https://webcoding-start.tistory.com/53</a></li>
</ul>
<p><br><br></p>
:ET