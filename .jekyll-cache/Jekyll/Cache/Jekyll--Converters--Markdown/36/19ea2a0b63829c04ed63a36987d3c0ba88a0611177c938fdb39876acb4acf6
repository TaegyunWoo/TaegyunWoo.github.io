I"7<p><br/><br/></p>
<ul>
<li><strong><a href="https://github.com/TaegyunWoo/Spring-Test-Code-Example">예시 프로젝트 다운로드</a></strong></li>
</ul>
<blockquote>
<p>위 프로젝트를 참고하여 기본적인 웹 애플리케이션 코드를 꼭 확인하자!</p>
</blockquote>
<ul>
<li>이전 게시글
<ul>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_Mockito_Summary">[Mockito] Mockito 개요</a></li>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_Mockito_CreateMock">[Mockito] Mock 객체 만들기</a></li>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_Mockito_Stubbing">[Mockito] Mock 객체 행동 정의</a></li>
<li><a href="https://taegyunwoo.github.io/test-framework/TestFramework_Mockito_ValidateMock">[Mockito] Mock 객체 행동 검증</a></li>
</ul>
</li>
</ul>
<p><br/><br/></p>
<h1 id="bdd--mockito-">BDD 스타일로 Mockito 사용하기</h1>
<h2 id="section">개요</h2>
<h3 id="bdd">BDD란?</h3>
<ul>
<li>BDD: Behavior Driven Development</li>
<li>애플리케이션이 어떻게 <strong>행동</strong>해야 하는지에 대한 공통된 이해를 구성하는 방법이다.</li>
<li>TDD(Test Driven Development)에서 창안되었다.</li>
</ul>
<br/>
<h3 id="given-when-then-">Given-When-Then 패턴</h3>
<ul>
<li><strong>Given</strong>
<ul>
<li>어떤 테스트에 대한 <strong>준비단계</strong></li>
</ul>
</li>
<li><strong>When</strong>
<ul>
<li>어떤 테스트에 대한 <strong>실행단계</strong></li>
</ul>
</li>
<li><strong>Then</strong>
<ul>
<li>어떤 테스트에 대한 <strong>검증단계</strong></li>
</ul>
</li>
</ul>
<br/>
<h3 id="section-1">주요 변경 사항</h3>
<p>Mockito는 BddMockito라는 클래스를 통해 BDD 스타일의 API를 제공한다.</p>
<ul>
<li><strong>when ⇒ given</strong></li>
<li><strong>verify ⇒ then</strong></li>
</ul>
<p><br/><br/></p>
<h2 id="when--given">when → given</h2>
<ul>
<li>기존에 사용하던 <code>when()</code> 메서드와 <code>thenReturn()</code> , <code>thenThrow()</code> 메서드를 아래와 같이 변경하여 사용한다.</li>
<li><code>when()</code> ⇒ <code>given()</code></li>
<li><code>thenReturn()</code> ⇒ <code>willReturn()</code></li>
<li><code>thenThrow()</code> ⇒ <code>willThrow()</code></li>
</ul>
<br/>
<h3 id="section-2">요약</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">when</span><span class="o">(</span><span class="n">memberService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">1L</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member</span><span class="o">));</span> <span class="c1">//기존 코드</span>
<span class="n">given</span><span class="o">(</span><span class="n">memberService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">1L</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member</span><span class="o">));</span> <span class="c1">//BDD 스타일 코드</span>
</code></pre></div></div>
<br/>
<h3 id="section-3">예시 코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">BDDMockito</span><span class="o">.</span><span class="na">given</span><span class="o">;</span>
<span class="c1">//나머지 import 생략</span>

<span class="kd">class</span> <span class="nc">StudyServiceTest</span> <span class="o">{</span>

  <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"BDD 스타일 API"</span><span class="o">)</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">testBdd</span><span class="o">(</span><span class="nd">@Mock</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">,</span>
               <span class="nd">@Mock</span> <span class="nc">StudyRepository</span> <span class="n">studyRepository</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">//------------- given -------------</span>
    <span class="nc">StudyService</span> <span class="n">studyService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StudyService</span><span class="o">(</span><span class="n">memberService</span><span class="o">,</span> <span class="n">studyRepository</span><span class="o">);</span>
    <span class="nc">Study</span> <span class="n">study</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Study</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="s">"java"</span><span class="o">);</span>
    <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"test@test.com"</span><span class="o">);</span>

    <span class="c1">//행동 정의(given)</span>
    <span class="n">given</span><span class="o">(</span><span class="n">memberService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">1L</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member</span><span class="o">));</span>
    <span class="n">given</span><span class="o">(</span><span class="n">studyRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">study</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">study</span><span class="o">);</span>

    <span class="c1">//------------- when -------------</span>
    <span class="n">studyService</span><span class="o">.</span><span class="na">createNewStudy</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="n">study</span><span class="o">);</span>

    <span class="c1">//------------- then -------------</span>
    <span class="n">assertEquals</span><span class="o">(</span><span class="n">study</span><span class="o">,</span> <span class="n">newStudy</span><span class="o">);</span>

    <span class="c1">//행동 검증(차후 설명)</span>
    <span class="n">verify</span><span class="o">(</span><span class="n">memberService</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">findById</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<p><br/><br/></p>
<h2 id="verify--then">verify → then</h2>
<ul>
<li>기존에 사용하던 <code>verify()</code> 메서드를 아래와 같이 변경하여 사용한다.</li>
<li><code>verify()</code> ⇒ <code>then()</code></li>
<li><code>verifyNoMoreInteractions()</code> ⇒ <code>shouldHaveNoMoreInteractions()</code></li>
<li><code>should()</code></li>
</ul>
<br/>
<h3 id="section-4">요약</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">verify</span><span class="o">(</span><span class="n">memberService</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">findById</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span> <span class="c1">//기존 코드</span>
<span class="n">then</span><span class="o">(</span><span class="n">memberService</span><span class="o">).</span><span class="na">should</span><span class="o">(</span><span class="n">times</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">findById</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span> <span class="c1">//BDD 스타일 코드</span>

<span class="n">verifyNoMoreInteractions</span><span class="o">(</span><span class="n">memberService</span><span class="o">);</span> <span class="c1">//기존 코드</span>
<span class="n">then</span><span class="o">(</span><span class="n">memberService</span><span class="o">).</span><span class="na">shouldHaveNoMoreInteractions</span><span class="o">();</span> <span class="c1">//BDD 스타일 코드</span>
</code></pre></div></div>
<br/>
<h3 id="section-5">예시 코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">BDDMockito</span><span class="o">.</span><span class="na">given</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">BDDMockito</span><span class="o">.</span><span class="na">then</span><span class="o">;</span>
<span class="c1">//나머지 import 생략</span>

<span class="kd">class</span> <span class="nc">StudyServiceTest</span> <span class="o">{</span>

  <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"BDD 스타일 API"</span><span class="o">)</span>
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">testBdd</span><span class="o">(</span><span class="nd">@Mock</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">,</span>
               <span class="nd">@Mock</span> <span class="nc">StudyRepository</span> <span class="n">studyRepository</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">//------------- given -------------</span>
    <span class="nc">StudyService</span> <span class="n">studyService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StudyService</span><span class="o">(</span><span class="n">memberService</span><span class="o">,</span> <span class="n">studyRepository</span><span class="o">);</span>
    <span class="nc">Study</span> <span class="n">study</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Study</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="s">"java"</span><span class="o">);</span>
    <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"test@test.com"</span><span class="o">);</span>

    <span class="c1">//행동 정의(given)</span>
    <span class="n">given</span><span class="o">(</span><span class="n">memberService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">1L</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member</span><span class="o">));</span>
    <span class="n">given</span><span class="o">(</span><span class="n">studyRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">study</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">study</span><span class="o">);</span>

    <span class="c1">//------------- when -------------</span>
    <span class="n">studyService</span><span class="o">.</span><span class="na">createNewStudy</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="n">study</span><span class="o">);</span>

    <span class="c1">//------------- then -------------</span>
    <span class="n">assertEquals</span><span class="o">(</span><span class="n">study</span><span class="o">,</span> <span class="n">newStudy</span><span class="o">);</span>

    <span class="c1">//행동 검증</span>
    <span class="n">then</span><span class="o">(</span><span class="n">memberService</span><span class="o">).</span><span class="na">should</span><span class="o">(</span><span class="n">times</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">findById</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<br>
<hr />
<br>
<p><a href="https://inf.run/htNB"><img src="/assets/img/Inflearn_Java_Test/logo.png" width="400px" height="300px"></a></p>
<ul>
<li><em>본 게시글은 백기선님의 강의를 토대로 정리한 글입니다.</em></li>
<li><em>더 자세한 내용을 알고 싶으신 분들이 계신다면, 해당 강의를 수강하시는 것을 추천드립니다.</em></li>
</ul>
:ET